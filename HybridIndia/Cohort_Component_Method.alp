<?xml version="1.0" encoding="UTF-8"?>
<!--
*************************************************
	         AnyLogic Project File 
*************************************************	         
-->
<AnyLogicWorkspace WorkspaceVersion="1.9" AnyLogicVersion="8.8.4.202307181708" AlpVersion="8.8.2">
<Model>
	<Id>1494655951603</Id>
	<Name><![CDATA[Cohort_Component_Method]]></Name>
	<EngineVersion>6</EngineVersion>
	<JavaPackageName><![CDATA[cohort_comp_method_2020]]></JavaPackageName>
	<ModelTimeUnit><![CDATA[Year]]></ModelTimeUnit>
	<OptionLists>
		<OptionList>
			<Id>1494658617686</Id>
			<Name><![CDATA[Gender_List]]></Name>
			<Option>
				<Id>1494658617687</Id>
				<Name><![CDATA[MALE]]></Name>
			</Option>
			<Option>
				<Id>1494658617688</Id>
				<Name><![CDATA[FEMALE]]></Name>
			</Option>
		</OptionList>
		<OptionList>
			<Id>1494751969971</Id>
			<Name><![CDATA[Nativity_Level]]></Name>
			<Option>
				<Id>1494751969972</Id>
				<Name><![CDATA[NATIVE]]></Name>
			</Option>
			<Option>
				<Id>1494751969973</Id>
				<Name><![CDATA[SEMI_NATIVE]]></Name>
			</Option>
			<Option>
				<Id>1494751969974</Id>
				<Name><![CDATA[NON_NATIVE]]></Name>
			</Option>
		</OptionList>
		<OptionList>
			<Id>1611761363642</Id>
			<Name><![CDATA[Yearly_Update_Actions]]></Name>
			<Option>
				<Id>1611761365253</Id>
				<Name><![CDATA[Mortality]]></Name>
			</Option>
			<Option>
				<Id>1611761379310</Id>
				<Name><![CDATA[Reproduction]]></Name>
			</Option>
		</OptionList>
		<OptionList>
			<Id>1683471504932</Id>
			<Name><![CDATA[Affiliation]]></Name>
			<Option>
				<Id>1683471504933</Id>
				<Name><![CDATA[buddhists]]></Name>
			</Option>
			<Option>
				<Id>1683471508284</Id>
				<Name><![CDATA[christians]]></Name>
			</Option>
			<Option>
				<Id>1683471531569</Id>
				<Name><![CDATA[folk_religions]]></Name>
			</Option>
			<Option>
				<Id>1683471540062</Id>
				<Name><![CDATA[hindus]]></Name>
			</Option>
			<Option>
				<Id>1683471523511</Id>
				<Name><![CDATA[jews]]></Name>
			</Option>
			<Option>
				<Id>1683471556118</Id>
				<Name><![CDATA[muslims]]></Name>
			</Option>
			<Option>
				<Id>1683471505524</Id>
				<Name><![CDATA[other_religions]]></Name>
			</Option>
			<Option>
				<Id>1683471560028</Id>
				<Name><![CDATA[unaffiliated]]></Name>
			</Option>
		</OptionList>
		<OptionList>
			<Id>1697124933066</Id>
			<Name><![CDATA[Group]]></Name>
			<Option>
				<Id>1697124933070</Id>
				<Name><![CDATA[USA_NonWhite]]></Name>
			</Option>
			<Option>
				<Id>1697124933072</Id>
				<Name><![CDATA[USA_White]]></Name>
			</Option>
		</OptionList>
	</OptionLists>
	<ActiveObjectClasses>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1494655951608</Id>
			<Name><![CDATA[Main]]></Name>
			<AdditionalClassCode><![CDATA[// ONLY FOR USE IN TESTING
public static Main TEST_MAIN;
public static List<Tuple> phase2MigrationSchedule = null;
public static BufferedWriter outputWriter = null;
public static Object outputWriterLock = new Object();

public static BufferedWriter getOutputWriter(String filename, String headers) throws IOException {
	if (outputWriter == null){
		synchronized(outputWriterLock) {
			if (outputWriter == null) {
				outputWriter = new BufferedWriter(new FileWriter(filename));
				outputWriter.write(headers);
			}
		}
	}
	return outputWriter;
}

public static BufferedWriter getOutputWriter() throws IOException {
	return getOutputWriter(null, null);
}


// Actually Hindues not Christians
public static final double[] pewChristians = new double[] {
	1035975646,
	1093782156,
	1145909252,
	1191509545,
	1229903434,
	1260618293,
	1283311248,
	1297955144.
	
};
public double[] christianPop = new double[8];

public double getCost() {
	double  total = 0;
	for (int i = 0; i < pewChristians.length; i++) {
		total += (Math.abs(pewChristians[i] - christianPop[i]));
	}
	
 /*Optional<Map<String, Double>> unaffImp = personReligiosityCache
	.getThirdsStrictnessDimensionsAverage(unaffiliated, PersonReligiosityCache.ALL_STRICTNESSES);
	double distOver = 0;
	if (unaffImp.isPresent()) {
		distOver = max(0, unaffImp.get().get(InteractionsUtils.IMPORTANCE) - 0.5);
	}*/
	
	
	//total *= distOver * 4 + 1;
	return total;
}

/*
 * In order to support parameter sweeps via AnyLogic's Parameter Variation experiments,
 * we've added this code that filters out invalid parameter combinations and allows
 * mapping integer inputs (which can be varied using AnyLogic's parameter ranges) to
 * boolean inputs.
 */

public static Predicate<Main> BASIC_FILTER = m -> {
	if (m.TopDown != m.TopDownInitialAgents) {
		traceln("Skipping experiment " + m.SimulationID + " for inconsistent TopDown.");
		return true;
	}
	if ((m.FiveYearStep && m.AgentInitializationPerAgeYear)
			|| (!m.FiveYearStep && !m.AgentInitializationPerAgeYear)) {
			
		traceln("Skipping experiment " + m.SimulationID + " for inconsistent Agent Age Init.");
		return true;
	}
	// Split age is always forced when splitFertility is enabled, so it is redundant
	if (m.splitFertility && !m.ForceUseSplitAge) {
		traceln("Skipping experiment " + m.SimulationID + " for redundant ForceUseSplitAge.");
		return true;
	}
	if (!m.splitFertility && m.ForceUseSplitAge) {
		traceln("Skipping experiment " + m.SimulationID + " for redundant ForceUseSplitAge.");
		return true;
	}
	// Conceptually, Five Year Step + Split Age has no definition
	/*if (m.FiveYearStep && m.ForceUseSplitAge) {
		traceln("Skipping experiment " + m.SimulationID + " for undefined: ForceUseSplitAge.");
		return true;
	}
	if(m.FiveYearStep && m.ImmigrantsImmuneFromDeath) {
		traceln("Skipping experiment " + m.SimulationID + " for Immigrant Death immunity undefined for Five year step.");
		return true;
	}*/
	if(!m.splitFertility && m.ImmigrantsImmuneFromDeath) {
		traceln("Skipping experiment " + m.SimulationID + " for undefined: !SplitFert w/ immigrant mort immunity.");
		return true;
	}
	if(m.splitFertility && !m.ImmigrantsImmuneFromDeath) {
		traceln("Skipping experiment " + m.SimulationID + " for undefined: SplitFert w/o immigrant mort immunity.");
		return true;
	}
	int totalVariations = min(1, m.input_InteractionsType) + 
	m.input_inheritanceType + 
	(1 - m.input_coupleSwitching);
	if (totalVariations > 1) {
		traceln(String.format("Skipping combo %d %d %d", m.input_InteractionsType, m.input_inheritanceType, m.input_coupleSwitching));
		return true;
	}
	
	if (m.secularEducation > m.religiousEducation) {
		traceln("Skipping invalid education values");
		return true;
	}
	
	if (m.attitudeIncrement < m.attitudeSelfDecrement) {
	traceln("Skipping invalid attitude increment values");
		return true;
	}

	return false;
};


// TODO: Parameterize prejudice or link to exogenous data
private static final Map<Affiliation, Map<Affiliation, Double>> DUMMY_PREJUDICE = new HashMap<Affiliation, Map<Affiliation, Double>>() {{
	for (Affiliation aff1 : Affiliation.class.getEnumConstants()) {
		put(aff1, new HashMap<Affiliation, Double>());
		for (Affiliation aff2 : Affiliation.class.getEnumConstants()) {
			get(aff1).put(aff2, 0.5);
		}
	}
}};

 public static final Affiliation affilHybridToPew(String aff) {
    	switch(aff) {
    	case "Protestant":
    	case "Catholic":
    	case "Christian":
    	case "Christianity":
    		return Affiliation.christians;
    	case "Buddhist":
    		return Affiliation.buddhists;
    	case "Hindu":
    		return Affiliation.hindus;
    	case "Jewish":
    		return Affiliation.jews;
    	case "Muslim":
    		return Affiliation.muslims;
    	case "No religion":
    		return Affiliation.unaffiliated;
    	case "Other":
    		return Affiliation.other_religions;
    	default:
    		throw new IllegalStateException("Unexpected affiliation string: " + aff);
    	}
    }

public final Map<Affiliation, Map<Affiliation, Double>> global_prejudice = new HashMap<Affiliation, Map<Affiliation, Double>>() {{
	List<Tuple> rows = selectFrom(prejudice).list(
		prejudice.affiliation,
		//prejudice.mean_jewatt,
		prejudice.mean_chrsatt,
		prejudice.mean_buddatt,
		prejudice.mean_hindatt,
		prejudice.mean_musatt,
		//prejudice.mean_noneatt,
		prejudice.mean_othatt
	);
	for (Tuple t : rows) {
		Affiliation aff1 = affilHybridToPew(t.get(0, String.class));
		Map<Affiliation, Double> p = new HashMap<>();
		//p.put(jews, t.get(1, Double.class));
		p.put(christians, t.get(1, Double.class));
		p.put(buddhists, t.get(2, Double.class));
		p.put(hindus, t.get(3, Double.class));
		p.put(muslims, t.get(4, Double.class));
		p.put(unaffiliated, t.get(5, Double.class));
		p.put(other_religions, t.get(5, Double.class));
		p.put(folk_religions, t.get(5, Double.class));
		put(aff1, p);
		
		if (aff1 == other_religions) {
			put(folk_religions, p);
		}
	}
}};

public HashMap<Affiliation, Double> getDefaultAttitudesFromAff(Affiliation aff) {
	Map<Affiliation, Double> prej = global_prejudice.get(aff);
	HashMap<Affiliation, Double> att = new HashMap<>();
	for (Affiliation affil : prej.keySet()) {
		att.put(affil, 1 - prej.get(affil));
	}
	return att;
}

public double existentialSecurity() { 
	return DBUtils.getExistentialSecurity(this);
}

public double religiousEducation() { 
	return religiousEducation;
	//return DBUtils.getReligiousEducation(this);
}

public double secularEducation() { 
	return secularEducation;
	//return DBUtils.getSecularEducation(this) / 4; 
}

public double lifestyleOpportunity() { 
	return DBUtils.getLifestyleOpportunity(this);
}

public double pluralism() { 
	return this.personReligiosityCache.calculatePluralism(); 
}

public double freedom() { 
	return DBUtils.getFreedom(this);
}


private synchronized void setInitialParameters() {
	// Initial agents can be set via input_NumberOfInitialAgents or through the array
	// starting_population_sizes and an index starting_population_size_index.
	if (input_NumberOfInitialAgents > 0) {
		Number_of_Adults = input_NumberOfInitialAgents;
	} else {
		Number_of_Adults = starting_population_sizes[starting_population_size_index];
	}
						
	Sex_Ratio_Init_Pop = selectFrom(init_stats)
						.where(init_stats.country_id.eq(country_id))
						.uniqueResult(init_stats.intial_sex_ratio);
	
	// These values of inputs of the format input_<VariableName> which are integers,
	// and that integer is mapped to a boolean (0 == false, 0 != true)
	// This allows us to do a parameter sweep (AnyLogic does not allow a boolean range).					
	FiveYearStep = input_FiveYearStep != 0;
	TopDown = input_TopDown != 0;
	TopDownInitialAgents = input_TopDownInitialAgents != 0;
	AgentInitializationPerAgeYear = input_AgentInitializationPerAgeYear != 0;
	ForceUseSplitAge = input_ForceUseSplitAge != 0;
	splitFertility = input_splitFertility != 0;
	ImmigrantsImmuneFromDeath = input_ImmigrantsImmuneFromDeath != 0;
	// Interaction Types 0 - all, 1 - No Older, 2 - None
	toggYoungleInteractions = input_InteractionsType != 2;
	toggleOlderInteraction = input_InteractionsType == 0;
	// Inheritance type 0 - ABM Inherit, 1 - Mother inheritance
	motherInheritance = input_inheritanceType == 1;
	
	coupleSwitching = input_coupleSwitching == 1;
	
	Percent_Pop =  Double.valueOf(Number_of_Adults) / selectFrom(init_stats)
						.where(init_stats.country_id.eq(country_id))
						.uniqueResult(init_stats.initial_population);
						
	traceln(String.format("Sim Params: young %b old %b mom %b cup %b att %f rel %f sec %f", 
		toggYoungleInteractions, toggleOlderInteraction, motherInheritance, coupleSwitching,
		attitudeSelfDecrement, religiousEducation, secularEducation
	));
						
	isPhase2 = input_isPhase2 != 0;
	debugAff = input_debugAff != 0;
	
	if (isPhase2) {
		Periods = new ArrayList<String>() {
            {
                add("2010-2014");
                add("2015-2019");
                add("2020-2024");
                add("2025-2029");
                add("2030-2034");
                add("2035-2039");
                add("2040-2044");
                add("2045-2049");
                add("2050-2054");
                add("2055-2059");
            }
        };
        phase2MigrationSchedule = selectFrom(phase2_migration_schedule).list(phase2_migration_schedule.age, phase2_migration_schedule.dist);
	}
	
	
	if (isTesting) {
		Main.TEST_MAIN = this;
		JUnitCore junit = new JUnitCore();
		Result result = junit.run(
			Tests.class
		);
		traceln(result.wasSuccessful() ? "SUCCESS\n" : "FAILURE\n");
		traceln("Run: " + result.getRunCount());
		traceln("Failed: " + result.getFailureCount());
		if (result.getFailureCount() > 0) {
			for (Failure f : result.getFailures()) {
				traceln(f.getTestHeader() + " : " + f.getMessage());
				for (StackTraceElement s : f.getException().getStackTrace()) {
					traceln(s);
				}
			}
		}
	}
}]]></AdditionalClassCode>
			<Import><![CDATA[import java.io.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.Optional;
import java.lang.reflect.*;
import java.io.ObjectStreamConstants;
import org.eclipse.jdt.internal.compiler.codegen.IntegerCache;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.io.BufferedWriter;
import java.io.FileWriter;

// Test deps
import org.junit.runner.JUnitCore;
import org.junit.internal.TextListener;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;]]></Import>
			<Implements><![CDATA[GlobalParametersHaving]]></Implements>
			<StartupCode><![CDATA[setInitialParameters();]]></StartupCode>
			<Generic>false</Generic>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>GIS</SpaceType>
					<WidthCode><![CDATA[1000]]></WidthCode>
					<HeightCode><![CDATA[1000]]></HeightCode>
					<ZHeightCode><![CDATA[500]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>RANDOM</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>DISTANCE_BASED</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[4]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[Interaction_Radius]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1494662400000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0.1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1494655951605</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1580971507779</CurrentLevel>
			<ConnectionsId>1494655951604</ConnectionsId>
			<Outputs>
				<Output>
					<Id>1590739027637</Id>
					<Name><![CDATA[Population_Size]]></Name>
					<X>100</X><Y>1900</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Type><![CDATA[int]]></Type>
					<UnitType><![CDATA[NONE]]></UnitType>
					<Value Class="CodeValue">
						<Code><![CDATA[People.size()]]></Code>
					</Value>
					<ComputationMoment>MANUALLY</ComputationMoment>
					<ComputationTimeCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
					</ComputationTimeCode>
					<ComputationDate>1590739200000</ComputationDate>
				</Output>
				<Output>
					<Id>1590739178373</Id>
					<Name><![CDATA[Fertility_rate]]></Name>
					<X>100</X><Y>1940</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Type><![CDATA[double]]></Type>
					<UnitType><![CDATA[NONE]]></UnitType>
					<Value Class="CodeValue">
						<Code><![CDATA[Calculate_Fertility_rate()]]></Code>
					</Value>
					<ComputationMoment>MANUALLY</ComputationMoment>
					<ComputationTimeCode Class="CodeUnitValue">
						<Code><![CDATA[null]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</ComputationTimeCode>
					<ComputationDate>1590739200000</ComputationDate>
				</Output>
			</Outputs>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1573572859418</Id>
					<Name><![CDATA[Previous_Period_Pop]]></Name>
					<X>330</X><Y>-60</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1588668819055</Id>
					<Name><![CDATA[csvFileName]]></Name>
					<X>830</X><Y>-260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[String]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA["LHS_Experiment_Output.csv"]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1588670399824</Id>
					<Name><![CDATA[Period_Count]]></Name>
					<X>830</X><Y>-240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[Starting_Period]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590745144410</Id>
					<Name><![CDATA[Death_Rate]]></Name>
					<X>-120</X><Y>2610</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590745192616</Id>
					<Name><![CDATA[Immigration_Rate]]></Name>
					<X>1030</X><Y>2590</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590745229842</Id>
					<Name><![CDATA[Emigration_Rate]]></Name>
					<X>1030</X><Y>2620</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590745828569</Id>
					<Name><![CDATA[Generation_Counter]]></Name>
					<X>-200</X><Y>3260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int []]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new int [40]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590747268797</Id>
					<Name><![CDATA[Emigrant_counter]]></Name>
					<X>20</X><Y>-270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590747401863</Id>
					<Name><![CDATA[Immigrant_counter]]></Name>
					<X>20</X><Y>-250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590747416577</Id>
					<Name><![CDATA[Death_counter]]></Name>
					<X>330</X><Y>-40</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590758694633</Id>
					<Name><![CDATA[Birth_Rate]]></Name>
					<X>-120</X><Y>2580</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590758827032</Id>
					<Name><![CDATA[Birth_counter]]></Name>
					<X>330</X><Y>-20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1591096589249</Id>
					<Name><![CDATA[Growth_Rate]]></Name>
					<X>320</X><Y>1970</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1592319672760</Id>
					<Name><![CDATA[Net_Migration_Rate]]></Name>
					<X>1030</X><Y>2650</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598870350350</Id>
					<Name><![CDATA[Year_Count]]></Name>
					<Description><![CDATA[Year at which simulation starts]]></Description>
					<X>830</X><Y>-220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[1950]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878738498</Id>
					<Name><![CDATA[Immigration_Rate_Mal]]></Name>
					<X>1030</X><Y>2690</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878738502</Id>
					<Name><![CDATA[Emigration_Rate_Mal]]></Name>
					<X>1030</X><Y>2720</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878738504</Id>
					<Name><![CDATA[Net_Migration_Rate_Mal]]></Name>
					<X>1030</X><Y>2750</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878773720</Id>
					<Name><![CDATA[Immigration_Rate_Fem]]></Name>
					<X>1210</X><Y>2690</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878773722</Id>
					<Name><![CDATA[Emigration_Rate_Fem]]></Name>
					<X>1210</X><Y>2720</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878773732</Id>
					<Name><![CDATA[Net_Migration_Rate_Fem]]></Name>
					<X>1210</X><Y>2750</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878834136</Id>
					<Name><![CDATA[Emigrant_counter_Mal]]></Name>
					<X>20</X><Y>-220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878834138</Id>
					<Name><![CDATA[Immigrant_counter_Mal]]></Name>
					<X>20</X><Y>-200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878854296</Id>
					<Name><![CDATA[Emigrant_counter_Fem]]></Name>
					<X>20</X><Y>-170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598878854298</Id>
					<Name><![CDATA[Immigrant_counter_Fem]]></Name>
					<X>20</X><Y>-150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1598950150580</Id>
					<Name><![CDATA[Age_Prob]]></Name>
					<Description><![CDATA[Probability of assigning an age in 5 year-category intervals. The probability increases linearly with age.
Note, these are cumulative probabilities, each number is the sum of the previous ones.]]></Description>
					<X>350</X><Y>-280</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[{0.1111111,0.3333333,0.6666667,0.8888889,1.0}]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599482097788</Id>
					<Name><![CDATA[CDF_Age_Pop]]></Name>
					<X>640</X><Y>-130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double []]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [10]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599482466129</Id>
					<Name><![CDATA[CDF_Age_Mal]]></Name>
					<X>640</X><Y>-110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double []]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [10]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599482471437</Id>
					<Name><![CDATA[CDF_Age_Fem]]></Name>
					<X>640</X><Y>-90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double []]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [10]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599482567293</Id>
					<Name><![CDATA[BR_Per_Age]]></Name>
					<X>640</X><Y>-70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [35]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599482619439</Id>
					<Name><![CDATA[DR_Per_Age_Fem]]></Name>
					<X>640</X><Y>-50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [24]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599482651502</Id>
					<Name><![CDATA[DR_Per_Age_Mal]]></Name>
					<X>640</X><Y>-30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [24]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599485913243</Id>
					<Name><![CDATA[Counter_BR_Per_Age]]></Name>
					<X>780</X><Y>-90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [35]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599485913247</Id>
					<Name><![CDATA[Counter_DR_Per_Age_Fem]]></Name>
					<X>780</X><Y>-70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [24]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599485913249</Id>
					<Name><![CDATA[Counter_DR_Per_Age_Mal]]></Name>
					<X>780</X><Y>-50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new double [24]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599488639968</Id>
					<Name><![CDATA[Counter_Male_Births]]></Name>
					<X>780</X><Y>-130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599488664711</Id>
					<Name><![CDATA[Counter_Female_Births]]></Name>
					<X>780</X><Y>-110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1599637101837</Id>
					<Name><![CDATA[Sex_Ratio_At_Birth]]></Name>
					<X>780</X><Y>-30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1600839551212</Id>
					<Name><![CDATA[Counter_Pop_By_Age_Mal]]></Name>
					<X>980</X><Y>-120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new int [21]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1600839578861</Id>
					<Name><![CDATA[Counter_Pop_By_Age_Fem]]></Name>
					<X>980</X><Y>-140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new int [21]]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1630679499058</Id>
					<Name><![CDATA[Interaction_Radius]]></Name>
					<Description><![CDATA[I don't believe this is used but the model wouldn't build without it.]]></Description>
					<X>-190</X><Y>1080</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1631582427969</Id>
					<Name><![CDATA[emigrationRateCache]]></Name>
					<X>1015</X><Y>-415</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Map<Cohort, Double>]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new ConcurrentHashMap<>();]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1635972647142</Id>
					<Name><![CDATA[Number_of_Adults]]></Name>
					<X>-740</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1635972798745</Id>
					<Name><![CDATA[Sex_Ratio_Init_Pop]]></Name>
					<X>-740</X><Y>160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490357143</Id>
					<Name><![CDATA[FiveYearStep]]></Name>
					<X>-740</X><Y>180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490397142</Id>
					<Name><![CDATA[Percent_Pop]]></Name>
					<X>-740</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490450039</Id>
					<Name><![CDATA[splitFertility]]></Name>
					<X>-740</X><Y>280</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490450293</Id>
					<Name><![CDATA[ForceUseSplitAge]]></Name>
					<X>-740</X><Y>260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490450549</Id>
					<Name><![CDATA[AgentInitializationPerAgeYear]]></Name>
					<X>-740</X><Y>240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490450771</Id>
					<Name><![CDATA[TopDownInitialAgents]]></Name>
					<X>-740</X><Y>220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648490450990</Id>
					<Name><![CDATA[TopDown]]></Name>
					<X>-740</X><Y>200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1648493023180</Id>
					<Name><![CDATA[ImmigrantsImmuneFromDeath]]></Name>
					<X>-740</X><Y>320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1686104308107</Id>
					<Name><![CDATA[isPhase2]]></Name>
					<X>1060</X><Y>-270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1686104559551</Id>
					<Name><![CDATA[debugAff]]></Name>
					<X>1190</X><Y>-270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697123107204</Id>
					<Name><![CDATA[personReligiosityCache]]></Name>
					<X>1402</X><Y>-366</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[PersonReligiosityCache]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new PersonReligiosityCache()]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697314315575</Id>
					<Name><![CDATA[emigrationCountCache]]></Name>
					<X>1080</X><Y>-400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Map<Cohort, Integer>]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[null]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697562827451</Id>
					<Name><![CDATA[toggleOlderInteraction]]></Name>
					<X>-820</X><Y>340</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[true]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697562839537</Id>
					<Name><![CDATA[toggYoungleInteractions]]></Name>
					<X>-820</X><Y>360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[true]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697562885997</Id>
					<Name><![CDATA[motherInheritance]]></Name>
					<X>-820</X><Y>380</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697567394884</Id>
					<Name><![CDATA[coupleSwitching]]></Name>
					<X>-820</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[true]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="Parameter">
					<Id>1540893879728</Id>
					<Name><![CDATA[AnnualCSV_FileName]]></Name>
					<X>1560</X><Y>-230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1540893879726</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1540893879734</Id>
					<Name><![CDATA[Annual_Individual_CSV_FileName]]></Name>
					<X>1630</X><Y>-160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1540893879732</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1540893879741</Id>
					<Name><![CDATA[SimulationID]]></Name>
					<X>1510</X><Y>-270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA["NA"]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1540893879739</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1540894011080</Id>
					<Name><![CDATA[Annual_Data_Collect]]></Name>
					<X>1510</X><Y>-290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1540894011078</Id>
							<EditorContolType>CHECK_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1541740410511</Id>
					<Name><![CDATA[Annual_Club_CSV_FileName]]></Name>
					<X>1630</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1541740410509</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1588671396788</Id>
					<Name><![CDATA[LHS_Experiment_Number]]></Name>
					<X>850</X><Y>-200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[1]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1588671396786</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1612992144530</Id>
					<Name><![CDATA[input_TopDownInitialAgents]]></Name>
					<X>-520</X><Y>220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1612992144528</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1617721935915</Id>
					<Name><![CDATA[input_FiveYearStep]]></Name>
					<X>-520</X><Y>180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1617721935913</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1618332956184</Id>
					<Name><![CDATA[Death_Rate_Source]]></Name>
					<Description><![CDATA[CDR, SR,PC]]></Description>
					<X>-520</X><Y>90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA["CDR"]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1618332956182</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1618584211210</Id>
					<Name><![CDATA[Birth_Rate_Source]]></Name>
					<Description><![CDATA[FR,BC]]></Description>
					<X>-520</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA["FR"]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1618584211208</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1620835060614</Id>
					<Name><![CDATA[input_TopDown]]></Name>
					<X>-520</X><Y>200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1620835060612</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1620919785493</Id>
					<Name><![CDATA[input_AgentInitializationPerAgeYear]]></Name>
					<X>-520</X><Y>240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1620919785491</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1621627279688</Id>
					<Name><![CDATA[Starting_Period]]></Name>
					<X>830</X><Y>-280</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1621627279686</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1621629563421</Id>
					<Name><![CDATA[input_NumberOfInitialAgents]]></Name>
					<X>-520</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[10000]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1621629563419</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1631551760655</Id>
					<Name><![CDATA[input_splitFertility]]></Name>
					<X>-520</X><Y>280</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1631551760653</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1635971049972</Id>
					<Name><![CDATA[country_id]]></Name>
					<X>-520</X><Y>160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[DBUtils.COUNTRY_ID_NORWAY]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1635971049970</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1639591937776</Id>
					<Name><![CDATA[input_ForceUseSplitAge]]></Name>
					<X>-520</X><Y>260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1639591937774</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1648492121753</Id>
					<Name><![CDATA[starting_population_size_index]]></Name>
					<X>-520</X><Y>390</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1648492121751</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1648492141861</Id>
					<Name><![CDATA[starting_population_sizes]]></Name>
					<X>-520</X><Y>410</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int[]]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[{}]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1648492141859</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1648493023183</Id>
					<Name><![CDATA[input_ImmigrantsImmuneFromDeath]]></Name>
					<X>-520</X><Y>320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1648493023181</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1648595220287</Id>
					<Name><![CDATA[skipExperimentFilter]]></Name>
					<X>-520</X><Y>470</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[Predicate<Main>]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[m -> false]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1648595220285</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1686104420241</Id>
					<Name><![CDATA[input_isPhase2]]></Name>
					<X>1060</X><Y>-290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1686104420239</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1686104542844</Id>
					<Name><![CDATA[input_debugAff]]></Name>
					<X>1190</X><Y>-290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1686104542842</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697123468691</Id>
					<Name><![CDATA[c_swing]]></Name>
					<X>-240</X><Y>80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.5]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697123468689</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697123468694</Id>
					<Name><![CDATA[isTesting]]></Name>
					<X>-520</X><Y>500</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[boolean]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697123468692</Id>
							<EditorContolType>CHECK_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697123468697</Id>
					<Name><![CDATA[totalConversionChance]]></Name>
					<X>-520</X><Y>520</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.001]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697123468695</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697123468700</Id>
					<Name><![CDATA[numInteractionsPerStep]]></Name>
					<X>-520</X><Y>590</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[10]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697123468698</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697123468703</Id>
					<Name><![CDATA[couplingAgeOlderAmountBias]]></Name>
					<X>-520</X><Y>610</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[3.0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697123468701</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697123468706</Id>
					<Name><![CDATA[secRXDimensionsIncrementDenominator]]></Name>
					<X>-520</X><Y>630</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[4.0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697123468704</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697123468709</Id>
					<Name><![CDATA[attitudeIncrement]]></Name>
					<X>-520</X><Y>660</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.03]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697123468707</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697123468712</Id>
					<Name><![CDATA[attitudeSelfDecrement]]></Name>
					<X>-520</X><Y>680</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.015]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697123468710</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697123468715</Id>
					<Name><![CDATA[dimensionsIncrement]]></Name>
					<X>-520</X><Y>700</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.03]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697123468713</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697123468718</Id>
					<Name><![CDATA[highSNWCutoff]]></Name>
					<X>-520</X><Y>720</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.5]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697123468716</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697123468721</Id>
					<Name><![CDATA[stronglyReligiousCutoff]]></Name>
					<X>-520</X><Y>740</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.5]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697123468719</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697126924112</Id>
					<Name><![CDATA[minStrictness]]></Name>
					<X>-519</X><Y>827</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697126924110</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697126924118</Id>
					<Name><![CDATA[modeStrictness]]></Name>
					<X>-519</X><Y>847</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.35]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697126924116</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697126924122</Id>
					<Name><![CDATA[maxStrictness]]></Name>
					<X>-519</X><Y>867</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.7]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697126924120</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697562748859</Id>
					<Name><![CDATA[input_InteractionsType]]></Name>
					<X>-190</X><Y>250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697562748857</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697562788272</Id>
					<Name><![CDATA[input_inheritanceType]]></Name>
					<X>-190</X><Y>280</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697562788270</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697567368903</Id>
					<Name><![CDATA[input_coupleSwitching]]></Name>
					<X>-190</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[1]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1697567368901</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697580785524</Id>
					<Name><![CDATA[secularEducation]]></Name>
					<X>-190</X><Y>360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1697580785522</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1697580797846</Id>
					<Name><![CDATA[religiousEducation]]></Name>
					<X>-190</X><Y>390</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1697580797844</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1699901014119</Id>
					<Name><![CDATA[switchThreshold]]></Name>
					<X>-180</X><Y>480</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.7]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1699901014117</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1699901034038</Id>
					<Name><![CDATA[disaffThreshold]]></Name>
					<X>-180</X><Y>510</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0.7]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1699901034036</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1684892290093</Id>
					<Name><![CDATA[Aff_Percentage]]></Name>
					<X>1070</X><Y>-210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[LinkedHashMap]]></CollectionClass>
						<ElementClass><![CDATA[Affiliation]]></ElementClass>
						<ValueElementClass><![CDATA[Double]]></ValueElementClass>
					</Properties>

				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1685672567613</Id>
					<Name><![CDATA[Aff_Age_Count_Fem]]></Name>
					<Description><![CDATA[Map from Affiliation to an array of populations  for the age range 0-4, 5-9, ... , 90-94, 95+]]></Description>
					<X>1060</X><Y>-250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[LinkedHashMap]]></CollectionClass>
						<ElementClass><![CDATA[Affiliation]]></ElementClass>
						<ValueElementClass><![CDATA[int[]]]></ValueElementClass>
					</Properties>

				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1685672725093</Id>
					<Name><![CDATA[Aff_Age_Count_Mal]]></Name>
					<Description><![CDATA[Map from Affiliation to an array of populations  for the age range 0-4, 5-9, ... , 90-94, 95+]]></Description>
					<X>1070</X><Y>-230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[LinkedHashMap]]></CollectionClass>
						<ElementClass><![CDATA[Affiliation]]></ElementClass>
						<ValueElementClass><![CDATA[int[]]]></ValueElementClass>
					</Properties>

				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1687717266833</Id>
					<Name><![CDATA[Periods]]></Name>
					<X>350</X><Y>-240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[ArrayList]]></CollectionClass>
						<ElementClass><![CDATA[String]]></ElementClass>
						<ValueElementClass><![CDATA[String]]></ValueElementClass>
						<CollectionInitializer Class="CodeValue">
							<Code><![CDATA[new ArrayList<String>() {
	{
		add("1950-1954");
		add("1955-1959");
		add("1960-1964");
		add("1965-1969");
		add("1970-1974");
		add("1975-1979");
		add("1980-1984");
		add("1985-1989");
		add("1990-1994");
		add("1995-1999");
		add("2000-2004");
		add("2005-2009");
		add("2010-2014");
		add("2015-2019");
		add("2020-2024");
		add("2025-2029");
		add("2030-2034");
		add("2035-2039");
		add("2040-2044");
		add("2045-2049");
		add("2050-2054");
		add("2055-2059");
		add("2060-2064");
		add("2065-2069");
		add("2070-2074");
		add("2075-2079");
		add("2080-2084");
		add("2085-2089");
		add("2090-2094");
		add("2095-2099");
	}
}]]></Code>
						</CollectionInitializer>
					</Properties>

				</Variable>
			</Variables>
			<StatechartElements>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1519143896537</Id>
					<Name><![CDATA[Populate]]></Name>
					<X>500</X><Y>-240</Y>
					<Label><X>25</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[setInitialParameters(); if (!skipExperimentFilter.test(this)) Generate_Agents();]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1519223963311</Id>
					<Name><![CDATA[Period_Updates]]></Name>
					<X>490</X><Y>-80</Y>
					<Label><X>10</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="120" Height="30">
						<EntryAction><![CDATA[if (simulationIsOver()) {
	return;
}

String Period = Periods.get(Period_Count);

// In this function, periodal values are reset and period stats in the
// output csv are written.


// IMPORTANT NOTE: Histogram code has not been maintained and most
// likely is broken. It has not been removed due to it being a bit of
// a hassle (the histogram code is in a bunch of little places in 
// AnyLogic that makes it more complicated than one would think to
// remove.

/// Reset histograms
Hist_Age_Pop.reset();
Hist_Age_Mal.reset();
Hist_Age_Fem.reset();

/// Update Birth rate
Birth_Rate = Birth_counter / Previous_Period_Pop;

// Update Death rate
Death_Rate = Death_counter / Previous_Period_Pop;

/// GET INMIGRATION RATE
Immigration_Rate = Immigrant_counter / Previous_Period_Pop;
Immigration_Rate_Mal = Immigrant_counter_Mal / Previous_Period_Pop;
Immigration_Rate_Fem = Immigrant_counter_Fem / Previous_Period_Pop;

/// GET EMIGRATION RATE
Emigration_Rate = Emigrant_counter / Previous_Period_Pop;
Emigration_Rate_Mal = Emigrant_counter_Mal / Previous_Period_Pop;
Emigration_Rate_Fem = Emigrant_counter_Fem / Previous_Period_Pop;

/// GET NET MIGRATION RATE
Net_Migration_Rate = (Immigrant_counter - Emigrant_counter) / Previous_Period_Pop;
Net_Migration_Rate = 0;

// Update population size, fertility rate, and generation counter
update_Population_Size();
update_Fertility_rate();
Update_Generation_Counter();

Update_Hist_CDF_Pop_Age();
Update_BR_DR_per_Age();
Update_Aff_Count();

//Update Growth Rate
Growth_Rate = People.size() / Previous_Period_Pop;
//traceln("Previous Pop " + Previous_Period_Pop + " Current Pop " + People.size() + " Growth Rate " + Growth_Rate);

//Sex Ratio At Birth
Sex_Ratio_At_Birth = (double) Counter_Male_Births / ( Counter_Male_Births + Counter_Female_Births);

if ( Annual_Data_Collect == true )
{
	this.personReligiosityCache.clear();
	People.forEach(p -> this.personReligiosityCache.add(p.toReligiosity()));
	Update_AnnualCSV_CustomExp(AnnualCSV_FileName, Period_Count);
	//Update_Annual_Individual_CSV_CustomExp(Annual_Individual_CSV_FileName, Period_Count);
	//Update_Annual_Club_CSV_CustomExp(Annual_Club_CSV_FileName, Period_Count);
}

// Reset counters
Death_counter = 0;
Birth_counter = 0;
Immigrant_counter = 0;
Immigrant_counter_Mal = 0;
Immigrant_counter_Fem = 0;
Emigrant_counter = 0;
Emigrant_counter_Mal = 0;
Emigrant_counter_Fem = 0;
Counter_Female_Births = 0;
Counter_Male_Births = 0;

Reset_BR_DR_Pop_Per_Age();


// Update pop for next period, it is not current Pop cause population change due to immigration/emigration
Previous_Period_Pop = People.size();

/// count a new period
Period_Count ++;

People.forEach(Person::onPeriodStart);]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1519227897838</Id>
					<Name><![CDATA[Store_Init_Stats]]></Name>
					<X>500</X><Y>-160</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[/// Reset histograms
Hist_Age_Pop.reset();

// update Age histograms, emigrant histograms are updated in the state chart emigration, in person
for (Person p : People) { Hist_Age_Pop.add(p.Age); }

// Update population size, and generation counter
update_Population_Size();
Update_Generation_Counter();

// Record initial population
Previous_Period_Pop = People.size();
traceln("Initial Pop " + People.size());

Create_AnnualCSV_CustomExp(AnnualCSV_FileName);

//Update_Hist_CDF_Pop_Age();
//traceln("Males by Age " + Arrays.toString(Counter_Pop_By_Age_Mal));
//traceln("Females by Age " + Arrays.toString(Counter_Pop_By_Age_Fem));]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1630681736098</Id>
					<Name><![CDATA[init_delay]]></Name>
					<Description><![CDATA[Agent creation can't start at the first state for some reason - causes an initialization bug - so there's an extra state here just to add some delay.]]></Description>
					<X>500</X><Y>-300</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1697298624604</Id>
					<Name><![CDATA[Couple]]></Name>
					<X>310</X><Y>-210</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[if (skipExperimentFilter.test(this)) {
	return;
}


// All fertile-aged agents must have parents!
List<Person> mayHaveChildren = People.findAll(person -> (25 < person.Age));
Map<Affiliation, Map<Group, Map<Double, List<Person>>>> gfCache = new HashMap<>();
Map<Affiliation, Map<Group, Map<Double, List<Person>>>> gmCache = new HashMap<>();
for (Affiliation aff : Affiliation.values()) {
	if (aff == folk_religions) {
		continue;
	}
	gfCache.put(aff, new HashMap<>());
	gmCache.put(aff, new HashMap<>());
	for (Group group : Group.values()) {
		gfCache.get(aff).put(group, new HashMap<>());
		gmCache.get(aff).put(group, new HashMap<>());
	}
}
int numFailures = 0;
int numSuccesses = 0;
for (Person potentialParent : mayHaveChildren) {
	if (!gfCache.get(potentialParent.Affiliation).get(potentialParent.group).containsKey(potentialParent.Age)) {
		// Could make this a higher likelihood for certain ages
		gfCache
			.get(potentialParent.Affiliation)
			.get(potentialParent.group)
			.put(potentialParent.Age, People.findAll(p -> (p.Gender == Gender_List.FEMALE
												&& potentialParent.Age + 15 <= p.Age && p.Age <= potentialParent.Age + 31)));
		gmCache
			.get(potentialParent.Affiliation)
			.get(potentialParent.group)
			.put(potentialParent.Age, People.findAll(p -> (p.Gender == Gender_List.MALE
												&& potentialParent.Age + 15 <= p.Age && p.Age <= potentialParent.Age + 31)));
	}
	if (gfCache.get(potentialParent.Affiliation).get(potentialParent.group).get(potentialParent.Age).isEmpty()
		|| gmCache.get(potentialParent.Affiliation).get(potentialParent.group).get(potentialParent.Age).isEmpty()) {
		//traceln("Could not find parent for agent");
		numFailures++;
		continue;
	}
	numSuccesses++;
	potentialParent.motherId = this.randomFrom(
									gfCache.get(potentialParent.Affiliation)
										   .get(potentialParent.group)
										   .get(potentialParent.Age))
								    .getId();
	potentialParent.fatherId = this.randomFrom(
									gmCache.get(potentialParent.Affiliation)
										   .get(potentialParent.group)
										   .get(potentialParent.Age))
								    .getId();
}

traceln(String.format("Failed %d / %d", numFailures, numSuccesses + numFailures));
//List<Person> toBeUnmarriedFemales = new ArrayList<>();
List<Person> marriedFemales = People.findAll(p -> p.expectedNumChildren > 0 
													&& p.Gender == FEMALE
													&& (15 <= p.Age && p.Age <= (49 + 25)));

this.personReligiosityCache.clear();
People.forEach(p -> this.personReligiosityCache.add(p.toReligiosity()));
int numFails = 0;

for (Person agent : marriedFemales) {
		PersonReligiosity pr = agent.toReligiosity();
		PersonReligiosity pairingPr = this.personReligiosityCache.getInitCoupling(pr, this);
		if (pairingPr == null) {
			numFails++;
			traceln(String.format("FAIL marry for %s %f %s %s %f", pr.affiliation, pr.strictness, pr.group, pr.edu, pr.age));
			continue;
		}
		
		double avgImp = (pairingPr.getImportance() + pr.getImportance()) / 2.0;
		double moreStrict = max(pairingPr.getImportance(), pr.getImportance());
		double lessStrict = min(pairingPr.getImportance(), pr.getImportance());
		double strictness;
		if (this.uniform() < avgImp) {
			strictness = moreStrict;
		} else {
			strictness = lessStrict;
		}
		
		Person pairing = pairingPr.getPerson();
		pairing.strictness = strictness;
		agent.strictness = strictness;
		agent.coupleWith(pairing, /*enableSwitch=*/ false);
		
		//traceln("Added Married");
}

if (numFails > 0) {
	traceln("Warning: Failed " + numFails + " marriages.");
}

List<Person> children = People.findAll(p -> p.Age <= 25);
// Group -> Child Age -> Viable mothers for child
Map<Double, List<Person>> motherCache = new HashMap<>();
for (Person child : children) {
	// Children should have already been assigned a group
	// So, need to find mother with aff and same group as child
	// No longer true
	if (!motherCache.containsKey(child.Age)) {
		motherCache
			.put(child.Age, marriedFemales.stream()
								.filter(f -> 15 + child.Age <= f.Age && f.Age < 49 + child.Age)
								.collect(Collectors.toList()));
	}
	List<Person> potentialMothers = motherCache.get(child.Age);
	if (potentialMothers.isEmpty()) {
		throw new IllegalStateException("He's an orphan :(");
	}
	double cumulativeSum = potentialMothers.stream().mapToDouble(p -> p.expectedNumChildren).sum();
	double pick = uniform() * cumulativeSum;
	double curSum = 0;
	Person mother = null;
	Iterator<Person> motherIterator = potentialMothers.iterator();
	MOTHER_PICKING_LOOP:
	while (curSum < cumulativeSum) {
		Person candidate = motherIterator.next();
		if (pick <= curSum + candidate.expectedNumChildren) {
			mother = candidate;
			mother.My_Children++;
			if (mother.My_Children == mother.expectedNumChildren) {
				motherIterator.remove();
			}
			break MOTHER_PICKING_LOOP;
		} else {
			curSum += candidate.expectedNumChildren;
		}
	}
	if (mother == null) {
		throw new IllegalStateException("Did not pick a mother even though there should have been options.");
	}
	//traceln("Picked parents");
	
	Person father = mother.spouse.getConnections().get(0);
	child.motherId = mother.getId();
	child.fatherId = father.getId();
	// Up to age 12 affiliation is mothers
	child.Affiliation = mother.Affiliation;
	
	if (mother.group == USA_NonWhite || father.group == USA_NonWhite) {
		child.group = uniform() <= 0.9 ? USA_NonWhite : USA_White;
	}
	
	boolean eduSameAsGenderParent = uniform() <= 0.6;
	Person sameGenderParent = mother.Gender == child.Gender ? mother : father;
	Person differentGenderParent = mother.Gender == child.Gender ? father : mother;
	child.edu = eduSameAsGenderParent ? sameGenderParent.edu : differentGenderParent.edu;
	
	if (child.Age > 12) {
		child.inheritReligiosity();
	}
}
traceln("Finished parent assignment");
		]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="EntryPoint" ParentState="ROOT_NODE">
					<Id>1519143896545</Id>
					<Name><![CDATA[statechart_Main]]></Name>
					<X>550</X><Y>-350</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>50</Y></Point>
					</Points>
					<Properties Target="1630681736098">
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1519223970833</Id>
					<Name><![CDATA[transition5]]></Name>
					<X>550</X><Y>-130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>50</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1519227897838" Target="1519223963311" Trigger="message">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[52]]></Code>
							<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_WEEK]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[equalsTo]]></FilterType>
						<EqualsExpression><![CDATA["continue_to_period_updates"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1519227456590</Id>
					<Name><![CDATA[transition6]]></Name>
					<X>520</X><Y>-50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>30</Y></Point>
						<Point><X>60</X><Y>30</Y></Point>
						<Point><X>60</X><Y>0</Y></Point>
					</Points>
					<IconOffset>60.0</IconOffset>
					<Properties Source="1519223963311" Target="1519223963311" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[5]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_WEEK]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1630681768693</Id>
					<Name><![CDATA[transition]]></Name>
					<X>550</X><Y>-270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>30</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1630681736098" Target="1519143896537" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[!skipExperimentFilter.test(this)]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_YEAR]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1697298624607</Id>
					<Name><![CDATA[transition8]]></Name>
					<Description><![CDATA[the timeout is necessary so the initial agent population is created first and then the first populaiton of emigrants is selected from it.]]></Description>
					<X>500</X><Y>-230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>-90</X><Y>30</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1519143896537" Target="1697298624604" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[0.1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_WEEK]]></Unit>
						</Rate>
						<Guard><![CDATA[!skipExperimentFilter.test(this)]]></Guard>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[equalsTo]]></FilterType>
						<EqualsExpression><![CDATA["continue_to_store_initial_stats"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1697298624609</Id>
					<Name><![CDATA[transition1]]></Name>
					<X>400</X><Y>-180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>100</X><Y>40</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1697298624604" Target="1519227897838" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[0.01]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_YEAR]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
			</StatechartElements>
			<Events>
				<Event>
					<Id>1590737559808</Id>
					<Name><![CDATA[Trigger_Period_Updates]]></Name>
					<X>640</X><Y>-160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="occuresOnce">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_WEEK]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1525766400000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[5]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[statechart_Main.fireEvent("continue_to_period_updates");]]></Action>
				</Event>
				<Event>
					<Id>1611587051954</Id>
					<Name><![CDATA[Agent_Yearly_Update_Trigger]]></Name>
					<X>1010</X><Y>-470</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_YEAR]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1611648000000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0.3]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[FiveYearStep ? 5 : 1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[StringBuilder sb = new StringBuilder();
//try {
if(skipExperimentFilter.test(this)) {
	return;
}

final String period = Periods.get(Period_Count);
traceln("Starting updates " + period);

// Set tp true to log population at every step.
if (false) {
	People.stream()
		.collect(Collectors.groupingBy(Cohort::asFertilityCohort))
		.entrySet()
		.forEach(e -> {
			double age = e.getKey().age;
			Gender_List gender = e.getKey().gender;
			
			writeRealRate(gender, e.getKey().curAge, e.getKey().curAge, "population", e.getValue().size());
		});	
	traceln("Population: " + People.size());
}
sb.append("Updating cache, ");
People.forEach(Person::folkToOther);
People.forEach(this::writeAgent);
this.personReligiosityCache.clearWithSwitching();
People.forEach(p -> this.personReligiosityCache.add(p.toReligiosity(), time()));
sb.append("Updated,  ");
// For bottom up, each agent does their own yearly update individually with experimentation.
// For top down, population events are set exactly using sorting method.
if (!TopDown) {
	this.sendToAllConnected("Do_Yearly_Update");
	return;
}

final Random r = getDefaultRandomGenerator();
	
// Fertility
// Only half if split, otherwise all
double yearsExposure; 
if (FiveYearStep) {
	yearsExposure = splitFertility ? 2.5 : 5;
} else {
	yearsExposure = splitFertility ? 0.5 : 1.0;
}
sb.append("Doing fert, ");
do_fertility(period, r, yearsExposure, "");
	
// Mortality. All agent cohorts
sb.append("Doing mort, "); // apply mortality via Survival Ratio
// Includes new infants
People.stream()
	.filter(this::includeInMortality)
	.collect(Collectors.groupingBy(Cohort::asDeathCohort))
	.entrySet()
	.forEach(e -> {
		double age = e.getKey().age;
		Gender_List gender = e.getKey().gender;
		List<Person> agents = new ArrayList<>(e.getValue());
		
		cohortMortality(age, period, agents, gender, r, e.getKey().curAge, "");
	});
	
for(int i = 0; i < 5; i++) {
	
People.forEach(Person::folkToOther);
sb.append("Doing int, ");
	traceln("Doing interactions");
	People.forEach(Person::doInteractions);
sb.append("Doing switch, ");
	traceln("Doing switching");
	People.forEach(Person::doSwitching);
	
	// Aging
	People.forEach(p -> p.Age += 1);//(FiveYearStep ? 5 : 1));
	traceln("Doing inherit");
sb.append("Doing inherit, ");
	People.findAll(p -> p.Age == 12).forEach(Person::inheritReligiosity);
	
	
	this.personReligiosityCache.clear();
sb.append("Doing  cajce, ");
	People.forEach(p -> this.personReligiosityCache.add(p.toReligiosity()));
		
}

/*
// Switching
People.stream()
	.filter(this::includeInSwitching)
	.collect(Collectors.groupingBy(Cohort::asSwitchCohort))
	.entrySet()
	.forEach(e -> {
		Cohort cohort = e.getKey();
		// Implement grouped-switching
		Map<Affiliation, Double> switchRates = DBUtils.getSwitchRates(this, cohort);
		
		List<Person> agents = new ArrayList<>(e.getValue());
		
		Collections.shuffle(agents, r);
		
		int numAgents = agents.size();
		int currIndex = 0;
		
		for (Map.Entry<Affiliation, Double> switchInfo : switchRates.entrySet()) {
			Affiliation newAff = switchInfo.getKey();
			
			double switchRate = switchInfo.getValue();
			if (!FiveYearStep) {
				switchRate = 1 - Math.pow(1 - switchRate, 1.0d/5);
			}
			
			int numToSwitch = (int)Math.rint(numAgents * switchRate);
			agents.subList(currIndex, currIndex + numToSwitch).forEach(p -> {
				p.Affiliation = newAff;
				p.hasSwitched = true;
			});
			currIndex += numToSwitch;
			
			writeRealRate(cohort.gender, cohort.age, cohort.curAge, "switch_to_" + newAff.toString(), 
			cohort.aff, numToSwitch);
		}
	});
*/
// Emigration
final Map<Cohort, Integer> emigrantsByCohort = DBUtils.getNumEmigrants(this, period);
People.stream()
	.filter(this::includeInMigration)
	.collect(Collectors.groupingBy(Cohort::asMigrationCohort))
	.entrySet()
	.forEach(e -> {
		double age = e.getKey().age;
		Gender_List gender = e.getKey().gender;
		
		Cohort migrationCohort = (ForceUseSplitAge && !FiveYearStep && age < 0) 
								? e.getKey()
								: Cohort.getMigrationCohort(age, gender, e.getKey().aff);
		if (!emigrantsByCohort.containsKey(migrationCohort)) {
			return;
		}
		int numEmigrants = emigrantsByCohort.get(migrationCohort);
		List<Person> agents = new ArrayList<>(e.getValue());
		
		Collections.shuffle(agents, r);
		
		agents.subList(0, numEmigrants).forEach(Person::emigrate);
		
		writeRealRate(gender, age, e.getKey().curAge, "migration", e.getKey().aff, -numEmigrants);
	});

// Immigration
final Map<Cohort, Integer> immigrantsByCohort = isPhase2 ? DBUtils.getNumImmigrantsPhase2(this, period) : DBUtils.getNumImmigrants(this, period);
for (Cohort c : immigrantsByCohort.keySet()) {
	if (FiveYearStep || (ForceUseSplitAge && c.age == 0)) {
		if (isPhase2) {
			
			Optional<Map<String, Double>> dimAvgs = personReligiosityCache.getThirdsStrictnessDimensionsAverage(c.aff, PersonReligiosityCache.ALL_STRICTNESSES);
			Optional<Map<Affiliation, Double>> attAvgs = personReligiosityCache.getThirdsStrictnessAttitudeAverage(c.aff, PersonReligiosityCache.ALL_STRICTNESSES);
			double percEdu = personReligiosityCache.getPercEduByAff(c.aff);
			double percG2 = personReligiosityCache.getPercG2ByAff(c.aff);
			makeNAgents(1.0 * immigrantsByCohort.get(c), c.age, c.gender, NON_NATIVE, c.aff, dimAvgs, attAvgs, percEdu, percG2);
			writeRealRate(c.gender, c.age, c.curAge, "immigration", c.aff, immigrantsByCohort.get(c));
		} else {
			makeNAgents(immigrantsByCohort.get(c), c.age, c.gender, NON_NATIVE);
		}
		//writeRealRate(c.gender, c.age, c.age, "migration", immigrantsByCohort.get(c));
	} else {
		int numImmigrantsPerAge = (int) Math.rint(immigrantsByCohort.get(c) / 5.0);
		for (int i = 0; i <= 4; i++) {
			if (isPhase2) {
				Optional<Map<String, Double>> dimAvgs = personReligiosityCache.getThirdsStrictnessDimensionsAverage(c.aff, PersonReligiosityCache.ALL_STRICTNESSES);
				Optional<Map<Affiliation, Double>> attAvgs = personReligiosityCache.getThirdsStrictnessAttitudeAverage(c.aff, PersonReligiosityCache.ALL_STRICTNESSES);
				double percEdu = personReligiosityCache.getPercEduByAff(c.aff);
				double percG2 = personReligiosityCache.getPercG2ByAff(c.aff);
				makeNAgents(1.0 * immigrantsByCohort.get(c), c.age, c.gender, NON_NATIVE, c.aff, dimAvgs, attAvgs, percEdu, percG2);
			} else {
				makeNAgents(numImmigrantsPerAge, c.age + i, c.gender, NON_NATIVE);
			}
			//writeRealRate(c.gender, c.age + i, c.age + i, "migration", numImmigrantsPerAge);
		}
	}
}

People.forEach(Person::folkToOther);
this.assignParentsToImmigrants();

// Second round of fertility for split fertility.
if (splitFertility) {
	do_fertility(period, r, FiveYearStep ? 2.5 : 0.5, "2nd");
	People.findAll(p -> p.Age < 0).stream()
		.collect(Collectors.groupingBy(Cohort::asDeathCohort))
		.entrySet()
		.forEach(e -> {
			double age = e.getKey().age;
			Gender_List gender = e.getKey().gender;
			List<Person> agents = new ArrayList<>(e.getValue());
			
			cohortMortality(age, period, agents, gender, r, age, "2nd");
		});
		
	
	People.findAll(p -> p.Age < 0)
		.forEach(p -> p.Age = 0);
}
/*
} catch(NullPointerException e) {
traceln(e.getMessage());
traceln(sb.toString());
traceln(Update_AnnualCSV_CustomExp(Annual_Club_CSV_FileName, Period_Count));
traceln(e.getStackTrace());

} catch (ArrayIndexOutOfBoundsException e) {
traceln(e.getMessage());
traceln(sb.toString());

traceln(Update_AnnualCSV_CustomExp(Annual_Club_CSV_FileName, Period_Count));
traceln(e.getStackTrace());
} catch (RuntimeException e){
traceln(e.getMessage());
traceln(sb.toString());

traceln(Update_AnnualCSV_CustomExp(Annual_Club_CSV_FileName, Period_Count));
traceln(e.getStackTrace());
throw e;
}
*/]]></Action>
				</Event>
				<Event>
					<Id>1631573281614</Id>
					<Name><![CDATA[Agent_Yearly_Update_Trigger_Second]]></Name>
					<X>1010</X><Y>-440</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_YEAR]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1611648000000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0.31]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[FiveYearStep ? 5 : 1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[if(skipExperimentFilter.test(this)) {
	return;
}

// For bottom up executions, we need to handle migration and second round of fertility
// at a second step in order to avoid some AnyLogic timing issues.

if (TopDown) {
	return;
}

final String period = Periods.get(Period_Count);

// Emigration
if (isPhase2) {
	emigrationRateCache.clear();
	emigrationCountCache = DBUtils.getNumEmigrantsPhase2(this, period);
	People.findAll(p -> true).forEach(p -> p.do_emigration_round(period));
} else {
	emigrationRateCache.clear();
	People.findAll(p -> true).forEach(p -> p.do_emigration_round(period));
}

// Immigration
final Map<Cohort, Integer> immigrantsByCohort = isPhase2 ? DBUtils.getNumImmigrantsPhase2(this, period) : DBUtils.getNumImmigrants(this, period);
for (Cohort c : immigrantsByCohort.keySet()) {
	if (FiveYearStep || (ForceUseSplitAge && c.age == 0)) {
		if (isPhase2) {
			makeNAgents(immigrantsByCohort.get(c), c.age, c.gender, NON_NATIVE, c.aff);
		} else {
			makeNAgents(immigrantsByCohort.get(c), c.age, c.gender, NON_NATIVE);
		}
		//writeRealRate(c.gender, c.age, c.age, "migration", immigrantsByCohort.get(c));
	} else {
		int numImmigrantsPerAge = (int) Math.rint(immigrantsByCohort.get(c) / 5.0);
		for (int i = 0; i <= 4; i++) {
			if (isPhase2) {
				makeNAgents(numImmigrantsPerAge, c.age + i, c.gender, NON_NATIVE, c.aff);
			} else {
				makeNAgents(numImmigrantsPerAge, c.age + i, c.gender, NON_NATIVE);
			}
			//writeRealRate(c.gender, c.age + i, c.age + i, "migration", numImmigrantsPerAge);
		}
	}
}

if (!splitFertility) {
	return;
}

// Second fertility for split fertility
People.findAll(p -> true).forEach(p -> p.do_fertility_round(period));]]></Action>
				</Event>
			</Events>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1496338222835</Id>
					<Name><![CDATA[Generate_Agents]]></Name>
					<X>1020</X><Y>-380</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[if (!TopDownInitialAgents) {
	for (int i = 0; i < Number_of_Adults; i++) {
		// Age and sex are set bottom up by each agent pulling from distributions.
		add_People();
	}
	return;
}

double weightSum = DBUtils.getPhase2HybridInitTotalWeight(this);
double percUnder15 = DBUtils.getPercentageOfPopulationUnder15(this, 2010);
double numberOfAdults = (1 - percUnder15) * this.Number_of_Adults;
traceln("Supposed to have adults "+numberOfAdults);
double agentWeight = weightSum / numberOfAdults;
double curWeight = 0;
List<Tuple> rows = DBUtils.getPhase2HybridInitRows(this);
int ageOffset = 0;

int adultCount = 0;
for (Tuple t : rows) {
	double rowWeight = t.get(DBUtils.INDEX_WEIGHT, Double.class);
	int numAgents = (int) Math.round(rowWeight / agentWeight);
	//traceln(numAgents);
	String agecat5 = t.get(DBUtils.INDEX_AGECAT5, String.class);
	int age = Integer.parseInt(agecat5.split("-")[0]);
	String affil_hybrid = t.get(DBUtils.INDEX_AFFIL_HYBRID, String.class);
	int g2 = t.get(DBUtils.INDEX_G2, Integer.class);
	int sex = t.get(DBUtils.INDEX_SEX, Integer.class);
	int perc_edu = t.get(DBUtils.INDEX_PERCEDU, Integer.class);
	int married = t.get(DBUtils.INDEX_MARRIED, Integer.class);
	
	Map<String, Double> values = DBUtils.getPhase2HybridSecondaryInit(this, agecat5, affil_hybrid, g2, sex, perc_edu, married);
	for (int i = 0; i < numAgents; i++) {
		Person p = add_People();
		p.Age = age + (ageOffset % 5);
		p.Affiliation = DBUtils.affilHybridToPew(affil_hybrid);
		p.group = g2 == 1 ? Group.USA_NonWhite : Group.USA_White;
		p.Gender = sex == 1 ? FEMALE : MALE;
		p.edu = perc_edu == 1;
		p.Nativity = this.uniform() <= values.get("mean_p_fborn") ? NON_NATIVE : NATIVE;
		p.married = married == 1;
		p.publicPractice = values.get("mean_public");
		p.privatePractice = values.get("mean_private");
		p.importance = values.get("mean_importance");
		p.strictness = values.get("mean_strict");
		p.strictness /= 1.3;
		p.supernaturalWorldview = values.get("mean_supernatural");
		p.attitudes = new HashMap<>();
		//p.attitudes.put(jews, values.get("mean_jewatt"));
		p.attitudes.put(christians, values.get("mean_chrsatt"));
		p.attitudes.put(buddhists, values.get("mean_buddatt"));
		p.attitudes.put(hindus, values.get("mean_hindatt"));
		p.attitudes.put(muslims, values.get("mean_musatt"));
		p.attitudes.put(unaffiliated, values.get("mean_othatt"));
		p.attitudes.put(other_religions, values.get("mean_othatt"));
		
		if (this.uniform() <= values.get("mean_child")) {
			int wholeChildren = values.get("nchild").intValue();
			double partialChildren = values.get("nchild") - wholeChildren;
			p.expectedNumChildren = wholeChildren + (
										this.uniform() <= partialChildren
										? 1
										: 0
									);
		}
		
		if (!FiveYearStep) {
			ageOffset++;
		}
		adultCount++;
	}
}
traceln("Adults actual "+adultCount);

// For top down agent initialization, the age and sex of agents are
// chosen to perfectly match our distributions.
double initialNumAgents = Number_of_Adults * percUnder15;
traceln("Supposed to have children"+initialNumAgents);
weightSum = DBUtils.getInitWeightSum(this, 2010);
ResultSet values = DBUtils.getInitRows(this, 2010);

traceln(initialNumAgents);
traceln(weightSum);
double agentIncrement = weightSum / initialNumAgents;
double priorSum = 0.0;

if (!values.next()) {
	throw new IllegalStateException("Error retrieving initialization data");
}
boolean endReached = false;

curWeight = values.getDouble("population");
traceln(curWeight);
double curAgent = 0.0;
int offset = 0;
Gender_List gender = MALE;
Nativity_Level nativity = NATIVE; // We don't care too much about accurate nativity in Phase2
Affiliation aff = unaffiliated;
double age = -1;
int count = 0;

OUTER_LOOP:
while (curAgent < weightSum){
	if (curAgent >= priorSum + curWeight) {
		if (endReached) {
			throw new IllegalStateException("End reached earlier than expected I think");
		}
		if (!values.next()) {
			endReached = true;
		}
		priorSum += curWeight;
		curWeight = values.getDouble("population");
		
		//traceln(String.format("%d, Age %f, Gender %s, Aff %s", count, age, gender.toString(), aff.toString()));
		count = 0;
		continue OUTER_LOOP;
	}
	
	// Add agent
	String s = values.getString("age");
	Matcher matcher = Pattern.compile("\\d+").matcher(s);
	matcher.find();
	int i = Integer.valueOf(matcher.group());
	
	// Add offset so we don't have everyone at the same age in the 5yr interval
	age = 1.0 * i + (AgentInitializationPerAgeYear ? (offset++ % 5) : 0);
	gender = Gender_List.valueOf(values.getString("gender"));
	nativity = NATIVE;//values.getString("nativity");
	aff = Affiliation.valueOf(values.getString("affiliation"));
	if (aff == folk_religions || aff == jews) {
		traceln("Unwanted folks!");
		aff = other_religions;
	}
	
	makeNAgents(1, age, gender, nativity, aff);
	
	curAgent += agentIncrement;
	count++;
}

if (values.next()) {
	int i = 0;
	do {i++;} while(values.next());

	 traceln("Didn't get everyone. Missing " + i);
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1496854063650</Id>
					<Name><![CDATA[Count_Female]]></Name>
					<X>70</X><Y>1540</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List <Person> Females = findAll(People,p -> p.Gender == FEMALE);
return Females.size();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1496854204174</Id>
					<Name><![CDATA[Count_Male]]></Name>
					<X>70</X><Y>1564</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List <Person> Males = findAll(People,p -> p.Gender == MALE);
return Males.size();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1496979903764</Id>
					<Name><![CDATA[Count_Native]]></Name>
					<X>320</X><Y>1540</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List <Person> Native = findAll(People,p -> p.Nativity == NATIVE);
return Native.size();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1496979919845</Id>
					<Name><![CDATA[Count_Non_Native]]></Name>
					<X>320</X><Y>1560</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List <Person> Non_Native = findAll(People,p -> p.Nativity == NON_NATIVE);
return Non_Native.size();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1540893879719</Id>
					<Name><![CDATA[Create_AnnualCSV_CustomExp]]></Name>
					<X>1360</X><Y>-240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[FileName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[try
{
	//Check to see if the file already exists
	
		StringBuilder sb;
		
		sb = new StringBuilder();
		
		//Create a STRING header for each column in your output file
		sb.append("SimID"); sb.append(',');
		sb.append("Starting_Period"); sb.append(',');
		sb.append("country_id"); sb.append(',');
		sb.append("FiveYearStep"); sb.append(',');
		sb.append("TopDown"); sb.append(',');
		sb.append("TopDownInitialAgents"); sb.append(',');
		sb.append("AgentInitializationPerAgeYear"); sb.append(',');
		sb.append("ForceUseSplitAge"); sb.append(',');
		sb.append("NumberOfInitialAgents"); sb.append(',');
		sb.append("ImmigrantsImmuneFromDeath"); sb.append(',');
		sb.append("splitFertility"); sb.append(',');
		sb.append("interactionType"); sb.append(',');
		sb.append("inheritanceType"); sb.append(',');
		sb.append("coupleSwitching"); sb.append(',');
		sb.append("attitudeSelfDecrement"); sb.append(',');
		sb.append("religiousEducation"); sb.append(',');
		sb.append("secularEducation"); sb.append(',');
		sb.append("dimensionsIncrement").append(",");
		sb.append("attitdueIncrement").append(",");
		sb.append("highSNWCutoff").append(",");
		sb.append("stronglyReligiousCutoff").append(",");
		sb.append("modeStrictness").append(",");
		sb.append("maxStrictness").append(",");
		sb.append("c_swing").append(",");
		sb.append("totalConversionChance").append(",");
		sb.append("numInteractionsPerStep").append(",");
		sb.append("disaffThreshold").append(",");
		sb.append("switchThreshold").append(",");
		sb.append("secRXDimensionsIncrementDenominator").append(",");
		
		
		sb.append("Period"); sb.append(',');
		
		
		sb.append(PersonReligiosityCache.dimensionsCSVHeaders()).append(",");
		sb.append(PersonReligiosityCache.switchesCSVHeaders()).append(",");
				
		
		//Generate Simulation Output Fields
		
		sb.append("Current_Period_Pop"); sb.append(',');
		
		sb.append("Num_Births"); sb.append(',');
		sb.append("Num_Deaths"); sb.append(',');
		
		// TODO: put behind a flag
		//if (debugAff) {
			String[] AGE_RANGE = {
				"0-4"  , "5-9"  , "10-14", "15-19", "20-24",
				"25-29", "30-34", "35-39", "40-44", "45-49",
				"50-54", "55-59", "60-64", "65-69", "70-74",
				"75-79", "80-84", "85-89", "90-94", "95+"  ,	
			};
			for (Affiliation aff : Affiliation.values()) {
				for (String age: AGE_RANGE) {
					sb.append(aff.toString());
					sb.append("_count_fem_");
					sb.append(age);
					sb.append(",");
		
					sb.append(aff.toString());
					sb.append("_count_mal_");
					sb.append(age);
					sb.append(",");
				}
			}
		//}
			
		
		sb.append('\n');
		traceln(sb.toString());
		Main.getOutputWriter(FileName, sb.toString());
    
   
}	
catch (java.io.IOException e) 
{
	e.printStackTrace();
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[String]]></ReturnType>
					<Id>1540893879721</Id>
					<Name><![CDATA[Update_AnnualCSV_CustomExp]]></Name>
					<X>1360</X><Y>-220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[FileName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[CurrentYear]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[try {
	//System.out.println("Time : " + Period_Count + ", Filename: " + FileName);
	
	StringBuilder sb;
	sb = new StringBuilder();
	
	//Grab the actual parameter values now (do not create STRING headers). 
	//Use the EXACT same order as the CreateCSV() function
	sb.append(SimulationID); sb.append(',');
	sb.append(Starting_Period); sb.append(',');
	sb.append(country_id); sb.append(',');
	sb.append(FiveYearStep); sb.append(',');
	sb.append(TopDown); sb.append(',');
	sb.append(TopDownInitialAgents); sb.append(',');
	sb.append(AgentInitializationPerAgeYear); sb.append(',');
	sb.append(ForceUseSplitAge); sb.append(',');
	sb.append(Number_of_Adults); sb.append(',');
	sb.append(ImmigrantsImmuneFromDeath); sb.append(',');
	sb.append(splitFertility); sb.append(',');
	sb.append(
		input_InteractionsType == 0
			? "ALL"
			: input_InteractionsType == 1
				? "Young Only"
				: "None"
	); sb.append(',');
	sb.append(motherInheritance ? "Direct Mother" : "Parents&GParents"); sb.append(',');
	sb.append(coupleSwitching); sb.append(',');
	
	sb.append(attitudeSelfDecrement); sb.append(',');
	sb.append(religiousEducation); sb.append(',');
	sb.append(secularEducation); sb.append(',');
	sb.append(dimensionsIncrement).append(",");
	sb.append(attitudeIncrement).append(",");
	sb.append(highSNWCutoff).append(",");
	sb.append(stronglyReligiousCutoff).append(",");
	sb.append(modeStrictness).append(",");
	sb.append(maxStrictness).append(",");
	sb.append(c_swing).append(",");
		sb.append(totalConversionChance).append(",");
	
		sb.append(numInteractionsPerStep).append(",");
		sb.append(disaffThreshold).append(",");
		sb.append(switchThreshold).append(",");
		sb.append(secRXDimensionsIncrementDenominator).append(",");
		
	if(CurrentYear == -1) { sb.append("Initial"); sb.append(','); }
	else { sb.append(Periods.get(Period_Count)); sb.append(','); }
		sb.append(personReligiosityCache.dimensionsCSV()).append(",");
		sb.append(personReligiosityCache.switchesCSV()).append(",");
				
	
	sb.append(People.size()); sb.append(',');
	
	sb.append(Birth_counter); sb.append(',');
	sb.append(Death_counter); sb.append(',');

	
	if (debugAff) {
		for (Affiliation aff : Affiliation.values()) {
			double total = 0;
			for (int i = 0; i < 20; i++) {
				sb.append(Aff_Age_Count_Fem.get(aff)[i] / Percent_Pop);
				sb.append(",");
				sb.append(Aff_Age_Count_Mal.get(aff)[i] / Percent_Pop);
				sb.append(",");
				total += Aff_Age_Count_Fem.get(aff)[i];
				total += Aff_Age_Count_Mal.get(aff)[i];
			}
			if (aff == hindus) {
				christianPop[Period_Count] = total / (Percent_Pop);
			}
		}
	}
	
	//Shift to the next line for the next run
	sb.append('\n');
						

	Main.getOutputWriter().write(sb.toString());
    
   // return sb.toString();
}
catch (java.io.IOException e) {
	e.printStackTrace();
}

//return "";
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1540893879723</Id>
					<Name><![CDATA[Create_Annual_Individual_CSV_CustomExp]]></Name>
					<X>1360</X><Y>-170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[FileName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[try
{
	//Check to see if the file already exists
	File checkFile = new File(FileName);
	
	if ( checkFile.exists() == false )
	{
		OutputStream csvFile;
		PrintStream printcsv;
		StringBuilder sb;
		
		sb = new StringBuilder();
		
		//Create a STRING header for each column in your output file
		sb.append("SimID"); sb.append(',');
		sb.append("Year"); sb.append(',');
		
		for(int i=0; i < 24; i++) { sb.append("Num_Deaths_Age_Fem_");sb.append(i); sb.append(','); }
		for(int i=0; i < 24; i++) { sb.append("Num_Deaths_Age_Mal_");sb.append(i); sb.append(','); }
		
		
		sb.append('\n');
		
		csvFile= new FileOutputStream(new File(FileName));
		
	    printcsv = new PrintStream(csvFile);
	    printcsv.append(sb.toString());
	    printcsv.close();
	    csvFile.close();
    }
    else
    {
		//System.out.println("File with selected name already exists!");		
	}
}	
catch (java.io.IOException e) 
{
	e.printStackTrace();
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1540893879725</Id>
					<Name><![CDATA[Update_Annual_Individual_CSV_CustomExp]]></Name>
					<X>1360</X><Y>-150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[FileName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[CurrentYear]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[try {
	FileWriter pw = new FileWriter(FileName, true);
	//System.out.println("Time : " + Period_Count + ", Filename: " + FileName);
	
	StringBuilder sb;
	sb = new StringBuilder();

	sb.append(SimulationID); sb.append(',');
	sb.append(CurrentYear); sb.append(',');
				
		
	//Generate Simulation Output Fields
	for(int i=0; i < DR_Per_Age_Fem.length; i++) { sb.append(DR_Per_Age_Fem[i]); sb.append(',');}
	for(int i=0; i < DR_Per_Age_Mal.length; i++) { sb.append(DR_Per_Age_Mal[i]); sb.append(',');}
		
	//Shift to the next line for the next run
	sb.append('\n');
					

	pw.append(sb);
    pw.flush();
    pw.close();
}
catch (java.io.IOException e) {
	e.printStackTrace();
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1541740460392</Id>
					<Name><![CDATA[Create_Annual_Club_CSV_CustomExp]]></Name>
					<X>1360</X><Y>-110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[FileName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[/*try
{
	//Check to see if the file already exists
	File checkFile = new File(FileName);
	
	if ( checkFile.exists() == false )
	{
		OutputStream csvFile;
		PrintStream printcsv;
		StringBuilder sb;
		
		sb = new StringBuilder();
		
		//Create a STRING header for each column in your output file
		sb.append("SimID"); sb.append(',');
		sb.append("Year"); sb.append(',');
		sb.append("ID"); sb.append(',');
		sb.append("WV_Flag"); sb.append(',');
		sb.append("Rel_Flag"); sb.append(',');
		sb.append("PI_Flag"); sb.append(',');
		sb.append("Cost_Flag"); sb.append(',');
		sb.append("Cost"); sb.append(',');
		sb.append("Neighborhood"); sb.append(',');
		sb.append("Num_Members"); sb.append(',');
		sb.append("Leader"); sb.append(',');
		sb.append("Average_WV_Club"); sb.append(',');
		sb.append("Average_PI_Club"); sb.append(',');
		
		sb.append('\n');
		
		csvFile= new FileOutputStream(new File(FileName));
		
	    printcsv = new PrintStream(csvFile);
	    printcsv.append(sb.toString());
	    printcsv.close();
	    csvFile.close();
    }
    else
    {
		//System.out.println("File with selected name already exists!");		
	}
}	
catch (java.io.IOException e) 
{
	e.printStackTrace();
}*/]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1541740460395</Id>
					<Name><![CDATA[Update_Annual_Club_CSV_CustomExp]]></Name>
					<X>1360</X><Y>-90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[FileName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[CurrentYear]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[/*
try {
	FileWriter pw = new FileWriter(FileName, true);
	//System.out.println("Time : " + Period_Count + ", Filename: " + FileName);
	
	StringBuilder sb;
	sb = new StringBuilder();

	//List <Person> Individuals = findAll(People,p -> p.Age >= 12);
	for (WVGroup g: WVGroups)//Individuals)
	{
		//Grab the actual parameter values now (do not create STRING headers). 
		//Use the EXACT same order as the CreateCSV() function
		//Create a STRING header for each column in your output file
		sb.append(SimulationID); sb.append(',');
		sb.append(Period_Count); sb.append(',');
		sb.append(g.getId()); sb.append(',');
		sb.append(g.WV_Flag); sb.append(',');
		if(g.WV_Flag == RELIGIOUS) { sb.append(g.Rel_flag); sb.append(','); } else { sb.append("NA"); sb.append(','); }
		sb.append(g.PI_flag); sb.append(',');
		sb.append(g.Cost_Flag); sb.append(',');
		sb.append(g.Cost); sb.append(',');
		sb.append(g.Group_Neighborhood); sb.append(',');
		sb.append(g.Current_Affiliated); sb.append(',');
		if(g.Leader != null) { sb.append(g.Leader.getId()); sb.append(','); } else { sb.append("NA"); sb.append(','); }
		sb.append(g.Average_WV()); sb.append(',');
		sb.append(g.Average_PI()); sb.append(',');
		//Shift to the next line for the next run
		sb.append('\n');
	} // end over all people
						

	pw.append(sb);
    pw.flush();
    pw.close();
}
catch (java.io.IOException e) {
	e.printStackTrace();
}
*/]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1590738491359</Id>
					<Name><![CDATA[Count_Semi_Native]]></Name>
					<X>320</X><Y>1580</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List <Person> Semi_Native = findAll(People,p -> p.Nativity == SEMI_NATIVE);
return Semi_Native.size();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1590739244421</Id>
					<Name><![CDATA[Calculate_Fertility_rate]]></Name>
					<X>140</X><Y>1970</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[/// Start only at period 7, when females that were 15 years old at period 0 are now over 49 years old, Period_Count starts from 0
return 0;
/*
if (Period_Count >= 6)
{
	/// Filter out female immigrants that came with an age > 15 years old, this immigrants may have already had a kid but it was not counted	
	/// this is done so we only get the females that live their whole birth life-span in the society
	final int Max_Age_Gen0 = 15 * (Period_Count * 5);
	List <Person> Gen_0 = findAll(People,p -> p.Gender == FEMALE && p.Nativity != NON_NATIVE && p.Generation == 1 && p.Age >= 49 && p.Age <= Max_Age_Gen0);
	List <Person> Fem_FR = findAll(People, p -> p.Gender == FEMALE && p.Nativity != NON_NATIVE && p.Generation > 1 && p.Age >= 49);
	Fem_FR.addAll(Gen_0);
	
	double FR = average( Fem_FR, p -> p.My_Children );
	//Fertili
	return FR;
}
else { return 0;}*/]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1590742906401</Id>
					<Name><![CDATA[Update_Generation_Counter]]></Name>
					<X>310</X><Y>-80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[int count = 0;
Generation_Counter[0] = findAll(People,p-> p.Generation == 1).size();
Generation_Counter[1] = findAll(People,p-> p.Generation == 2).size();
Generation_Counter[2] = findAll(People,p-> p.Generation == 3).size();
Generation_Counter[3] = findAll(People,p-> p.Generation == 4).size();
Generation_Counter[4] = findAll(People,p-> p.Generation == 5).size();
Generation_Counter[5] = findAll(People,p-> p.Generation == 6).size();
Generation_Counter[6] = findAll(People,p-> p.Generation == 7).size();
Generation_Counter[7] = findAll(People,p-> p.Generation == 8).size();
Generation_Counter[8] = findAll(People,p-> p.Generation == 9).size();
Generation_Counter[9] = findAll(People,p-> p.Generation == 10).size();

Generation_Counter[10] = findAll(People,p-> p.Generation == 11).size();
Generation_Counter[11] = findAll(People,p-> p.Generation == 12).size();
Generation_Counter[12] = findAll(People,p-> p.Generation == 13).size();
Generation_Counter[13] = findAll(People,p-> p.Generation == 14).size();
Generation_Counter[14] = findAll(People,p-> p.Generation == 15).size();
Generation_Counter[15] = findAll(People,p-> p.Generation == 16).size();
Generation_Counter[16] = findAll(People,p-> p.Generation == 17).size();
Generation_Counter[17] = findAll(People,p-> p.Generation == 18).size();
Generation_Counter[18] = findAll(People,p-> p.Generation == 19).size();
Generation_Counter[19] = findAll(People,p-> p.Generation == 20).size();

Generation_Counter[20] = findAll(People,p-> p.Generation == 21).size();
Generation_Counter[21] = findAll(People,p-> p.Generation == 22).size();
Generation_Counter[22] = findAll(People,p-> p.Generation == 23).size();
Generation_Counter[23] = findAll(People,p-> p.Generation == 24).size();
Generation_Counter[24] = findAll(People,p-> p.Generation == 25).size();
Generation_Counter[25] = findAll(People,p-> p.Generation == 26).size();
Generation_Counter[26] = findAll(People,p-> p.Generation == 27).size();
Generation_Counter[27] = findAll(People,p-> p.Generation == 28).size();
Generation_Counter[28] = findAll(People,p-> p.Generation == 29).size();
Generation_Counter[29] = findAll(People,p-> p.Generation == 30).size();

Generation_Counter[30] = findAll(People,p-> p.Generation == 31).size();
Generation_Counter[31] = findAll(People,p-> p.Generation == 32).size();
Generation_Counter[32] = findAll(People,p-> p.Generation == 33).size();
Generation_Counter[33] = findAll(People,p-> p.Generation == 34).size();
Generation_Counter[34] = findAll(People,p-> p.Generation == 35).size();
Generation_Counter[35] = findAll(People,p-> p.Generation == 36).size();
Generation_Counter[36] = findAll(People,p-> p.Generation == 37).size();
Generation_Counter[37] = findAll(People,p-> p.Generation == 38).size();
Generation_Counter[38] = findAll(People,p-> p.Generation == 39).size();
Generation_Counter[39] = findAll(People,p-> p.Generation == 40).size();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1599483590485</Id>
					<Name><![CDATA[Update_Hist_CDF_Pop_Age]]></Name>
					<X>990</X><Y>-90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[// Pop both sexes
for (Person p : People) { Hist_Age_Pop.add(p.Age); }
// Pop females
List <Person> Fem = findAll(People, p -> p.Gender == FEMALE); 
for (Person p : Fem) {  Hist_Age_Fem.add(p.Age); }
// Pop males
List <Person> Mal = findAll(People, p -> p.Gender == MALE); 
for (Person p : Mal)  { Hist_Age_Mal.add(p.Age); }


for (int i=0; i < CDF_Age_Pop.length; i++)
{
	double temp_age = 10 * (i+1);
	List <Person> temp_pop = findAll(People, p -> p.Age < temp_age); 
	List <Person> temp_pop_fem = findAll(Fem, p -> p.Age < temp_age); 
	List <Person> temp_pop_mal = findAll(Mal, p -> p.Age < temp_age); 
	
	CDF_Age_Pop[i]= (double) temp_pop.size() / People.size();
	CDF_Age_Fem[i]= (double) temp_pop_fem.size() / Fem.size();
	CDF_Age_Mal[i]= (double) temp_pop_mal.size() / Mal.size();
}

for (int i=0; i < Counter_Pop_By_Age_Mal.length; i++)
{
	if( i != 20) // individuals < 100 years old
	{
		double min_Age = 5 * i;
		double max_Age = 5 * (i + 1);
		List <Person> temp_pop_fem = findAll(Fem, p -> p.Age >= min_Age && p.Age < max_Age); 
		List <Person> temp_pop_mal = findAll(Mal, p -> p.Age >= min_Age && p.Age < max_Age);
	
		Counter_Pop_By_Age_Mal[i]= temp_pop_mal.size();
		Counter_Pop_By_Age_Fem[i]= temp_pop_fem.size();
	}
	else if ( i == 20) // indiviudals 100+ years old
	{
		double min_Age = 5 * i;
		List <Person> temp_pop_fem = findAll(Fem, p -> p.Age >= min_Age); 
		List <Person> temp_pop_mal = findAll(Mal, p -> p.Age >= min_Age);
	
		Counter_Pop_By_Age_Mal[i]= temp_pop_mal.size();
		Counter_Pop_By_Age_Fem[i]= temp_pop_fem.size();
	}
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1599487605744</Id>
					<Name><![CDATA[Update_BR_DR_per_Age]]></Name>
					<X>990</X><Y>-70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[for (int i=0; i < BR_Per_Age.length; i++)
{
	double num = BR_Per_Age[i];
	double den = Counter_BR_Per_Age[i];
	BR_Per_Age[i] = num / den;
}

for (int i=0; i < DR_Per_Age_Fem.length; i++)
{
	double num_fem = DR_Per_Age_Fem[i];
	double den_fem = Counter_DR_Per_Age_Fem[i];
	double num_mal = DR_Per_Age_Mal[i];
	double den_mal = Counter_DR_Per_Age_Mal[i];
	DR_Per_Age_Fem[i] = num_fem / den_fem;
	DR_Per_Age_Mal[i] = num_mal / den_mal;
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1599488402230</Id>
					<Name><![CDATA[Reset_BR_DR_Pop_Per_Age]]></Name>
					<X>990</X><Y>-50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[for (int i=0; i < BR_Per_Age.length; i++)
{
	BR_Per_Age[i] = 0;
	Counter_BR_Per_Age[i] = 0;
}

for (int i=0; i < DR_Per_Age_Fem.length; i++)
{
	DR_Per_Age_Fem[i] = 0;
	DR_Per_Age_Mal[i] = 0;
	Counter_DR_Per_Age_Fem[i] = 0;
	Counter_DR_Per_Age_Mal[i] = 0;
}

for (int i=0; i < Counter_Pop_By_Age_Mal.length; i++)
{
	Counter_Pop_By_Age_Mal[i]= 0;
	Counter_Pop_By_Age_Fem[i]= 0;
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1619808714022</Id>
					<Name><![CDATA[writeRealRate]]></Name>
					<X>1360</X><Y>-30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[gender]]></Name>
						<Type><![CDATA[Gender_List]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[using_age]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[cur_age]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[rate_type]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[val]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[//experiment_id,year,gender,age,type,val

// This function can be used for lower level logging for 
// debugging purposes. Set LOG to true (and maybe adjust some of the
// other condition) in order to enable logging.

final boolean LOG = false;

if (!LOG || !(LHS_Experiment_Number == 1 
		&& splitFertility && 
		ForceUseSplitAge && 
		ImmigrantsImmuneFromDeath
)) {
	return;
}

if (true) {
	StringBuilder sb = new StringBuilder();
	
	sb.append(country_id); sb.append(',');
	sb.append(this.time()); sb.append(',');
	sb.append(gender.toString()); sb.append(',');
	sb.append(using_age); sb.append(',');
	sb.append(cur_age); sb.append(',');
	sb.append(rate_type); sb.append(',');
	sb.append(val);
	
	/*
	sb.append('\''); sb.append(cohort); sb.append(',');
	sb.append(size); sb.append(',');
	sb.append(size_with_mig < 0 ? "NA" : String.valueOf(size_with_mig)); sb.append(',');
	sb.append(num_deaths); sb.append(',');
	sb.append(((Number) num_deaths).doubleValue() / size); sb.append(',');
	sb.append(size_with_mig < 0 
				? "NA" 
				: String.valueOf(((Number) num_deaths).doubleValue() / size_with_mig));
	sb.append(',');
	if (rate_type.equals("mort")) {
		sb.append("NA");
	}	
	if (rate_type.equals("fert")) {
		int startAge = Integer.parseInt(cohort.substring(0,2));
		sb.append(Get_Yearly_Birth_Chance(period, startAge));
	}		
	*/
	sb.append('\n');
	try {
		Experiment e = this.getExperiment();
		Class clazz = e.getClass();
		
		Field writerField = clazz.getDeclaredField("realRatesWriter");
		BufferedWriter writer = (BufferedWriter) writerField.get(e);
		
		writer.write(sb.toString());
	} catch (NoSuchFieldException e) {
	
		throw new RuntimeException("No such file exception");
	} catch (IllegalAccessException e) {
		
		throw new RuntimeException("Illegal Access");
	} catch (IOException e) {
		throw new RuntimeException("IO:" + e.getMessage());
	}
	
}
	]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[boolean]]></ReturnType>
					<Id>1621883216746</Id>
					<Name><![CDATA[simulationIsOver]]></Name>
					<Description><![CDATA[Since we have some simulations with different starting periods, we need a signal to "terminate" the simulation early.]]></Description>
					<X>850</X><Y>-180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[return Period_Count >= 30;]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631549804654</Id>
					<Name><![CDATA[makeNAgents]]></Name>
					<X>1020</X><Y>-360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[n]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[age]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[gender]]></Name>
						<Type><![CDATA[Gender_List]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[nativity]]></Name>
						<Type><![CDATA[Nativity_Level]]></Type>
					</Parameter>
					<Body><![CDATA[
boolean written = false;

for (int i = 0; i < n; i++) {
	Person p = add_People();
	p.Age = age;
	p.Gender = gender;
	p.Nativity = nativity;
	if (nativity == NATIVE) {
		p.onPeriodStart();
	} else {
		p.setAgesImmigrant();
		if (!written) {
			writeRealRate(gender, p.Age_At_Period_Start, p.Age, "migration", n);
			written = true;
		}
	}
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631562419253</Id>
					<Name><![CDATA[do_fertility]]></Name>
					<X>1355</X><Y>-475</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[period]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[r]]></Name>
						<Type><![CDATA[Random]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[yearsExposure]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[suffix]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[People.stream()
	.filter(p -> Cohort.asFertilityCohort(p).isChildBearing())
	.collect(Collectors.groupingBy(Cohort::asFertilityCohort))
	.entrySet().stream()
	.forEach(e -> {
		double age = e.getKey().age;
		List<Person> agents = new ArrayList<>(e.getValue());
		
		double fertRate = (
			this.isPhase2
				? DBUtils.getYearlyFertilityRate(this, period, (int) age, e.getKey().aff)
				: DBUtils.getYearlyFertilityRate(this, period, (int) age)
		);
		int numBirthsInCohort = (int) Math.rint(fertRate * yearsExposure * agents.size());
		double malePercInfants = DBUtils.getInfantSexRatio(this, period);
		int numMaleInfants = (int) Math.rint(malePercInfants * numBirthsInCohort);
		
		writeRealRate(FEMALE, age, e.getKey().curAge, "numBirthsMales" + suffix, numMaleInfants);
		writeRealRate(FEMALE, age, e.getKey().curAge, "numBirthsFemales" + suffix, numBirthsInCohort - numMaleInfants);
		
		for (int i = 0; i < numBirthsInCohort; i++) {
			Person randomMother = agents.get(r.nextInt(agents.size()));
			randomMother.do_birth((int) randomMother.Age, /*isMale=*/ i < numMaleInfants ? MALE : FEMALE);
		}
	});]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631562730074</Id>
					<Name><![CDATA[cohortMortality]]></Name>
					<X>1355</X><Y>-455</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[age]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[period]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[agents]]></Name>
						<Type><![CDATA[List<Person>]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[gender]]></Name>
						<Type><![CDATA[Gender_List]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[r]]></Name>
						<Type><![CDATA[Random]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[curAge]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[suffix]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[double deathRate;
if (age < 0 && !this.FiveYearStep && this.ForceUseSplitAge) {
       deathRate = DBUtils.getInfantDeathRate(this, period, curAge, gender);
} else {
       deathRate = DBUtils.getDeathRateFromSurvivalRatio(this, period, age, gender);
}
int numDeaths = (int) Math.rint(deathRate * agents.size());
Collections.shuffle(agents, r);
agents.subList(0, numDeaths).forEach(p -> p.die((int) p.Age));

writeRealRate(gender, age, curAge, "mortality" + suffix, numDeaths);]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[boolean]]></ReturnType>
					<Id>1637952431208</Id>
					<Name><![CDATA[includeInMortality]]></Name>
					<X>1355</X><Y>-435</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[p]]></Name>
						<Type><![CDATA[Person]]></Type>
					</Parameter>
					<Body><![CDATA[if (!FiveYearStep) {
	// In one year step, immigrants may be immune from death if
	// ImmigraantsImmuneFromDeath == true
	return (!ImmigrantsImmuneFromDeath || !p.immigrated_this_period);
}

return true;]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[boolean]]></ReturnType>
					<Id>1637952890062</Id>
					<Name><![CDATA[includeInMigration]]></Name>
					<X>1355</X><Y>-415</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[p]]></Name>
						<Type><![CDATA[Person]]></Type>
					</Parameter>
					<Body><![CDATA[if (!FiveYearStep) {
	// In one year step, someone could age to be >= 85, and they should
	// not emigrate
	if (p.Age >= 85) {
		return false;
	}
}

// Immigrants from this period will not be selected to emigrate.
if (p.immigrated_this_period) {
       return false;
}


return true;]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1684716080261</Id>
					<Name><![CDATA[Update_Aff_Count]]></Name>
					<X>1120</X><Y>-170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[HashMap<Affiliation, Double> affCount = new HashMap<Affiliation, Double>();
for (Person p : People) {
	Affiliation aff = p.Affiliation;
	Double count = affCount.getOrDefault(aff, 0.0) + 1.0;
	affCount.put(aff, count);
}
for (Affiliation aff : Affiliation.values()) {
	double perc = affCount.getOrDefault(aff, 0.0) / People.size();
	Aff_Percentage.put(aff, perc);
}


// Pop females, going into Aff_Age_Count_Fem
List <Person> Fem = findAll(People, p -> p.Gender == FEMALE);
// Pop males, going into Aff_Age_Count_Mal
List <Person> Mal = findAll(People, p -> p.Gender == MALE); 

// Clear the Aff_Age_Count HashMaps
for (Affiliation aff : Affiliation.values()) {
	int[] femaleCount = new int[20];
	Aff_Age_Count_Fem.put(aff, femaleCount);
	int[] maleCount = new int[20];
	Aff_Age_Count_Mal.put(aff, maleCount);
}

for (int i = 0; i < Fem.size(); i++) {
	Person p = Fem.get(i);
	int ageIndex = (int)Math.round(p.Age / 5);
	if (ageIndex > 19) {
		ageIndex = 19;
	}
	if (ageIndex < 0) {
		ageIndex = 0;
	}
	Aff_Age_Count_Fem.get(p.Affiliation)[ageIndex] += 1;
}

for (int i = 0; i < Mal.size(); i++) {
	Person p = Mal.get(i);
	int ageIndex = (int)Math.round(p.Age / 5);
	if (ageIndex > 19) {
		ageIndex = 19;
	}
	if (ageIndex < 0) {
		ageIndex = 0;
	}
	Aff_Age_Count_Mal.get(p.Affiliation)[ageIndex] += 1;
}

]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697123107199</Id>
					<Name><![CDATA[assignParentsToImmigrants]]></Name>
					<X>1232</X><Y>-356</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[List<Person> immigratedThisPeriod = People.findAll(p -> 
	p.immigrated_this_period
	|| (p.Nativity == NON_NATIVE && (p.motherId == 0 || p.fatherId == 0))
	);

if (immigratedThisPeriod.isEmpty()) {
	traceln("No immigrants found for some reason");
}

for (Person p : immigratedThisPeriod) {
	Optional<Integer[]> parents = this.personReligiosityCache.getImmigrantParentIds(p, this);
	if (parents.isPresent()) {
		p.motherId = parents.get()[0];
		p.fatherId = parents.get()[1];
		//traceln("Parents found for immigrant");
	} else {
		traceln("No parents found for immigrant agent: " + p.toReligiosity().toHRString());
	}
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697123107202</Id>
					<Name><![CDATA[makeNAgents]]></Name>
					<X>1272</X><Y>-376</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[n]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[age]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[gender]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[nativity]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[wht]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[edu]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[married]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[multigen]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[if (n != 1.0) {
	throw new UnsupportedOperationException();
}

Person p = add_People();
p.Age = age;
p.Gender = gender.equals("MALE") ? MALE : gender.equals("FEMALE") ? FEMALE : null;
p.Nativity = nativity.equals("US Born") ? NATIVE : NON_NATIVE;
p.group = wht.equals("White") ? USA_White : USA_NonWhite;
p.edu = edu.equals("Post-secondary");
if (p.Gender == FEMALE && married.equals("Married")) {
	p.married = true;
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697125410922</Id>
					<Name><![CDATA[phase3Param]]></Name>
					<X>1590</X><Y>-430</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[
return (
			secularEducation()
	        + (1 - religiousEducation())
	        + existentialSecurity()
	        + lifestyleOpportunity()
	        + pluralism()
	   ) / 5.0;
    ]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697125410924</Id>
					<Name><![CDATA[getConvertStrictness]]></Name>
					<X>1590</X><Y>-470</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[aff]]></Name>
						<Type><![CDATA[Affiliation]]></Type>
					</Parameter>
					<Body><![CDATA[if (aff == unaffiliated) {
	return triangular(
		minStrictness / 2, 
		modeStrictness / 2, 
		maxStrictness / 2);
}

return triangular(
		minStrictness, 
		modeStrictness, 
		maxStrictness);]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[boolean]]></ReturnType>
					<Id>1697312692636</Id>
					<Name><![CDATA[includeInSwitching]]></Name>
					<X>1350</X><Y>-400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[p]]></Name>
						<Type><![CDATA[Person]]></Type>
					</Parameter>
					<Body><![CDATA[boolean hasSwitched = p.hasSwitched;

if (hasSwitched) {
	return false;
}

return DBUtils.canSwitch(p);]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697312797006</Id>
					<Name><![CDATA[makeNAgents]]></Name>
					<X>1130</X><Y>-320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[n]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[age]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[gender]]></Name>
						<Type><![CDATA[Gender_List]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[nativity]]></Name>
						<Type><![CDATA[Nativity_Level]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[aff]]></Name>
						<Type><![CDATA[Affiliation]]></Type>
					</Parameter>
					<Body><![CDATA[
boolean written = false;

for (int i = 0; i < n; i++) {
	Person p = add_People();
	p.Age = age;
	p.Gender = gender;
	p.Nativity = nativity;
	p.Affiliation = aff;
	p.setAttitudesToDefaultFor(aff);
	if (nativity == NATIVE) {
		p.onPeriodStart();
	} else {
		p.setAgesImmigrant();
		
		if (!written) {
			//writeRealRate(gender, p.Age_At_Period_Start, p.Age, "migration", n);
			written = true;
		}
	}
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697314410920</Id>
					<Name><![CDATA[writeRealRate]]></Name>
					<X>1360</X><Y>-10</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[gender]]></Name>
						<Type><![CDATA[Gender_List]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[using_age]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[cur_age]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[rate_type]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[aff]]></Name>
						<Type><![CDATA[Affiliation]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[val]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[//experiment_id,year,gender,age,type,val

// This function can be used for lower level logging for 
// debugging purposes. Set LOG to true (and maybe adjust some of the
// other condition) in order to enable logging.

final boolean LOG = true;

if (!LOG || !(LHS_Experiment_Number == 1 
		&& splitFertility && 
		ForceUseSplitAge && 
		ImmigrantsImmuneFromDeath &&
		Number_of_Adults == 400000
)) {
	return;
}

if (true) {
	StringBuilder sb = new StringBuilder();
	
	sb.append(country_id); sb.append(',');
	sb.append(this.time()); sb.append(',');
	sb.append(gender.toString()); sb.append(',');
	sb.append(using_age); sb.append(',');
	sb.append(cur_age); sb.append(',');
	sb.append(rate_type); sb.append(',');
	sb.append(aff != null ? aff.toString() : ""); sb.append(',');
	sb.append(val);
	
	/*
	sb.append('\''); sb.append(cohort); sb.append(',');
	sb.append(size); sb.append(',');
	sb.append(size_with_mig < 0 ? "NA" : String.valueOf(size_with_mig)); sb.append(',');
	sb.append(num_deaths); sb.append(',');
	sb.append(((Number) num_deaths).doubleValue() / size); sb.append(',');
	sb.append(size_with_mig < 0 
				? "NA" 
				: String.valueOf(((Number) num_deaths).doubleValue() / size_with_mig));
	sb.append(',');
	if (rate_type.equals("mort")) {
		sb.append("NA");
	}	
	if (rate_type.equals("fert")) {
		int startAge = Integer.parseInt(cohort.substring(0,2));
		sb.append(Get_Yearly_Birth_Chance(period, startAge));
	}		
	*/
	sb.append('\n');
	try {
		Experiment e = this.getExperiment();
		Class clazz = e.getClass();
		
		Field writerField = clazz.getDeclaredField("realRatesWriter");
		BufferedWriter writer = (BufferedWriter) writerField.get(e);
		
		writer.write(sb.toString());
	} catch (NoSuchFieldException e) {
	
		throw new RuntimeException("No such file exception");
	} catch (IllegalAccessException e) {
		
		throw new RuntimeException("Illegal Access");
	} catch (IOException e) {
		throw new RuntimeException("IO:" + e.getMessage());
	}
	
}
	]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697409578731</Id>
					<Name><![CDATA[writeAgent]]></Name>
					<X>1550</X><Y>10</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[agent]]></Name>
						<Type><![CDATA[Person]]></Type>
					</Parameter>
					<Body><![CDATA[//experiment_id,year,gender,age,type,val

// This function can be used for lower level logging for 
// debugging purposes. Set LOG to true (and maybe adjust some of the
// other condition) in order to enable logging.

final boolean LOG = true;
/*
if (!LOG || !(LHS_Experiment_Number == 1 
		&& splitFertility && 
		ForceUseSplitAge && 
		ImmigrantsImmuneFromDeath &&
		Number_of_Adults == 400000
)) {
	return;
}*/

final String period = Periods.get(Period_Count);
if (LHS_Experiment_Number == 2 ) {
	String row = agent.toReligiosity().toCSV(SimulationID, period);
	try {
		Experiment e = this.getExperiment();
		Class clazz = e.getClass();
		
		Field writerField = clazz.getDeclaredField("agentWriter");
		BufferedWriter writer = (BufferedWriter) writerField.get(e);
		
		writer.write(row);
	} catch (NoSuchFieldException e) {
	
		throw new RuntimeException("No such file exception");
	} catch (IllegalAccessException e) {
		
		throw new RuntimeException("Illegal Access");
	} catch (IOException e) {
		throw new RuntimeException("IO:" + e.getMessage());
	}
	
}
	]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697410371448</Id>
					<Name><![CDATA[writeSwitch]]></Name>
					<X>1550</X><Y>-10</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[switchType]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[before]]></Name>
						<Type><![CDATA[PersonReligiosity]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[after]]></Name>
						<Type><![CDATA[PersonReligiosity]]></Type>
					</Parameter>
					<Body><![CDATA[//experiment_id,year,gender,age,type,val

// This function can be used for lower level logging for 
// debugging purposes. Set LOG to true (and maybe adjust some of the
// other condition) in order to enable logging.

final boolean LOG = true;
/*
if (!LOG || !(LHS_Experiment_Number == 1 
		&& splitFertility && 
		ForceUseSplitAge && 
		ImmigrantsImmuneFromDeath &&
		Number_of_Adults == 400000
)) {
	return;
}*/

final String period = Periods.get(Period_Count);
if (false) {
	StringBuilder sb = new StringBuilder();
	sb.append(switchType).append(',');
	sb.append(before.toCSV(SimulationID, period, false)).append(',');
	sb.append(after.toCSV(SimulationID, period));
	try {
		Experiment e = this.getExperiment();
		Class clazz = e.getClass();
		
		Field writerField = clazz.getDeclaredField("switchWriter");
		BufferedWriter writer = (BufferedWriter) writerField.get(e);
		
		writer.write(sb.toString());
	} catch (NoSuchFieldException e) {
	
		throw new RuntimeException("No such file exception");
	} catch (IllegalAccessException e) {
		
		throw new RuntimeException("Illegal Access");
	} catch (IOException e) {
		throw new RuntimeException("IO:" + e.getMessage());
	}
	
}
	]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697478828014</Id>
					<Name><![CDATA[makeNAgents]]></Name>
					<X>1270</X><Y>-320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[n]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[age]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[gender]]></Name>
						<Type><![CDATA[Gender_List]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[nativity]]></Name>
						<Type><![CDATA[Nativity_Level]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[aff]]></Name>
						<Type><![CDATA[Affiliation]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[dimAvgs]]></Name>
						<Type><![CDATA[Optional<Map<String, Double>>]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[attAvgs]]></Name>
						<Type><![CDATA[Optional<Map<Affiliation, Double>>]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[percEdu]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[percG2]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[
boolean written = false;

for (int i = 0; i < n; i++) {
	Person p = add_People();
	p.Age = age;
	p.Gender = gender;
	p.Nativity = nativity;
	p.Affiliation = aff == folk_religions ? other_religions : aff;
	if (nativity == NATIVE) {
		p.onPeriodStart();
	} else {
		p.setAgesImmigrant();
		double defaultValue = 0.4;
		p.importance = dimAvgs.isPresent() ? dimAvgs.get().get(InteractionsUtils.IMPORTANCE) : defaultValue;
		p.publicPractice = dimAvgs.isPresent() ? dimAvgs.get().get(InteractionsUtils.PUBLIC) : defaultValue;
		p.privatePractice = dimAvgs.isPresent() ? dimAvgs.get().get(InteractionsUtils.PRIVATE) : defaultValue;
		p.supernaturalWorldview = dimAvgs.isPresent() ? dimAvgs.get().get(InteractionsUtils.SUPERNATURAL) : defaultValue;
		p.strictness = dimAvgs.isPresent() ? dimAvgs.get().get(InteractionsUtils.STRICTNESS) : defaultValue;
		
    	Map<Affiliation, Double> prej = global_prejudice.get(aff);
    	p.attitudes = new HashMap<>();
		for (Affiliation cAff : global_prejudice.keySet()) {
			if (attAvgs.isPresent() && attAvgs.get().containsKey(cAff)) {
				p.attitudes.put(cAff, attAvgs.get().get(cAff));
			} else {
				traceln(cAff);
				traceln(prej.keySet().toString());
				p.attitudes.put(cAff, 1 - prej.get(cAff));
			}
		}
		
		p.edu = uniform() <= percEdu;
		p.group = uniform() <= percG2 ? USA_NonWhite : USA_White;
		
		if (!written) {
			//writeRealRate(gender, p.Age_At_Period_Start, p.Age, "migration", n);
			written = true;
		}
	}
}]]></Body>
				</Function>
			</Functions>
			<CustomDistributions>
				<CustomDistribution>
					<Id>1600422717643</Id>
					<Name><![CDATA[AgeDistInitial_Male]]></Name>
					<X>620</X><Y>-210</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<InterpolationMethod>NONE</InterpolationMethod>
					<Type>DISCRETE</Type>
					<DefinitionType>HISTOGRAM</DefinitionType>
					<Static>false</Static>
					<LoadFromDatabase><![CDATA[true]]></LoadFromDatabase>
					<RangesQuery>
					<TableReference>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[init_age_dist_1950_un_mal]]></ClassName>
					</TableReference>
					<Condition>
						<ColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_mal]]></ClassName>
							<ItemName><![CDATA[country_id]]></ItemName>
						</ColumnReference>
						<Value Class="CodeValue">
							<Code><![CDATA[country_id]]></Code>
						</Value>
						<Operator>EQUALS</Operator>
					</Condition>
						<StartColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_mal]]></ClassName>
							<ItemName><![CDATA[start]]></ItemName>
						</StartColumnReference>
						<EndColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_mal]]></ClassName>
							<ItemName><![CDATA[end]]></ItemName>
						</EndColumnReference>
						<NumberOfObservationColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_mal]]></ClassName>
							<ItemName><![CDATA[weight]]></ItemName>
						</NumberOfObservationColumnReference>
					</RangesQuery>
					<FrequencyQuery>
					<TableReference>
					</TableReference>
						<ValueColumnReference>
						</ValueColumnReference>
						<WeightColumnReference>
						</WeightColumnReference>
					</FrequencyQuery>
					<SampleQuery>
					<TableReference>
					</TableReference>
						<ValueColumnReference>
						</ValueColumnReference>
					</SampleQuery>
					<OptionQuery>
					<TableReference>
					</TableReference>
						<OptionColumnReference>
						</OptionColumnReference>
						<NumberOfObservationColumnReference>
						</NumberOfObservationColumnReference>
					</OptionQuery>										
					<OptionListID><![CDATA[0]]></OptionListID>
					<OptionValues>				
					</OptionValues>				
				</CustomDistribution>
				<CustomDistribution>
					<Id>1600422765066</Id>
					<Name><![CDATA[AgeDistInitial_Female]]></Name>
					<X>620</X><Y>-190</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<InterpolationMethod>NONE</InterpolationMethod>
					<Type>DISCRETE</Type>
					<DefinitionType>HISTOGRAM</DefinitionType>
					<Static>false</Static>
					<LoadFromDatabase><![CDATA[true]]></LoadFromDatabase>
					<RangesQuery>
					<TableReference>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[init_age_dist_1950_un_fem]]></ClassName>
					</TableReference>
					<Condition>
						<ColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_fem]]></ClassName>
							<ItemName><![CDATA[country_id]]></ItemName>
						</ColumnReference>
						<Value Class="CodeValue">
							<Code><![CDATA[country_id]]></Code>
						</Value>
						<Operator>EQUALS</Operator>
					</Condition>
						<StartColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_fem]]></ClassName>
							<ItemName><![CDATA[start]]></ItemName>
						</StartColumnReference>
						<EndColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_fem]]></ClassName>
							<ItemName><![CDATA[end]]></ItemName>
						</EndColumnReference>
						<NumberOfObservationColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_1950_un_fem]]></ClassName>
							<ItemName><![CDATA[weight]]></ItemName>
						</NumberOfObservationColumnReference>
					</RangesQuery>
					<FrequencyQuery>
					<TableReference>
					</TableReference>
						<ValueColumnReference>
						</ValueColumnReference>
						<WeightColumnReference>
						</WeightColumnReference>
					</FrequencyQuery>
					<SampleQuery>
					<TableReference>
					</TableReference>
						<ValueColumnReference>
						</ValueColumnReference>
					</SampleQuery>
					<OptionQuery>
					<TableReference>
					</TableReference>
						<OptionColumnReference>
						</OptionColumnReference>
						<NumberOfObservationColumnReference>
						</NumberOfObservationColumnReference>
					</OptionQuery>										
					<OptionListID><![CDATA[0]]></OptionListID>
					<OptionValues>				
					</OptionValues>				
				</CustomDistribution>
				<CustomDistribution>
					<Id>1685671131620</Id>
					<Name><![CDATA[AgeDistInitial_Female_2010]]></Name>
					<X>620</X><Y>-190</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<InterpolationMethod>NONE</InterpolationMethod>
					<Type>DISCRETE</Type>
					<DefinitionType>HISTOGRAM</DefinitionType>
					<Static>false</Static>
					<LoadFromDatabase><![CDATA[true]]></LoadFromDatabase>
					<RangesQuery>
					<TableReference>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[init_age_dist_2010_pew_fem]]></ClassName>
					</TableReference>
						<StartColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_2010_pew_fem]]></ClassName>
							<ItemName><![CDATA[start]]></ItemName>
						</StartColumnReference>
						<EndColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_2010_pew_fem]]></ClassName>
							<ItemName><![CDATA[end]]></ItemName>
						</EndColumnReference>
						<NumberOfObservationColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_2010_pew_fem]]></ClassName>
							<ItemName><![CDATA[weight]]></ItemName>
						</NumberOfObservationColumnReference>
					</RangesQuery>
					<FrequencyQuery>
					<TableReference>
					</TableReference>
						<ValueColumnReference>
						</ValueColumnReference>
						<WeightColumnReference>
						</WeightColumnReference>
					</FrequencyQuery>
					<SampleQuery>
					<TableReference>
					</TableReference>
						<ValueColumnReference>
						</ValueColumnReference>
					</SampleQuery>
					<OptionQuery>
					<TableReference>
					</TableReference>
						<OptionColumnReference>
						</OptionColumnReference>
						<NumberOfObservationColumnReference>
						</NumberOfObservationColumnReference>
					</OptionQuery>										
					<OptionListID><![CDATA[0]]></OptionListID>
					<OptionValues>				
					</OptionValues>				
				</CustomDistribution>
				<CustomDistribution>
					<Id>1685671206910</Id>
					<Name><![CDATA[AgeDistInitial_Male_2010]]></Name>
					<X>620</X><Y>-190</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<InterpolationMethod>NONE</InterpolationMethod>
					<Type>DISCRETE</Type>
					<DefinitionType>HISTOGRAM</DefinitionType>
					<Static>false</Static>
					<LoadFromDatabase><![CDATA[true]]></LoadFromDatabase>
					<RangesQuery>
					<TableReference>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[init_age_dist_2010_pew_mal]]></ClassName>
					</TableReference>
						<StartColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_2010_pew_mal]]></ClassName>
							<ItemName><![CDATA[start]]></ItemName>
						</StartColumnReference>
						<EndColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_2010_pew_mal]]></ClassName>
							<ItemName><![CDATA[end]]></ItemName>
						</EndColumnReference>
						<NumberOfObservationColumnReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[init_age_dist_2010_pew_mal]]></ClassName>
							<ItemName><![CDATA[weight]]></ItemName>
						</NumberOfObservationColumnReference>
					</RangesQuery>
					<FrequencyQuery>
					<TableReference>
					</TableReference>
						<ValueColumnReference>
						</ValueColumnReference>
						<WeightColumnReference>
						</WeightColumnReference>
					</FrequencyQuery>
					<SampleQuery>
					<TableReference>
					</TableReference>
						<ValueColumnReference>
						</ValueColumnReference>
					</SampleQuery>
					<OptionQuery>
					<TableReference>
					</TableReference>
						<OptionColumnReference>
						</OptionColumnReference>
						<NumberOfObservationColumnReference>
						</NumberOfObservationColumnReference>
					</OptionQuery>										
					<OptionListID><![CDATA[0]]></OptionListID>
					<OptionValues>				
					</OptionValues>				
				</CustomDistribution>		
			</CustomDistributions>
			<AnalysisData>
    			<HistogramData>
					<Id>1573572859432</Id>
					<Name><![CDATA[Hist_Age_Pop]]></Name>
					<X>130</X><Y>1830</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1570176000000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
					</RecurrenceCode>
					<Value><![CDATA[]]></Value>
					<NumberOfIntervals>21</NumberOfIntervals>
					<MinMaxAutodetect>false</MinMaxAutodetect>
					<RangeMinExpression><![CDATA[0]]></RangeMinExpression>
					<RangeMaxExpression><![CDATA[100]]></RangeMaxExpression>
					<InitialIntervalSize><![CDATA[1]]></InitialIntervalSize>
					<CalculateCDF>true</CalculateCDF>
					<CalculatePercentiles>false</CalculatePercentiles>
					<LowPercent>10</LowPercent>
					<HighPercent>10</HighPercent>
					<Title><![CDATA[]]></Title>
				</HistogramData>
    			<HistogramData>
					<Id>1573572859543</Id>
					<Name><![CDATA[Hist_Age_Imm]]></Name>
					<X>410</X><Y>1830</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1570176000000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[52]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</RecurrenceCode>
					<Value><![CDATA[]]></Value>
					<NumberOfIntervals>18</NumberOfIntervals>
					<MinMaxAutodetect>false</MinMaxAutodetect>
					<RangeMinExpression><![CDATA[0]]></RangeMinExpression>
					<RangeMaxExpression><![CDATA[90]]></RangeMaxExpression>
					<InitialIntervalSize><![CDATA[1]]></InitialIntervalSize>
					<CalculateCDF>true</CalculateCDF>
					<CalculatePercentiles>false</CalculatePercentiles>
					<LowPercent>10</LowPercent>
					<HighPercent>10</HighPercent>
					<Title><![CDATA[]]></Title>
				</HistogramData>
    			<HistogramData>
					<Id>1590744186430</Id>
					<Name><![CDATA[Hist_Age_Emi]]></Name>
					<X>710</X><Y>1830</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1570176000000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[52]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</RecurrenceCode>
					<Value><![CDATA[]]></Value>
					<NumberOfIntervals>18</NumberOfIntervals>
					<MinMaxAutodetect>false</MinMaxAutodetect>
					<RangeMinExpression><![CDATA[0]]></RangeMinExpression>
					<RangeMaxExpression><![CDATA[90]]></RangeMaxExpression>
					<InitialIntervalSize><![CDATA[1]]></InitialIntervalSize>
					<CalculateCDF>true</CalculateCDF>
					<CalculatePercentiles>false</CalculatePercentiles>
					<LowPercent>10</LowPercent>
					<HighPercent>10</HighPercent>
					<Title><![CDATA[]]></Title>
				</HistogramData>
    			<HistogramData>
					<Id>1598885958789</Id>
					<Name><![CDATA[Hist_Age_Mal]]></Name>
					<X>130</X><Y>1850</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1570176000000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[52]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</RecurrenceCode>
					<Value><![CDATA[]]></Value>
					<NumberOfIntervals>21</NumberOfIntervals>
					<MinMaxAutodetect>false</MinMaxAutodetect>
					<RangeMinExpression><![CDATA[0]]></RangeMinExpression>
					<RangeMaxExpression><![CDATA[100]]></RangeMaxExpression>
					<InitialIntervalSize><![CDATA[1]]></InitialIntervalSize>
					<CalculateCDF>true</CalculateCDF>
					<CalculatePercentiles>false</CalculatePercentiles>
					<LowPercent>10</LowPercent>
					<HighPercent>10</HighPercent>
					<Title><![CDATA[]]></Title>
				</HistogramData>
    			<HistogramData>
					<Id>1598885971934</Id>
					<Name><![CDATA[Hist_Age_Fem]]></Name>
					<X>130</X><Y>1870</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1570176000000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[52]]></Code>
						<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
					</RecurrenceCode>
					<Value><![CDATA[]]></Value>
					<NumberOfIntervals>21</NumberOfIntervals>
					<MinMaxAutodetect>false</MinMaxAutodetect>
					<RangeMinExpression><![CDATA[0]]></RangeMinExpression>
					<RangeMaxExpression><![CDATA[100]]></RangeMaxExpression>
					<InitialIntervalSize><![CDATA[1]]></InitialIntervalSize>
					<CalculateCDF>true</CalculateCDF>
					<CalculatePercentiles>false</CalculatePercentiles>
					<LowPercent>10</LowPercent>
					<HighPercent>10</HighPercent>
					<Title><![CDATA[]]></Title>
				</HistogramData>
			</AnalysisData>
			<AgentLinks>
				<AgentLink>
					<Id>1494655951604</Id>
					<Name><![CDATA[connections]]></Name>
					<X>-60</X><Y>-30</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<StatechartReference>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[Main]]></ClassName>
						<ItemName><![CDATA[statechart_Main]]></ItemName>
					</StatechartReference>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<EmbeddedObjects>
				<EmbeddedObject>
					<Id>1494665518928</Id>
					<Name><![CDATA[People]]></Name>
					<X>60</X><Y>100</Y>
					<Label><X>-30</X><Y>-30</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<PresentationId>1527173962293</PresentationId>
					<ActiveObjectClass>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[Person]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
							<ClassName><![CDATA[Person]]></ClassName>
							<ItemName><![CDATA[1494658786006]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
					</Parameters>
					<ReplicationFlag>true</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[1000]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialSpeedCode Class="CodeUnitValue">
						<Code><![CDATA[10]]></Code>
						<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
					</InitialSpeedCode>
					<InitialLocationType>XYZ</InitialLocationType>
					<XCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</XCode>
					<YCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</YCode>
					<ZCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ZCode>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LatitudeCode Class="CodeValue">
						<Code><![CDATA[normal(0.01, self.Living_Location.getLatitude())
//uniform(51.39, 51.63)]]></Code>
					</LatitudeCode>
					<LongitudeCode Class="CodeValue">
						<Code><![CDATA[normal(0.01, self.Living_Location.getLongitude())
//uniform(-0.38,0.19)]]></Code>
					</LongitudeCode>
					<NodeCode><![CDATA[London]]></NodeCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA["London City"]]></Code>
					</LocationNameCode>
					<InitializationType>EMPTY</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
			</EmbeddedObjects>

			<Presentation>
				<Level>
					<Id>1580971507779</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>ALWAYS_SHOW</LevelVisibility>

			<Presentation>
				<Rectangle>
					<Id>1655905878097</Id>
					<Name><![CDATA[rectangle]]></Name>
					<X>990</X><Y>-520</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>540</Width>
					<Height>180</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1496247861528</Id>
					<Name><![CDATA[Setup]]></Name>
					<X>-270</X><Y>38</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-5952982</Color>
					<Text><![CDATA[Setup Area Parameters]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1496788447856</Id>
					<Name><![CDATA[text4]]></Name>
					<X>780</X><Y>5</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Date]]></Text>
					<TextCode><![CDATA[date()]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1496788910773</Id>
					<Name><![CDATA[rectangle13]]></Name>
					<X>0</X><Y>40</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>4</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>120</Width>
					<Height>100</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Rectangle>
					<Id>1499992213942</Id>
					<Name><![CDATA[rectangle28]]></Name>
					<X>4</X><Y>2423</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>1000</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-14774017</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1499992213948</Id>
					<Name><![CDATA[text27]]></Name>
					<X>880</X><Y>2430</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Date]]></Text>
					<TextCode><![CDATA[date()]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1499992233902</Id>
					<Name><![CDATA[rectangle33]]></Name>
					<X>3</X><Y>1233</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>1000</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-14774017</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1499992233908</Id>
					<Name><![CDATA[text32]]></Name>
					<X>890</X><Y>1240</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Date]]></Text>
					<TextCode><![CDATA[date()]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869097179</Id>
					<Name><![CDATA[rectangle48]]></Name>
					<X>65</X><Y>1230</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>56</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869097181</Id>
					<Name><![CDATA[text41]]></Name>
					<X>71</X><Y>1241</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[_origin_VA.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Model]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869097183</Id>
					<Name><![CDATA[rectangle49]]></Name>
					<X>135</X><Y>1230</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>116</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869097185</Id>
					<Name><![CDATA[text43]]></Name>
					<X>141</X><Y>1241</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewDescriptive_Statistics.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Descriptive Stats]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869097187</Id>
					<Name><![CDATA[rectangle50]]></Name>
					<X>265</X><Y>1231</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>66</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869097189</Id>
					<Name><![CDATA[text44]]></Name>
					<X>271</X><Y>1241</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewInferential_Statistics.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Inf Stat 1]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869097191</Id>
					<Name><![CDATA[rectangle51]]></Name>
					<X>342</X><Y>1230</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>69</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869097193</Id>
					<Name><![CDATA[text45]]></Name>
					<X>351</X><Y>1241</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Inf Stat 2]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869097195</Id>
					<Name><![CDATA[rectangle59]]></Name>
					<X>431</X><Y>1231</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>110</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Rectangle>
					<Id>1525869097199</Id>
					<Name><![CDATA[rectangle60]]></Name>
					<X>561</X><Y>1231</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>110</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Rectangle>
					<Id>1525869186045</Id>
					<Name><![CDATA[rectangle53]]></Name>
					<X>50</X><Y>2420</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>56</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869186047</Id>
					<Name><![CDATA[text46]]></Name>
					<X>56</X><Y>2431</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[_origin_VA.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Model]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869186049</Id>
					<Name><![CDATA[rectangle54]]></Name>
					<X>120</X><Y>2420</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>116</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869186051</Id>
					<Name><![CDATA[text48]]></Name>
					<X>126</X><Y>2431</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewDescriptive_Statistics.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Descriptive Stats]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869186053</Id>
					<Name><![CDATA[rectangle55]]></Name>
					<X>250</X><Y>2421</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>66</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869186055</Id>
					<Name><![CDATA[text49]]></Name>
					<X>256</X><Y>2431</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewInferential_Statistics.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Inf Stat 1]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869186057</Id>
					<Name><![CDATA[rectangle56]]></Name>
					<X>327</X><Y>2420</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>69</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1525869186059</Id>
					<Name><![CDATA[text50]]></Name>
					<X>336</X><Y>2431</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Inf Stat 2]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1525869186061</Id>
					<Name><![CDATA[rectangle61]]></Name>
					<X>416</X><Y>2421</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>110</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Rectangle>
					<Id>1525869186065</Id>
					<Name><![CDATA[rectangle62]]></Name>
					<X>546</X><Y>2421</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>110</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<EmbeddedObjectPresentation>
					<Id>1527173962293</Id>
					<Name><![CDATA[People_presentation]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<DrawingMode>AGENT_CURRENT_POSITION</DrawingMode>
					<ScaleType>AUTOMATICALLY_CALCULATED</ScaleType>
					<GISScaleForRealEmbeddedObjectPresentationSize>1000</GISScaleForRealEmbeddedObjectPresentationSize>
					<GISScaleForFixedEmbeddedObjectPresentationSize>1000000000</GISScaleForFixedEmbeddedObjectPresentationSize>
					<Latitude>51.45927337291793</Latitude>
					<Longitude>-0.10239337313604584</Longitude>
				</EmbeddedObjectPresentation>
				<Text>
					<Id>1540893898431</Id>
					<Name><![CDATA[text21]]></Name>
					<X>1340</X><Y>-290</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Write Annual OutPutFiles]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1573723871218</Id>
					<Name><![CDATA[text80]]></Name>
					<X>61</X><Y>11</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[_origin_VA.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Model]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1573723871222</Id>
					<Name><![CDATA[text81]]></Name>
					<X>131</X><Y>11</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewDescriptive_Statistics.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-1</Color>
					<Text><![CDATA[Descriptive Stats]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Rectangle>
					<Id>1573724201232</Id>
					<Name><![CDATA[rectangle99]]></Name>
					<X>680</X><Y>2420</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>120</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Rectangle>
					<Id>1573724218746</Id>
					<Name><![CDATA[rectangle100]]></Name>
					<X>690</X><Y>1230</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>120</Width>
					<Height>40</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-7876885</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1655905468695</Id>
					<Name><![CDATA[text]]></Name>
					<X>-650</X><Y>20</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Mapping Inputs to variables]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1655905503377</Id>
					<Name><![CDATA[text1]]></Name>
					<X>110</X><Y>990</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[THE VISUALIZATIONS BELOW ARE DEPRECATED]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1655905761191</Id>
					<Name><![CDATA[text2]]></Name>
					<X>1000</X><Y>-510</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Most of the model execution after init is triggered / executed by theese methods
]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

				</Level>
			</Presentation>
			<Areas>
				<Area>
					<Id>1496786228388</Id>
					<Name><![CDATA[viewDescriptive_Statistics]]></Name>
					<X>0</X><Y>1230</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Title><![CDATA[Statistics]]></Title>
					<Width>1000</Width>
					<Height>810</Height>
				</Area>
				<Area>
					<Id>1496859807823</Id>
					<Name><![CDATA[viewInferential_Statistics]]></Name>
					<X>0</X><Y>2420</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Title><![CDATA[]]></Title>
					<Width>1000</Width>
					<Height>920</Height>
				</Area>
				<Area>
					<Id>1573723871358</Id>
					<Name><![CDATA[viewCRED_Descriptive_Stats3]]></Name>
					<X>0</X><Y>5</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Title><![CDATA[]]></Title>
					<Width>1000</Width>
					<Height>960</Height>
				</Area>
			</Areas>

		</ActiveObjectClass>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1494658786011</Id>
			<Name><![CDATA[Person]]></Name>
			<AdditionalClassCode><![CDATA[// TODO: Make inverse of prejudice
public static final Map<Affiliation, Double> defaultAttitudes = new HashMap<>() {{
	
	for (Affiliation aff : Affiliation.class.getEnumConstants()) {
		put(aff, 0.1);
	}
}};]]></AdditionalClassCode>
			<Import><![CDATA[//import org.apache.log4j.helpers.AbsoluteTimeDateFormat;
import org.eclipse.jetty.util.log.StdErrLog;
//import jdk.internal.module.SystemModuleFinder;
import java.io.*;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.Optional;
import cohort_comp_method_2020.InteractionsUtils.Delta;;]]></Import>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1494658786006</Id>
				<Name><![CDATA[1494658786006]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1494662400000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1494658786007</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1580971507799</CurrentLevel>
			<ConnectionsId>1494658786041</ConnectionsId>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1494665224932</Id>
					<Name><![CDATA[Age]]></Name>
					<X>50</X><Y>200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1494667203108</Id>
					<Name><![CDATA[Nativity]]></Name>
					<X>50</X><Y>260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Nativity_Level]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[NATIVE]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1494688038046</Id>
					<Name><![CDATA[Gender]]></Name>
					<X>50</X><Y>230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Gender_List]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1496247409640</Id>
					<Name><![CDATA[Generation]]></Name>
					<X>50</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[1]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1520050291327</Id>
					<Name><![CDATA[Name]]></Name>
					<X>50</X><Y>170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[String]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[""]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1590736383311</Id>
					<Name><![CDATA[My_Children]]></Name>
					<X>50</X><Y>320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1600377916077</Id>
					<Name><![CDATA[setAgeAndGenderCalled]]></Name>
					<X>290</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1637949880389</Id>
					<Name><![CDATA[Age_At_Period_Start]]></Name>
					<X>50</X><Y>350</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1637949900410</Id>
					<Name><![CDATA[Age_At_Period_End]]></Name>
					<X>50</X><Y>380</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1641237729573</Id>
					<Name><![CDATA[immigrated_this_period]]></Name>
					<X>50</X><Y>410</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1655906739918</Id>
					<Name><![CDATA[Period_Survival]]></Name>
					<X>290</X><Y>260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[true]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1683856759037</Id>
					<Name><![CDATA[Affiliation]]></Name>
					<X>50</X><Y>670</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Affiliation]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[unaffiliated]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697122951693</Id>
					<Name><![CDATA[edu]]></Name>
					<X>45</X><Y>695</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697122951695</Id>
					<Name><![CDATA[married]]></Name>
					<X>45</X><Y>715</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697122951697</Id>
					<Name><![CDATA[group]]></Name>
					<X>45</X><Y>735</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Group]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[USA_White]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697122951699</Id>
					<Name><![CDATA[strictness]]></Name>
					<X>45</X><Y>755</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697122951701</Id>
					<Name><![CDATA[attitudes]]></Name>
					<X>45</X><Y>775</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[HashMap<Affiliation, Double>]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new HashMap<>(defaultAttitudes)
]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697122951703</Id>
					<Name><![CDATA[switchFrustration]]></Name>
					<X>45</X><Y>795</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697122951705</Id>
					<Name><![CDATA[disaffFrustration]]></Name>
					<X>45</X><Y>815</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697122951707</Id>
					<Name><![CDATA[publicPractice]]></Name>
					<X>45</X><Y>835</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697122951709</Id>
					<Name><![CDATA[privatePractice]]></Name>
					<X>45</X><Y>855</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697122951711</Id>
					<Name><![CDATA[supernaturalWorldview]]></Name>
					<X>45</X><Y>875</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697122951713</Id>
					<Name><![CDATA[importance]]></Name>
					<X>45</X><Y>895</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697122951715</Id>
					<Name><![CDATA[motherId]]></Name>
					<X>460</X><Y>690</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[-1]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697122951717</Id>
					<Name><![CDATA[fatherId]]></Name>
					<X>370</X><Y>690</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[-1]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697297677196</Id>
					<Name><![CDATA[expectedNumChildren]]></Name>
					<X>540</X><Y>830</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697314200454</Id>
					<Name><![CDATA[hasSwitched]]></Name>
					<X>200</X><Y>490</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1697490811447</Id>
					<Name><![CDATA[motherAff]]></Name>
					<X>560</X><Y>690</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Affiliation]]></Type>        
					</Properties>
				</Variable>
			</Variables>
			<StatechartElements>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1494665089154</Id>
					<Name><![CDATA[Year_Interaction]]></Name>
					<X>760</X><Y>220</Y>
					<Label><X>15</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="140" Height="30">
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1519229517453</Id>
					<Name><![CDATA[Yearly_Updates]]></Name>
					<X>830</X><Y>300</Y>
					<Label><X>5</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[final String period = get_Main().Periods.get(get_Main().Period_Count);

if (this.Age == 12) {
	this.inheritReligiosity();
}
// Fertility
// Only half if split, otherwise all
do_fertility_round(period);

// Mortality
if (get_Main().includeInMortality(this)) {
	do_mortality_round(period);
}

if ((12 <= this.Age && this.Age <= 25)
		|| (get_Main().toggleOlderInteraction &&
		   (this.Age == 30 || this.Age == 40 || this.Age== 55 || this.Age == 70))) {
	this.doInteractions();
} 

doSwitching();

// Aging
this.Age += get_Main().FiveYearStep ? 5 : 1;

// Migration and fertility round 2 are handled separately
// in the second agent update trigger in Main

this.statechart2.fireEvent("return_to_yearly_interaction");]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1520049194291</Id>
					<Name><![CDATA[Death_State]]></Name>
					<X>810</X><Y>450</Y>
					<Label><X>5</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="170" Height="30">
						<EntryAction><![CDATA[get_Main().Death_counter += 1;
this.disconnectFromAll();
get_Main().remove_People(this);]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1648600494353</Id>
					<Name><![CDATA[Delay]]></Name>
					<Description><![CDATA[Because of some initialization timing issues, we have to add some delay time here.]]></Description>
					<X>760</X><Y>120</Y>
					<Label><X>15</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="140" Height="30">
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="EntryPoint" ParentState="ROOT_NODE">
					<Id>1494665089160</Id>
					<Name><![CDATA[statechart2]]></Name>
					<X>830</X><Y>50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>70</Y></Point>
					</Points>
					<Properties Target="1648600494353">
						<Action><![CDATA[connectTo(get_Main());

// Immigrants variables are set when incoming in MAIN.
if(this.Nativity != NON_NATIVE)
{
	//Set_Religion();
	if (!setAgeAndGenderCalled) {
		Set_Age_Gender();
	}
	//Set_Age();
}

if (this.Nativity==NATIVE)
{
	this.shapeBody.setFillColor(green);
}
else 
{
	this.shapeBody.setFillColor(orange);
}]]></Action>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1519229559527</Id>
					<Name><![CDATA[transition6]]></Name>
					<X>840</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>-40</X><Y>-50</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1519229517453" Target="1494665089154" Trigger="message">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[WEEK]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_WEEK]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[equalsTo]]></FilterType>
						<EqualsExpression><![CDATA["return_to_yearly_interaction"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1600353203317</Id>
					<Name><![CDATA[transition10]]></Name>
					<X>910</X><Y>330</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>120</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1519229517453" Target="1520049194291" Trigger="message">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_YEAR]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[equalsTo]]></FilterType>
						<EqualsExpression><![CDATA["die_right_now"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1648600558701</Id>
					<Name><![CDATA[transition]]></Name>
					<X>830</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>70</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1648600494353" Target="1494665089154" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[0.01]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_YEAR]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1648600982995</Id>
					<Name><![CDATA[transition7]]></Name>
					<X>890</X><Y>250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>10</X><Y>50</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1494665089154" Target="1519229517453" Trigger="message">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_WEEK]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[equalsTo]]></FilterType>
						<EqualsExpression><![CDATA["Do_Yearly_Update"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1655847849928</Id>
					<Name><![CDATA[transition1]]></Name>
					<Description><![CDATA[After initialization, this state should transition immediately.]]></Description>
					<X>880</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>1</X><Y>70</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1648600494353" Target="1494665089154" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
						</Timeout>
						<Condition><![CDATA[time(YEAR) >= 0.29]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_YEAR]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
			</StatechartElements>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[Gender_List]]></ReturnType>
					<Id>1494665089105</Id>
					<Name><![CDATA[Set_Age_Gender]]></Name>
					<X>530</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[setAgeAndGenderCalled = true;
if (true && 2 == 2) {
return;
}
/// Set age and gender of the initial population
/// Age and gender of the nascent population is set with funciton "Set_Gender_Nascent_Pop" called in the "Reproduction_Process" function.
if(time() < 0.2 && !get_Main().TopDownInitialAgents)
{
	//traceln("I am being initialized at init.");
	double mygender= uniform(1);
	//this.Flag = true;
	double Male_Percentage = get_Main().Sex_Ratio_Init_Pop;

	if (mygender < Male_Percentage)
	{
		this.Gender = MALE;
		if (get_Main().isPhase2) {
			this.Age = get_Main().AgeDistInitial_Male_2010.getInt();
		} else {
			this.Age = get_Main().AgeDistInitial_Male.getInt();
		}
		if (!get_Main().AgentInitializationPerAgeYear) {
			this.Age = ((int)(this.Age / 5)) * 5.0;
		}
		/// half of the population will have X.5 and the other half X.0 years old
		//if(0.5 > uniform()){ this.Age += 0.5; }
		//traceln(this.Age);
		if (this.Nativity == NON_NATIVE) {	traceln(this.Nativity + " " + this.Gender + " " + this.Age); }
	}
	else
	{
		this.Gender = FEMALE;
		if (get_Main().isPhase2) {
			this.Age = get_Main().AgeDistInitial_Female_2010.getInt();
		} else {
			this.Age = get_Main().AgeDistInitial_Female.getInt();
		}
		if (!get_Main().AgentInitializationPerAgeYear) {
			this.Age = ((int)(this.Age / 5)) * 5.0;
		}
		/// half of the population will have X.5 and the other half X.0 years old
		//if(0.5 > uniform()){ this.Age += 0.5; }
		
		//traceln(this.Age);
		if (this.Nativity == NON_NATIVE) {	traceln(this.Nativity + " " + this.Gender + " " + this.Age); }
	}
	
	this.Affiliation = DBUtils.getAffiliation(get_Main(), this.Gender, this.Age);
	this.Name = this.Gender.toString();
	this.onPeriodStart();
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[String]]></ReturnType>
					<Id>1590420553339</Id>
					<Name><![CDATA[Get_death_cohort]]></Name>
					<X>530</X><Y>250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[Age]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[String deathRateSource = get_Main().Death_Rate_Source;
boolean dr_sr = deathRateSource.equals("SR");
boolean dr_pc = deathRateSource.equals("PC");

if (Age < 1) { return "0-1";}
if (Age < 5) { return (dr_sr || dr_pc) ? "0-4" : "1-4";}
else if (Age < 10) {return "5-9";}
else if (Age < 15) {return "10-14";}
else if (Age < 20) {return "15-19";}
else if (Age < 25) {return "20-24";}
else if (Age < 30) {return "25-29";}
else if (Age < 35) {return "30-34";}
else if (Age < 40) {return "35-39";}
else if (Age < 45) {return "40-44";}
else if (Age < 50) {return "45-49";}
else if (Age < 55) {return "50-54";}
else if (Age < 60) {return "55-59";}
else if (Age < 65) {return "60-64";}
else if (Age < 70) {return "65-69";}
else if (Age < 75) {return "70-74";}
else if (Age < 80) {return "75-79";}
else if (Age < 85) {return "80-84";}
else if (Age < 90) {return "85-89";}
else if (Age < 95) {return dr_pc ? "90-94" : "90-95";}
else if (Age < 100) {return dr_pc ? "95+" : "95-99";}
else if (Age < 105) {return dr_pc ? "95+" :"100-104";}
else if (Age >= 105) {return dr_pc ? "95+" :"105";}
else {traceln("Error: age cohort not found"); return "-1";}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[int]]></ReturnType>
					<Id>1599486758554</Id>
					<Name><![CDATA[Get_death_index]]></Name>
					<X>530</X><Y>270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[Age]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[// Index starts at 1 cause the new borns have a chance to die right away and in case they do, they get index 0
// this is done in Yearly_updates --> Reproduction process -->  Mortality new borns
if (Age < 1) { return 1;}
else if (Age < 5) {return 2;}
else if (Age < 10) {return 3;}
else if (Age < 15) {return 4;}
else if (Age < 20) {return 5;}
else if (Age < 25) {return 6;}
else if (Age < 30) {return 7;}
else if (Age < 35) {return 8;}
else if (Age < 40) {return 9;}
else if (Age < 45) {return 10;}
else if (Age < 50) {return 11;}
else if (Age < 55) {return 12;}
else if (Age < 60) {return 13;}
else if (Age < 65) {return 14;}
else if (Age < 70) {return 15;}
else if (Age < 75) {return 16;}
else if (Age < 80) {return 17;}
else if (Age < 85) {return 18;}
else if (Age < 90) {return 19;}
else if (Age < 95) {return 20;}
else if (Age < 100) {return 21;}
else if (Age < 105) {return 22;}
else if (Age >= 105) {return 23;}
else {traceln("Error: age cohort not found"); return -1;}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1611606691108</Id>
					<Name><![CDATA[die]]></Name>
					<X>530</X><Y>310</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[Age_adjusted]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[this.Period_Survival = false;
// update the death counters according to age and gender categories
if (this.Gender == MALE) { get_Main().DR_Per_Age_Mal[Get_death_index(Age_adjusted)] ++; }
if (this.Gender == FEMALE) { get_Main().DR_Per_Age_Fem[Get_death_index(Age_adjusted)] ++; } 

// Copied from Death_State
get_Main().Death_counter += 1;
this.disconnectFromAll();
get_Main().remove_People(this);]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1611778941330</Id>
					<Name><![CDATA[do_birth]]></Name>
					<X>530</X><Y>360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[Age_adjusted]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[gender]]></Name>
						<Type><![CDATA[Gender_List]]></Type>
					</Parameter>
					<Body><![CDATA[	this.My_Children += 1;
	Person NewChild = get_Main().add_People();
	NewChild.Generation = this.Generation + 1;
	NewChild.Age = get_Main().FiveYearStep ? -5 : -1;
	NewChild.Age_At_Period_Start = NewChild.Age;
	NewChild.Age_At_Period_End = 0;
	NewChild.Gender = gender;

	NewChild.Affiliation = this.Affiliation;
	
	
	NewChild.motherId = this.getId();
	if (this.spouse.size() < 1) {
		PersonReligiosity pairing = get_Main().personReligiosityCache.getCoupling(this.toReligiosity(), get_Main(), get_Main());
		if (pairing != null) {
			this.coupleWith(pairing.getPerson(), /*enableSwitch=*/ true);
			NewChild.fatherId = pairing.getPersonId();
		} else {
			traceln("Could not find spouse for agent " + this.getId());
		}
	} else {
		NewChild.fatherId = this.spouse.getConnections().get(0).getId();
	}

	get_Main().Birth_counter += 1;
	get_Main().BR_Per_Age[(Age_adjusted - 15)] ++;
	if(this.Nativity == NON_NATIVE ) { NewChild.Nativity = SEMI_NATIVE; }
	
	if (!get_Main().TopDown) {
		NewChild.statechart2.fireEvent("Do_Yearly_Update");
		return;
	}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1614353175805</Id>
					<Name><![CDATA[Update_Counters]]></Name>
					<X>1060</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[
int Age_adjusted = (int) floor(this.Age);

// These counter may be broken

/// count the chance to die according to age adjusted category and gender	
if (this.Gender == MALE) { get_Main().Counter_DR_Per_Age_Mal[Get_death_index(Age_adjusted)] ++; }
if (this.Gender == FEMALE) { get_Main().Counter_DR_Per_Age_Fem[Get_death_index(Age_adjusted)] ++; } 	

if(this.Period_Survival == true && 
	   this.Gender == FEMALE && this.Age >= 15 && this.Age < 50) 
{ 
	/// count the chance to give birth according to the adjusted age
	get_Main().Counter_BR_Per_Age[(Age_adjusted - 15)] ++;
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631561696913</Id>
					<Name><![CDATA[emigrate]]></Name>
					<X>530</X><Y>420</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[get_Main().Hist_Age_Emi.add(this.Age);
	//Emigrant_counter += 1;
	this.disconnectFromAll();
	get_Main().remove_People(this);]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[boolean]]></ReturnType>
					<Id>1631570670967</Id>
					<Name><![CDATA[coinFlip]]></Name>
					<X>50</X><Y>510</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[oddsTrue]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[double r = uniform();

return r < oddsTrue;
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631572524990</Id>
					<Name><![CDATA[do_fertility_round]]></Name>
					<X>530</X><Y>340</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[period]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[if (Cohort.asFertilityCohort(this).isChildBearing()) {
	double fertRate = (
		get_Main().isPhase2
			? DBUtils.getYearlyFertilityRate(get_Main(), period, (int) Age, Affiliation)
			: DBUtils.getYearlyFertilityRate(get_Main(), period, (int) Age)
	);
	int numChildren = 0;
	
	if (get_Main().FiveYearStep) {
		numChildren += coinFlip(fertRate) ? 1 : 0;
		numChildren += coinFlip(fertRate) ? 1 : 0;
		if (get_Main().splitFertility) {
			boolean haveSplitChild = coinFlip(fertRate / 2);
			numChildren +=  haveSplitChild ? 1 : 0;
		} else {
			numChildren += coinFlip(fertRate) ? 1 : 0;
			numChildren += coinFlip(fertRate) ? 1 : 0;
			numChildren += coinFlip(fertRate) ? 1 : 0;
		}
	} else {
		if (get_Main().splitFertility) {
			fertRate /= 2;
		}
		// An oddity of the 1 yr split fert bottom up model: agents can have 2 children in 1 yr
		boolean haveChild = coinFlip(fertRate);
		numChildren += haveChild ? 1 : 0;
	}
	
	double maleLikelihood = DBUtils.getInfantSexRatio(get_Main(), period);
	for (int i = 0; i < numChildren; i++) {
		this.do_birth((int) Age, coinFlip(maleLikelihood) ? MALE : FEMALE);
	}
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631572848023</Id>
					<Name><![CDATA[do_emigration_round]]></Name>
					<X>530</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[period]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[// Emigration
double emRate = DBUtils.getEmigrationRate(get_Main(), period, this);
if (coinFlip(emRate)) {
	this.emigrate();
	return;
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631574982886</Id>
					<Name><![CDATA[do_mortality_round]]></Name>
					<X>530</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[period]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[double mortRate;
if (Age_At_Period_Start < 0 && !get_Main().FiveYearStep && get_Main().ForceUseSplitAge) {
       mortRate = DBUtils.getInfantDeathRate(this.get_Main(), period, Age, Gender);
} else {
       mortRate = DBUtils.getDeathRateFromSurvivalRatio(this.get_Main(), period, Cohort.asDeathCohort(this).age, Gender);
}

//traceln(String.format("Age %f, Gender %s, DeathRate %f", this.Age, this.Gender, mortRate));

if (coinFlip(mortRate)) {
	this.die((int)Age);
	return;
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1637949911279</Id>
					<Name><![CDATA[onPeriodStart]]></Name>
					<X>50</X><Y>440</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[Age_At_Period_Start = Age;
Age_At_Period_End = Age + 5;
immigrated_this_period = false;

if (Affiliation == folk_religions) {
	traceln(" What was I made for?");
	Affiliation = other_religions;
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1639589052027</Id>
					<Name><![CDATA[setAgesImmigrant]]></Name>
					<X>50</X><Y>460</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[
immigrated_this_period = true;
if (get_Main().FiveYearStep) {
	return;
}



if (/*!get_Main().splitFertility && */ !get_Main().ForceUseSplitAge) {
	return;
}

if (0 <= Age && Age <= 4) {
	Age_At_Period_Start = -1;
	Age_At_Period_End = 0;
	return;
}

int year = (int) floor(time(YEAR));
int yearsPassedInPeriod = year % 5;
int yearsRemainingInPeriod = 5 - yearsPassedInPeriod;

Age_At_Period_End = Age;
Age_At_Period_Start = Age_At_Period_End - 5;
Age = Age_At_Period_Start + yearsPassedInPeriod + 1;]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[PersonReligiosity]]></ReturnType>
					<Id>1697122951635</Id>
					<Name><![CDATA[toReligiosity]]></Name>
					<X>220</X><Y>675</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[this.Affiliation = this.Affiliation == folk_religions ? other_religions : this.Affiliation;
this.Affiliation = this.Affiliation == jews ? other_religions : this.Affiliation;

return PersonReligiosity.from(this);




]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951637</Id>
					<Name><![CDATA[inheritReligiosity]]></Name>
					<X>370</X><Y>870</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[if (motherId == -1 && fatherId == -1) {
	traceln("Immigrants have no parents.");
	return;
}

Main m = get_Main();
PersonReligiosity motherReligiosity = m.personReligiosityCache.getMostRecentReligiosityFor(motherId);

if (m.motherInheritance) {
	this.Affiliation = motherReligiosity.getAffiliation();
	this.strictness = motherReligiosity.getStrictness();
	this.importance = motherReligiosity.getImportance();
	this.supernaturalWorldview = motherReligiosity.getSupernaturalWorldview();
	this.publicPractice = motherReligiosity.getPublicPractice();
	this.privatePractice = motherReligiosity.getPrivatePractice();
	this.disaffFrustration = motherReligiosity.getDisaffFrustration();
	this.switchFrustration = motherReligiosity.getSwitchFrustration();
	this.attitudes = new HashMap<>(motherReligiosity.getAttitudes());
	return;
}

PersonReligiosity fatherReligiosity = m.personReligiosityCache.getMostRecentReligiosityFor(fatherId);


PersonReligiosity maternalGFReligiosity = null;//m.personReligiosityCache.getMostRecentReligiosityFor(motherReligiosity.getFatherId());
PersonReligiosity maternalGMReligiosity = null;//m.personReligiosityCache.getMostRecentReligiosityFor(motherReligiosity.getMotherId());
PersonReligiosity paternalGFReligiosity = null;//m.personReligiosityCache.getMostRecentReligiosityFor(fatherReligiosity.getFatherId());
PersonReligiosity paternalGMReligiosity = null;//m.personReligiosityCache.getMostRecentReligiosityFor(fatherReligiosity.getMotherId());


if (motherReligiosity.getFatherId() == -1
	|| motherReligiosity.getMotherId() == -1
	|| fatherReligiosity.getFatherId() == -1
	|| fatherReligiosity.getMotherId() == -1) {
	traceln("Children of immigrants don't have grandparents.");
	//return;
} else {

	maternalGFReligiosity = m.personReligiosityCache.getMostRecentReligiosityFor(motherReligiosity.getFatherId());
	maternalGMReligiosity = m.personReligiosityCache.getMostRecentReligiosityFor(motherReligiosity.getMotherId());
	paternalGFReligiosity = m.personReligiosityCache.getMostRecentReligiosityFor(fatherReligiosity.getFatherId());
	paternalGMReligiosity = m.personReligiosityCache.getMostRecentReligiosityFor(fatherReligiosity.getMotherId());
}
// Dimensions inheritance
List<Function<PersonReligiosity, Double>> propGetter = Arrays.asList(
	PersonReligiosity::getImportance,
	PersonReligiosity::getPublicPractice,
	PersonReligiosity::getPrivatePractice,
	PersonReligiosity::getSupernaturalWorldview);
	
List<Function<PersonReligiosityCache, Double>> swingGetter = Arrays.asList(
	PersonReligiosityCache::getAverageImportance,
	PersonReligiosityCache::getAveragePublic,
	PersonReligiosityCache::getAveragePrivate,
	PersonReligiosityCache::getAverageSupernaturalWorldview
);


double param = main.phase3Param();
PersonReligiosity.Builder builder = new PersonReligiosity.Builder();
for (int i = 0; i < 4; i++) {
	double val;
	if (this.Gender == Gender_List.MALE) {
	    if (maternalGFReligiosity == null) {
	        val = propGetter.get(i).apply(fatherReligiosity) * (6.0/15.0)
	            + propGetter.get(i).apply(motherReligiosity) * (9.0/15.0);
	    } else {
	        val = propGetter.get(i).apply(fatherReligiosity) * (4.0/15.0)
	            + propGetter.get(i).apply(motherReligiosity) * (6.0/15.0)
	            + propGetter.get(i).apply(paternalGFReligiosity) * (1.0/15.0)
	            + propGetter.get(i).apply(paternalGMReligiosity) * (1.5/15.0)
	            + propGetter.get(i).apply(maternalGFReligiosity) * (1.0/15.0)
	            + propGetter.get(i).apply(maternalGMReligiosity)  * (1.5/15.0);
	    }
	} else {
	    if (maternalGFReligiosity == null) {
	        val = propGetter.get(i).apply(fatherReligiosity) * (5.0/15.0)
	            + propGetter.get(i).apply(motherReligiosity) * (10.0/15.0);
	    } else {
	        val = propGetter.get(i).apply(fatherReligiosity) * (3.0/15.0)
	            + propGetter.get(i).apply(motherReligiosity) * (7.0/15.0)
	            + propGetter.get(i).apply(paternalGFReligiosity) * (3.0/15.0/4.0)
	            + propGetter.get(i).apply(paternalGMReligiosity) * (7.0/15.0/4.0)
	            + propGetter.get(i).apply(maternalGFReligiosity) * (3.0/15.0/4.0)
	            + propGetter.get(i).apply(maternalGMReligiosity)  * (7.0/15.0/4.0);
	    }
	}

	double swing = swingGetter.get(i).apply(main.personReligiosityCache);
	val = val * (1 - Math.pow(param, 2));
	val = (1 - main.c_swing) * val + main.c_swing * swing;
	if (val < 0 || val > 1) {
		traceln("Bad val!!");
	}
	
	SWITCH:
	switch(i) {
		case 0: this.importance = val; break SWITCH;
		case 1: this.publicPractice = val; break SWITCH;
		case 2: this.privatePractice = val; break SWITCH;
		case 3: this.supernaturalWorldview = val; break SWITCH;
	}
}


// Frustration inheritance (Avg of parents then half it)
this.disaffFrustration = (motherReligiosity.getDisaffFrustration() + fatherReligiosity.getDisaffFrustration()) / 4.0;
this.switchFrustration = (motherReligiosity.getSwitchFrustration() + fatherReligiosity.getSwitchFrustration()) / 4.0;

// Attitude Inheritance (Avg of parents)
this.attitudes = new HashMap<>();
Arrays.stream(new PersonReligiosity[]{motherReligiosity, fatherReligiosity})
					.map(PersonReligiosity::getAttitudes)
					.map(Map<Affiliation, Double>::entrySet)
					.flatMap(Collection::stream)
					.collect(Collectors
								.groupingBy(
									Map.Entry::getKey, 
									Collectors.averagingDouble(Map.Entry::getValue)
								))
					.forEach((k,v) -> this.attitudes.put(k,v));

// Affiliation and strictness inheritance
// If parents are the same affiliation, inherit completely
Affiliation motherAff = motherReligiosity.getAffiliation();
Affiliation fatherAff = fatherReligiosity.getAffiliation();
if (motherAff == fatherAff) {
	this.Affiliation = motherAff;
	this.strictness = (motherReligiosity.getStrictness() + fatherReligiosity.getStrictness()) / 2.0;
} 
// Parents are different affiliation but neither is unaffiliated
else if (motherAff != unaffiliated && fatherAff != unaffiliated) {
	double disaffChance = param / 10;
	double maternalChance = (2.0/3.0) * (1 - disaffChance);
	double paternalChance = (1.0/3.0) * (1 - disaffChance);
	double pick = uniform();
	if (pick < disaffChance) {
		this.Affiliation = unaffiliated;
		this.strictness = m.getConvertStrictness(unaffiliated);
	} else if (pick < disaffChance + maternalChance) {
		this.Affiliation = motherAff;
		this.strictness = motherReligiosity.getStrictness();
	} else {
		this.Affiliation = fatherAff;
		this.strictness = fatherReligiosity.getStrictness();
	}
}
// One parent is unaffiliated and the other is not
else {
	double nonAffChance = param;
	double pick = uniform();
	if (pick < nonAffChance) {
		PersonReligiosity nonAff = motherAff == unaffiliated ? motherReligiosity : fatherReligiosity;
		this.Affiliation = unaffiliated;
		this.strictness = nonAff.getStrictness();
	} else {
		PersonReligiosity aff = motherAff == unaffiliated ? fatherReligiosity : motherReligiosity;
		this.Affiliation = aff.getAffiliation();
		this.strictness = aff.getStrictness();
	}
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951639</Id>
					<Name><![CDATA[coupleWith]]></Name>
					<X>370</X><Y>895</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[person]]></Name>
						<Type><![CDATA[Person]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[enableSwitch]]></Name>
						<Type><![CDATA[boolean]]></Type>
					</Parameter>
					<Body><![CDATA[if (!enableSwitch || !get_Main().coupleSwitching) {
	this.spouse.connectTo(person);
	person.spouse.connectTo(this);
	this.married = true;
	person.married = true;
	return;
} 

this.Affiliation = this.Affiliation == folk_religions ? other_religions : this.Affiliation;
person.Affiliation = person.Affiliation == folk_religions ? other_religions : person.Affiliation;

PersonReligiosity before = this.toReligiosity();
PersonReligiosity beforeSpouse = person.toReligiosity();

Main main = get_Main();
double stronglyReligiousCutoff = main.stronglyReligiousCutoff;
// Same (non)affiliation
if (this.Affiliation == person.Affiliation) {
	double avgImp = main.personReligiosityCache.getAverageImportance();
	double higherStrictness = max(this.strictness, person.strictness);
	double lowerStrictness = min(this.strictness, person.strictness);
	double pick = main.uniform();
	double baseStrictness = pick < avgImp ? higherStrictness : lowerStrictness;
	double shiftScore = (main.lifestyleOpportunity() + main.pluralism() + main.freedom()) / 3.0;
	double shiftedStrictness;
	if (shiftScore < 1 - baseStrictness) {
		shiftedStrictness = min(1.0, 1.1 * baseStrictness);
	} else {
		shiftedStrictness = 0.9 * baseStrictness;
	}
	this.strictness = shiftedStrictness;
	person.strictness = shiftedStrictness;
	
	main.personReligiosityCache.reportCoupleSwitch(this.Affiliation, this.Affiliation);
	main.personReligiosityCache.reportCoupleSwitch(this.Affiliation, this.Affiliation);
	
	main.writeSwitch("Couple Same Shift", before, this.toReligiosity());
	main.writeSwitch("Couple Same Shift", beforeSpouse, person.toReligiosity());
}
// Different (non)affiliations
else {
	// Neither are nones
	if (!((this.Affiliation == unaffiliated) || (person.Affiliation == unaffiliated))) {
		int egoStronglyReligious = this.importance > stronglyReligiousCutoff ? 1 : 0;
		int alterStronglyReligious = person.importance > stronglyReligiousCutoff ? 1 : 0;
		if (egoStronglyReligious + alterStronglyReligious == 2) {
			// Both strongly religious, nothing happens	
		} else if (egoStronglyReligious + alterStronglyReligious == 1) {
			// One is strongly religious the other is not
			Person weakPartner = this.importance > stronglyReligiousCutoff ? person : this;
			Person strongPartner = this.importance <= stronglyReligiousCutoff ? person : this;
			double pick = main.uniform();
			if (pick < 1.0 / 3.0) {
				// Nothing happens
			} else if (pick < 2.0 / 3.0) {
				// Weak religious partner to None
				PersonReligiosity weakBefore = weakPartner.toReligiosity();
				main.personReligiosityCache.reportCoupleSwitch(weakPartner.Affiliation, unaffiliated);
				weakPartner.Affiliation = unaffiliated;
				weakPartner.strictness = main.getConvertStrictness(unaffiliated);
				// If high SN, private practice and importance stays the same
				// If low SN, private practice and importance are halved
				if (weakPartner.supernaturalWorldview < main.highSNWCutoff) {
					weakPartner.privatePractice /= 2;
					weakPartner.importance /= 2;
				}
				main.writeSwitch("Couple Strong/Weak->None", weakBefore, weakPartner.toReligiosity());
			} else {
				// Weak religious partner to partner aff
				PersonReligiosity weakBefore = weakPartner.toReligiosity();
				main.personReligiosityCache.reportCoupleSwitch(weakPartner.Affiliation, strongPartner.Affiliation);
				weakPartner.Affiliation = strongPartner.Affiliation;
				weakPartner.strictness = strongPartner.strictness;
				weakPartner.publicPractice = strongPartner.publicPractice;
				weakPartner.privatePractice = (weakPartner.privatePractice + strongPartner.privatePractice) / 2.0;
				main.writeSwitch("Couple Strong/Weak->Cpl", weakBefore, weakPartner.toReligiosity());
			}
		} else if (egoStronglyReligious + alterStronglyReligious == 0) {
			double proportionOfNones = main.personReligiosityCache.getNonesProportion();
			double stayLikelihood = (1 - proportionOfNones) / 3.0;
			double unitTransform = (proportionOfNones * 2.0) - 1;
			// Wonky algebra to adjust the remaining likelihoods
	        // among the transition to none possibilities.
	        // All transition to none possibilities are favored when
	        // proportion of nones is > 0.5, and as we approach 1,
	        // Both going to none is favored even more relative to just
	        // one going to none
	        double bothToNoneLikelihood;
	        double oneToNoneLikelihood;
	        if (unitTransform == 0.0) {
	        	bothToNoneLikelihood = 1.0 / 6.0;
	        	oneToNoneLikelihood = 1.0 / 6.0;
	        } else if (unitTransform > 0.0) {
	        	bothToNoneLikelihood = 0.5 * unitTransform + (1.0 / 6.0) * (1.0 - unitTransform);
	        	oneToNoneLikelihood = -0.5 * bothToNoneLikelihood + 1.0 / 4.0;
	        } else {
	        	bothToNoneLikelihood = (1.0 / 6.0) * (1.0 + unitTransform);
	        	oneToNoneLikelihood = -0.5 * bothToNoneLikelihood + 1.0 / 4.0;
	        }
	        
	        bothToNoneLikelihood *= 2 * proportionOfNones;
	        oneToNoneLikelihood *= 2 * proportionOfNones;
	        
	        assert 1e-8 >= abs(bothToNoneLikelihood + 2 * oneToNoneLikelihood - proportionOfNones);
	        assert 1e-8 >= abs(bothToNoneLikelihood + 2 * oneToNoneLikelihood + 3 - 1);
	        
	        double total = bothToNoneLikelihood + 2 * oneToNoneLikelihood + 3 * stayLikelihood;
	        bothToNoneLikelihood /= total;
	        oneToNoneLikelihood /= total;
	        stayLikelihood /= total;
	        
	        
	        int bothStayIndex = 0;
	        int partnerConvertsIndex = 1;
	        int egoConvertsIndex = 2;
	        int egoToNoneIndex = 3;
	        int partnerToNoneIndex = 4;
	        int bothToNoneIndex = 5;
	        List<Double> probabilities = List.of(
	        								stayLikelihood, 		// 0 - Both stay
	        								stayLikelihood, 		// 1 - Partner converts
	        								stayLikelihood, 		// 2 - Ego converts
	        								oneToNoneLikelihood,	// 3 - Ego to none 
	        								oneToNoneLikelihood,	// 4 - partner to none 
	        								bothToNoneLikelihood);	// 5 - bothToNone
	        double pick = main.uniform();
	        double curVal = 0;
	        int pickedIndex = -1;
	        PROB_LOOP:
	        for (int i = 0; i < probabilities.size(); i ++) {
	        	if (pick < curVal + probabilities.get(i)) {
	        		pickedIndex = i;
	        		break PROB_LOOP;
	        	}
	        	curVal += probabilities.get(i);
	        }
	        assert pickedIndex != -1;
	        if (pickedIndex == bothStayIndex) {
	        	// Nothing happens
	        } else if (pickedIndex == bothToNoneIndex) {
	        	double newStrictness = main.getConvertStrictness(unaffiliated);
	        	// TODO: Rerun prototype with fixed switching to none
	        	main.personReligiosityCache.reportCoupleSwitch(this.Affiliation, unaffiliated);
	        	main.personReligiosityCache.reportCoupleSwitch(person.Affiliation, unaffiliated);
	        	this.Affiliation = person.Affiliation = unaffiliated;
	        	this.strictness = person.strictness = newStrictness;
	        	for (Person agent : List.of(this, person)) {
	        		if (agent.supernaturalWorldview < main.highSNWCutoff) {
	        			agent.privatePractice /= 2;
	        			agent.importance /= 2;
	        		}
	        	}
	        	main.writeSwitch("Couple Both to None", before, this.toReligiosity());
	        	main.writeSwitch("Couple Both to None", beforeSpouse, person.toReligiosity());
	        } else if (pickedIndex == egoToNoneIndex || pickedIndex == partnerToNoneIndex) {
	        	Person toNone = pickedIndex == egoToNoneIndex ? person : this;
	        	PersonReligiosity beforeToNone = toNone.toReligiosity();
	        	main.personReligiosityCache.reportCoupleSwitch(toNone.Affiliation, unaffiliated);
	        	toNone.Affiliation = unaffiliated;
	        	toNone.strictness = main.getConvertStrictness(unaffiliated);
	        	toNone.publicPractice /= 2;
	        	if (toNone.supernaturalWorldview < main.highSNWCutoff) {
	        		toNone.privatePractice /= 2;
	        		toNone.importance /= 2;
	        	}
	        	main.writeSwitch("Couple One Only To None", beforeToNone, toNone.toReligiosity());
	        } else if (pickedIndex == egoConvertsIndex || pickedIndex == partnerConvertsIndex) {
	        	Person convert = pickedIndex == egoConvertsIndex ? person : this;
	        	Person converting = pickedIndex == egoConvertsIndex ? this : person;
	        	PersonReligiosity convertingBefore = converting.toReligiosity();
	        	
	        	main.personReligiosityCache.reportCoupleSwitch(convert.Affiliation, converting.Affiliation);
	        	
	        	convert.Affiliation = converting.Affiliation;
	        	convert.strictness = converting.strictness;
	        	convert.publicPractice = converting.publicPractice;
	        	convert.privatePractice = (convert.privatePractice + converting.privatePractice) / 2.0;
	        	main.writeSwitch("Couple Convert", convertingBefore, convert.toReligiosity());
	        } else {
	        	throw new IllegalStateException("Invalid index - should not be possible");
	        }    
		}
	} else {
		// One person is None and ther other is not
		Person religPartner = this.Affiliation == unaffiliated ? person : this;
		Person nonePartner = this.Affiliation == unaffiliated ? this : person;
		PersonReligiosity religPartnerBefore = religPartner.toReligiosity();
		PersonReligiosity nonePartnerBefore = nonePartner.toReligiosity();
		boolean isStronglyReligious = religPartner.importance > stronglyReligiousCutoff;
		if (isStronglyReligious) {
			double proportionOfNones = main.personReligiosityCache.getNonesProportion();
			if (proportionOfNones < 0.5) {
				// None partner converts to spouses affiliation
				main.personReligiosityCache.reportCoupleSwitch(nonePartner.Affiliation, religPartner.Affiliation);
				nonePartner.Affiliation = religPartner.Affiliation;
				nonePartner.strictness = religPartner.strictness;
				nonePartner.publicPractice = religPartner.publicPractice;
				nonePartner.privatePractice = (religPartner.privatePractice + nonePartner.privatePractice) / 2.0;
				nonePartner.supernaturalWorldview = (religPartner.supernaturalWorldview + nonePartner.supernaturalWorldview) / 2.0;
				nonePartner.importance = (religPartner.importance + nonePartner.importance) / 2.0;
				main.writeSwitch("Couple None to Strong Partner", nonePartnerBefore, nonePartner.toReligiosity());
			}
		} else {
			// Weakly religious and None
			double proportionOfNones = main.personReligiosityCache.getNonesProportion();
			// TODO: Parameterize?
			double lowCutoff = 1.0 / 3.0;
			double mediumCutoff = 2.0 / 3.0;
			if (proportionOfNones <= lowCutoff) {
				// None to weak affiliation
				main.personReligiosityCache.reportCoupleSwitch(nonePartner.Affiliation, religPartner.Affiliation);
				nonePartner.Affiliation = religPartner.Affiliation;
				nonePartner.strictness = religPartner.strictness;
				nonePartner.publicPractice = religPartner.publicPractice;
				nonePartner.privatePractice = (religPartner.privatePractice + nonePartner.privatePractice) / 2.0;
				nonePartner.supernaturalWorldview = (religPartner.supernaturalWorldview + nonePartner.supernaturalWorldview) / 2.0;
				nonePartner.importance = (religPartner.importance + nonePartner.importance) / 2.0;
				main.writeSwitch("Couple None to Weak Partner", nonePartnerBefore, nonePartner.toReligiosity());
			} else if (proportionOfNones <= mediumCutoff) {
				// Do nothing
			} else {
				main.personReligiosityCache.reportCoupleSwitch(religPartner.Affiliation, unaffiliated);
				religPartner.Affiliation = unaffiliated;
				religPartner.strictness = nonePartner.strictness;
				religPartner.publicPractice = nonePartner.publicPractice;
				religPartner.privatePractice = (religPartner.privatePractice + nonePartner.privatePractice) / 2.0;
				religPartner.supernaturalWorldview = (religPartner.supernaturalWorldview + nonePartner.supernaturalWorldview) / 2.0;
				religPartner.importance = (religPartner.importance + nonePartner.importance) / 2.0;
				main.writeSwitch("Couple Weak To None", religPartnerBefore, religPartner.toReligiosity());
			}
		}
	}
}





]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951641</Id>
					<Name><![CDATA[doInteractions]]></Name>
					<X>370</X><Y>920</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[if (    !((get_Main().toggYoungleInteractions && 12 <= this.Age && this.Age <= 25)
		|| (get_Main().toggleOlderInteraction &&
		   (this.Age == 30 || this.Age == 40 || this.Age== 55 || this.Age == 70)))) {
	return;
	} 

Main main = get_Main();
PersonReligiosity ego = this.toReligiosity();
List<Delta> interactionDeltas = main.
									personReligiosityCache
									.getInteractions(ego, main)
									.stream()
									// High level interaction
									.map(alterPR -> List.of(ego.getHighLevelInteractionType(alterPR, main), alterPR))
									// Low level interaction
									.map(hl_alterPR -> List.of(hl_alterPR.get(0), 
															   InteractionsUtils
															       .getLowLevelInteractionType((String) hl_alterPR.get(0), main, main),
															   hl_alterPR.get(1)))
									// To Delta
									.map(hl_ll_alterPR -> InteractionsUtils
															.getDeltaForInteraction(
																(String) hl_ll_alterPR.get(0), 
																(String) hl_ll_alterPR.get(1),
																(PersonReligiosity) ego, 
																(PersonReligiosity) hl_ll_alterPR.get(2),
																main, main))
									.collect(Collectors.toList());
									
if (interactionDeltas.isEmpty()) {
	traceln("Warning: empty interaction deltas for: " + ego.toHRString());
	return;
	//throw new IllegalStateException("Empty interaction deltas");
}

this.applyDeltas(interactionDeltas);]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951651</Id>
					<Name><![CDATA[addStrictness]]></Name>
					<X>200</X><Y>750</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[s]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[this.strictness = min(1.0, max(0.0, this.strictness + s));]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951653</Id>
					<Name><![CDATA[addAttitudes]]></Name>
					<X>200</X><Y>770</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[aff]]></Name>
						<Type><![CDATA[Affiliation]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[s]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[this.attitudes.merge(aff, s, (s1, s2) -> max(0.0, min(1.0, s1 + s2)));






]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951662</Id>
					<Name><![CDATA[addSwitch]]></Name>
					<X>200</X><Y>790</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[s]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[this.switchFrustration = min(1.0, max(0.0, this.switchFrustration + s));]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951664</Id>
					<Name><![CDATA[addDisaff]]></Name>
					<X>200</X><Y>810</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[s]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[this.disaffFrustration = min(1.0, max(0.0, this.disaffFrustration + s));]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951666</Id>
					<Name><![CDATA[addImportance]]></Name>
					<X>200</X><Y>915</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[s]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[this.importance = min(1.0, max(0.0, this.importance + s));]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951668</Id>
					<Name><![CDATA[addSupernatural]]></Name>
					<X>200</X><Y>895</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[s]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[this.supernaturalWorldview = min(1.0, max(0.0, this.supernaturalWorldview + s));]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951670</Id>
					<Name><![CDATA[addPrivate]]></Name>
					<X>200</X><Y>850</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[s]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[this.privatePractice = min(1.0, max(0.0, this.privatePractice + s));]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951672</Id>
					<Name><![CDATA[addPublic]]></Name>
					<X>200</X><Y>830</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[s]]></Name>
						<Type><![CDATA[double]]></Type>
					</Parameter>
					<Body><![CDATA[this.publicPractice = min(1.0, max(0.0, this.publicPractice + s));]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951674</Id>
					<Name><![CDATA[addAttitudes1]]></Name>
					<X>200</X><Y>930</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[entry]]></Name>
						<Type><![CDATA[Map.Entry<Affiliation, Double>]]></Type>
					</Parameter>
					<Body><![CDATA[this.addAttitudes(entry.getKey(), entry.getValue());]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951676</Id>
					<Name><![CDATA[applyDeltas]]></Name>
					<X>240</X><Y>920</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[interactionDeltas]]></Name>
						<Type><![CDATA[List<Delta>]]></Type>
					</Parameter>
					<Body><![CDATA[if (interactionDeltas.isEmpty()) {
	throw new IllegalStateException("Empty interaction deltas");
}

Optional<Delta> totalConversion = interactionDeltas.stream().filter(Delta::isTotalConversion).findFirst();
if (totalConversion.isPresent()) {
	get_Main().personReligiosityCache.reportTotalConversion(this.Affiliation, totalConversion.get().getAffiliationChange().get());
	this.Affiliation = totalConversion.get().getAffiliationChange().get();
	this.strictness = totalConversion.get().strictness().get();
	this.importance = totalConversion.get().importance().get();
	this.publicPractice = totalConversion.get().publicPractice().get();
	this.privatePractice = totalConversion.get().privatePractice().get();
	this.supernaturalWorldview = totalConversion.get().supernatural().get();
	this.switchFrustration = totalConversion.get().switchFrustration().get();
	this.disaffFrustration = totalConversion.get().disaff().get();
	this.attitudes = new HashMap<>(totalConversion.get().attitudeChanges());
	return;
}

Delta combined = interactionDeltas.stream().reduce((d1, d2) -> d1.combine(d2)).get();

combined.strictness().ifPresent(this::addStrictness);
combined.attitudeChanges().forEach(this::addAttitudes);
combined.switchFrustration().ifPresent(this::addSwitch);
combined.disaff().ifPresent(this::addDisaff);
combined.publicPractice().ifPresent(this::addPublic);
combined.privatePractice().ifPresent(this::addPrivate);
combined.supernatural().ifPresent(this::addSupernatural);
combined.importance().ifPresent(this::addImportance);]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951678</Id>
					<Name><![CDATA[doSwitching]]></Name>
					<X>510</X><Y>900</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[Main main = get_Main();

if (!(main.toggleOlderInteraction || main.toggYoungleInteractions)) {
	return;
}

PersonReligiosity before = this.toReligiosity();

double switchThreshold = main.switchThreshold;//DBUtils.getSwitchingThreshold(main);
double disaffThreshold = main.disaffThreshold;//DBUtils.getDisaffiliationThreshold(main);

double disaffExcess = this.Affiliation == unaffiliated
							? 0
							: this.disaffFrustration - disaffThreshold;
double switchExcess = this.switchFrustration - switchThreshold;

if (disaffExcess > 0 && disaffExcess > switchExcess) {
	// Disaffiliate
	main.personReligiosityCache.reportDisaffiliation(this.Affiliation);
	this.Affiliation = unaffiliated;
	this.strictness = main.getConvertStrictness(unaffiliated);
	this.disaffFrustration /= 2;
	
	PersonReligiosity after = this.toReligiosity();
	main.writeSwitch("disaffiliate", before, after);
	return;
}

if (switchExcess > 0) {
	// Switch
	Affiliation maxAff = null;
	double maxAtt = Double.NEGATIVE_INFINITY;
	for (Map.Entry<Affiliation, Double> attitudeEntry : this.attitudes.entrySet()) {
		if (attitudeEntry.getValue() > maxAtt) {
			maxAtt = attitudeEntry.getValue();
			maxAff = attitudeEntry.getKey();
		}
	}
	assert maxAff != null;
	
	if (maxAff == unaffiliated) {
		// SWITCHING to unaffiliated is slightly different than disaffiliation
		main.personReligiosityCache.reportSwitch(this.Affiliation, unaffiliated);
		this.Affiliation = unaffiliated;
		this.strictness = main.getConvertStrictness(unaffiliated);
		this.disaffFrustration /= 2;
		this.switchFrustration /= 2;
		PersonReligiosity after = this.toReligiosity();
		main.writeSwitch("switch_to_none", before, after);
		return;
	}
	
	// Switch within affiliation
	if (maxAff == this.Affiliation) {
		main.personReligiosityCache.reportSwitch(maxAff, maxAff);
	
		this.switchFrustration /= 2;
		this.disaffFrustration /= 2;
		double param = main.phase3Param();
		// Assign base value between 0 and 0.33
		// Wil assign offsets to other thirds stochastically
		double newStrictness = main.uniform() / 3.0;
		// Upper third will move to middle or bottom third
		if (this.strictness >= 2.0 / 3.0) {
			boolean goToMiddleThird = main.uniform() > param;
			if (goToMiddleThird) {
				newStrictness += 1.0 / 3.0;
			}
		} 
		// Middle third will move to upper or lower third
		else if (this.strictness >= 1.0 / 3.0) {
			boolean goToTopThird = main.uniform() > param;
			if (goToTopThird) {
				newStrictness += 2.0 / 3.0;
			}
		} 
		// Lower third will move to upper or middle third
		else {
			boolean goToTopThird = main.uniform() > param;
			if (goToTopThird) {
				newStrictness += 2.0 / 3.0;
			} else {
				newStrictness += 1.0 / 3.0;
			}
		}
		this.strictness = newStrictness;
		this.attitudeAdjustment();
		
		PersonReligiosity after = this.toReligiosity();
		main.writeSwitch("switch_within", before, after);
		
	} else {
		// Switch to new affiliation
		main.personReligiosityCache.reportSwitch(this.Affiliation, maxAff);
		this.Affiliation = maxAff;
		this.strictness = main.getConvertStrictness(maxAff);
		this.switchFrustration /= 2;
		this.disaffFrustration /= 2;
		this.attitudeAdjustment();
		
		PersonReligiosity after = this.toReligiosity();
		main.writeSwitch("switch_to_other_aff", before, after);
	}
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1697122951688</Id>
					<Name><![CDATA[attitudeAdjustment]]></Name>
					<X>540</X><Y>870</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[Main main = get_Main();

int agentStrictnessThird =  this.strictness < 1.0 / 3.0
						    					? 0
						    					: this.strictness < 2.0 / 3.0
						    						? 1
						    						: 2;
Optional<Map<Affiliation, Double>> avgAttitudesOptional = main.personReligiosityCache.getThirdsStrictnessAttitudeAverage(this.Affiliation, agentStrictnessThird);
if (avgAttitudesOptional.isPresent()) {
	Map<Affiliation, Double> avgAttitudes = avgAttitudesOptional.get();
	double selfAttitude = this.attitudes.get(this.Affiliation);
	double groupSelfAttitudeAvg = avgAttitudes.get(this.Affiliation);
	if (groupSelfAttitudeAvg > selfAttitude) {
		this.attitudes.put(this.Affiliation, 0.5 * (groupSelfAttitudeAvg + 1.0));
	}
}
Optional<Map<String, Double>> avgDimsOptional = main.personReligiosityCache.getThirdsStrictnessDimensionsAverage(this.Affiliation, agentStrictnessThird);
if (avgDimsOptional.isPresent()) {
	for (Map.Entry<String, Double> dimEntry : avgDimsOptional.get().entrySet()) {
		String s = dimEntry.getKey();
		if (s.equals(InteractionsUtils.PUBLIC)) {
			if (this.publicPractice < dimEntry.getValue()) {
				this.publicPractice = 0.5 * (dimEntry.getValue() + 1);
			} else {
				this.publicPractice = min(1.0, this.publicPractice + 0.1);
			}
		}
		if (s.equals(InteractionsUtils.PRIVATE)) {
			if (this.privatePractice < dimEntry.getValue()) {
				this.privatePractice = 0.5 * (dimEntry.getValue() + 1);
			}
		}
		if (s.equals(InteractionsUtils.SUPERNATURAL)) {
			if (this.supernaturalWorldview < dimEntry.getValue()) {
				this.supernaturalWorldview = 0.5 * (dimEntry.getValue() + 1);
			}
		}
		if (s.equals(InteractionsUtils.IMPORTANCE)) {
			if (this.importance < dimEntry.getValue()) {
				this.importance = 0.5 * (dimEntry.getValue() + 1);
			}
		}
	}
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1699647629524</Id>
					<Name><![CDATA[folkToOther]]></Name>
					<X>460</X><Y>770</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[if (Affiliation == folk_religions) {
	Affiliation = other_religions;
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1703796030874</Id>
					<Name><![CDATA[setAttitudesToDefaultFor]]></Name>
					<X>540</X><Y>930</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[aff]]></Name>
						<Type><![CDATA[Affiliation]]></Type>
					</Parameter>
					<Body><![CDATA[this.attitudes = get_Main().getDefaultAttitudesFromAff(aff);]]></Body>
				</Function>
			</Functions>
			<AgentLinks>
				<AgentLink>
					<Id>1494658786041</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<StatechartReference>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[Person]]></ClassName>
						<ItemName><![CDATA[statechart2]]></ItemName>
					</StatechartReference>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
				<AgentLink>
					<Id>1697122951719</Id>
					<Name><![CDATA[spouse]]></Name>
					<X>370</X><Y>710</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentReferenceId>1494658786011</AgentReferenceId>
					<AgentLinkBidirectional>false</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<ContainerLinks>
				<ContainerLink>
					<Id>1494665520173</Id>
					<Name><![CDATA[main]]></Name>
					<X>50</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
						<ClassName><![CDATA[Main]]></ClassName>
					</ActiveObjectClass>
				</ContainerLink>
			</ContainerLinks>

			<Presentation>
				<Level>
					<Id>1580971507799</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>ALWAYS_SHOW</LevelVisibility>

			<Presentation>
				<Group>
					<Id>1494658786013</Id>
					<Name><![CDATA[person]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>-20</X><Y>20</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>

			<Presentation>
				<Curve ControlPoints="true">
					<Id>1494658786015</Id>
					<Name><![CDATA[shapeBody]]></Name>
					<X>-2</X><Y>-7</Y>
					<Label><X>-20</X><Y>28</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor>-16777216</FillColor>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>4</Y><Z>0</Z></Point>
					   <Point><X>3</X><Y>2</Y><Z>0</Z></Point>
					   <Point><X>-1</X><Y>3</Y><Z>0</Z></Point>
					   <Point><X>-2</X><Y>3</Y><Z>0</Z></Point>
					   <Point><X>-2</X><Y>10</Y><Z>0</Z></Point>
					   <Point><X>-2</X><Y>11</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>11</Y><Z>0</Z></Point>
					   <Point><X>-1</X><Y>9</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>17</Y><Z>0</Z></Point>
					   <Point><X>1</X><Y>17</Y><Z>0</Z></Point>
					   <Point><X>3</X><Y>17</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>17</Y><Z>0</Z></Point>
					   <Point><X>5</X><Y>9</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>11</Y><Z>0</Z></Point>
					   <Point><X>6</X><Y>11</Y><Z>0</Z></Point>
					   <Point><X>6</X><Y>10</Y><Z>0</Z></Point>
					   <Point><X>6</X><Y>3</Y><Z>0</Z></Point>
					   <Point><X>5</X><Y>3</Y><Z>0</Z></Point>
					   <Point><X>1</X><Y>2</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>4</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>-3</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>-3</Y><Z>0</Z></Point>
					</Points>
					<Closed>true</Closed>
				</Curve>
			</Presentation>

				</Group>
				<Rectangle>
					<Id>1697122951621</Id>
					<Name><![CDATA[rectangle1]]></Name>
					<X>350</X><Y>640</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>300</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Rectangle>
					<Id>1697122951629</Id>
					<Name><![CDATA[rectangle]]></Name>
					<X>30</X><Y>640</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>300</Width>
					<Height>300</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1697122951631</Id>
					<Name><![CDATA[text]]></Name>
					<X>35</X><Y>645</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Phase 3]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1697122951633</Id>
					<Name><![CDATA[text1]]></Name>
					<X>360</X><Y>650</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Kinship]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

				</Level>
			</Presentation>

		</ActiveObjectClass>
	</ActiveObjectClasses>	
	<DifferentialEquationsMethod>EULER</DifferentialEquationsMethod>
	<MixedEquationsMethod>RK45_NEWTON</MixedEquationsMethod>
	<AlgebraicEquationsMethod>MODIFIED_NEWTON</AlgebraicEquationsMethod>
	<AbsoluteAccuracy>1.0E-5</AbsoluteAccuracy>
	<FixedTimeStep>0.001</FixedTimeStep>
	<RelativeAccuracy>1.0E-5</RelativeAccuracy>
	<TimeAccuracy>1.0E-5</TimeAccuracy>
	<Frame>
		<Width>1000</Width>
		<Height>960</Height>
	</Frame>
	<Database>
		<Logging>false</Logging>
		<AutoExport>false</AutoExport>
		<ShutdownCompact>false</ShutdownCompact>
		<ImportSettings>
			<ExternalConnection>
				<Id>1692633730841</Id>
				<Name><![CDATA[database]]></Name>
				<X>0</X><Y>0</Y>
				<Label><X>10</X><Y>0</Y></Label>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>true</PresentationFlag>
				<ShowLabel>true</ShowLabel>
				<DatabaseType>EXCEL_ACCESS</DatabaseType>
				<ConnectionURL><![CDATA[]]></ConnectionURL>
				<ConnectOnStartup>true</ConnectOnStartup>
				<DatabaseName><![CDATA[]]></DatabaseName>
				<ResourceReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[/home/research1/Downloads/Tables(1).xlsx]]></ClassName>
				</ResourceReference>
				<Host><![CDATA[localhost]]></Host>
				<JdbcDriverClassName><![CDATA[net.sourceforge.jtds.jdbc.Driver]]></JdbcDriverClassName>
				<Login><![CDATA[]]></Login>
				<Password><![CDATA[]]></Password>
			</ExternalConnection>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[sex_ratio_at_birth]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["sex_ratio_at_birth"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[death_rate_survival_ratio]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["death_rate_survival_ratio"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[starting_populations]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["starting_populations"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[un_survival_ratio]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["un_survival_ratio"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[net_in_mig_age_gender_prop]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["net_in_mig_age_gender_prop"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[pew_survival_ratio]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["pew_survival_ratio"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[init_aff_dist_2010]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["init_aff_dist_2010"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[net_in_migration_per_year]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["net_in_migration_per_year"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[death_count]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["death_count"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[death_rate_cdr]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["death_rate_cdr"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[migration_data_per_cohort_peri]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["migration_data_per_cohort_peri"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[net_out_migration_per_year]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["net_out_migration_per_year"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[net_out_migration_per_period]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["net_out_migration_per_period"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[birth_count]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["birth_count"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[init_stats]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["init_stats"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[net_in_migration_per_period]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["net_in_migration_per_period"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[pew_fertility_rate]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["pew_fertility_rate"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[net_out_mig_age_gender_prop]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["net_out_mig_age_gender_prop"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[init_age_dist_1950_un_mal]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["init_age_dist_1950_un_mal"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[init_age_dist_2010_pew_mal]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["init_age_dist_2010_pew_mal"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[init_age_dist_1950_un_fem]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["init_age_dist_1950_un_fem"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[fertility_rate]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["fertility_rate"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
			<TableImportSettings>
				<TableReference>
					<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
					<ClassName><![CDATA[init_age_dist_2010_pew_fem]]></ClassName>
				</TableReference>
				<ConnectionIndex>0</ConnectionIndex>
				<ExternalTableName><![CDATA["init_age_dist_2010_pew_fem"]]></ExternalTableName>
				<AutoImport>false</AutoImport>
			</TableImportSettings>
		</ImportSettings>
		<ExportSettings>
		</ExportSettings>
	</Database>
	
	<RunConfiguration ActiveObjectClassId="1494655951608">
		<Id>1494655951639</Id>
		<Name><![CDATA[RunConfiguration]]></Name>
		<MaximumMemory>512</MaximumMemory>
		<ModelTimeProperties>
			<StopOption><![CDATA[Stop at specified time]]></StopOption>
			<InitialDate><![CDATA[1494633600000]]></InitialDate>	
			<InitialTime><![CDATA[0.0]]></InitialTime>	
			<FinalDate><![CDATA[1497312000000]]></FinalDate>	
			<FinalTime><![CDATA[100.0]]></FinalTime>	
		</ModelTimeProperties>
		<AnimationProperties>
			<StopNever>true</StopNever>
			<ExecutionMode>realTimeScaled</ExecutionMode>
			<RealTimeScale>10.0</RealTimeScale>
			<EnableZoomAndPanning>true</EnableZoomAndPanning>
			<EnableDeveloperPanel>false</EnableDeveloperPanel>
			<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
		</AnimationProperties>
		<Inputs>		
		</Inputs>
		<Outputs>
		</Outputs>
	</RunConfiguration>
	<Experiments>	
		<!--   =========   Simulation Experiment   ========  -->
		<SimulationExperiment ActiveObjectClassId="1494655951608">
			<Id>1697127584369</Id>
			<Name><![CDATA[Testing]]></Name>
			<Import><![CDATA[import java.util.function.Predicate;]]></Import>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<MaximumMemory>512</MaximumMemory>
			<RandomNumberGenerationType>fixedSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>

			<Presentation>
				<Text>
					<Id>1697127584371</Id>
					<Name><![CDATA[text]]></Name>
					<X>50</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[Cohort_Component_Method]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>24</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

			<Parameters>			
				<Parameter>
					<ParameterName><![CDATA[AnnualCSV_FileName]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[Annual_Individual_CSV_FileName]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[SimulationID]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[Annual_Data_Collect]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[Annual_Club_CSV_FileName]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[LHS_Experiment_Number]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_TopDownInitialAgents]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_FiveYearStep]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[Death_Rate_Source]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[Birth_Rate_Source]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_TopDown]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_AgentInitializationPerAgeYear]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[Starting_Period]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_NumberOfInitialAgents]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[1]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_splitFertility]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[country_id]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_ForceUseSplitAge]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[starting_population_size_index]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[starting_population_sizes]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_ImmigrantsImmuneFromDeath]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[skipExperimentFilter]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_isPhase2]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_debugAff]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[c_swing]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[isTesting]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[true]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[totalConversionChance]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[numInteractionsPerStep]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[couplingAgeOlderAmountBias]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[secRXDimensionsIncrementDenominator]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[attitudeIncrement]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[attitudeSelfDecrement]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[dimensionsIncrement]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[highSNWCutoff]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[stronglyReligiousCutoff]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[minStrictness]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[modeStrictness]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[maxStrictness]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_InteractionsType]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_inheritanceType]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_coupleSwitching]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[secularEducation]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[religiousEducation]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[switchThreshold]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[disaffThreshold]]></ParameterName>
				</Parameter>
			</Parameters>			
			<PresentationProperties>
				<EnableZoomAndPanning>true</EnableZoomAndPanning>
				<ExecutionMode><![CDATA[virtualTime]]></ExecutionMode>
				<Title><![CDATA[Cohort_Component_Method : Testing]]></Title>	
				<EnableDeveloperPanel>true</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
				<RealTimeScale>1.0</RealTimeScale>
			</PresentationProperties>
			<ModelTimeProperties>
				<StopOption><![CDATA[Stop at specified time]]></StopOption>
				<InitialDate><![CDATA[1697068800000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[1728604800000]]></FinalDate>	
				<FinalTime><![CDATA[1.0]]></FinalTime>	
			</ModelTimeProperties>
			<BypassInitialScreen>true</BypassInitialScreen>
		</SimulationExperiment>
		<!--   =========   Simulation Experiment   ========  -->
		<SimulationExperiment ActiveObjectClassId="1494655951608">
			<Id>1699641374617</Id>
			<Name><![CDATA[Simulation]]></Name>
			<Import><![CDATA[import java.util.function.*;
]]></Import>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<MaximumMemory>16384</MaximumMemory>
			<RandomNumberGenerationType>fixedSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>

			<Presentation>
				<Text>
					<Id>1699641374619</Id>
					<Name><![CDATA[text]]></Name>
					<X>50</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[Cohort_Component_Method]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>24</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

			<Parameters>			
				<Parameter>
					<ParameterName><![CDATA[AnnualCSV_FileName]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA["CRED_Annual_Stats.csv"]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[Annual_Individual_CSV_FileName]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[SimulationID]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[Annual_Data_Collect]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[true]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[Annual_Club_CSV_FileName]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[LHS_Experiment_Number]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_TopDownInitialAgents]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[1
]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_FiveYearStep]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[1
]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[Death_Rate_Source]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[Birth_Rate_Source]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_TopDown]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[1
]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_AgentInitializationPerAgeYear]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[Starting_Period]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_NumberOfInitialAgents]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[40000
]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_splitFertility]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[1
]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[country_id]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[DBUtils.COUNTRY_ID_INDIA
]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_ForceUseSplitAge]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[1]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[starting_population_size_index]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[starting_population_sizes]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_ImmigrantsImmuneFromDeath]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[skipExperimentFilter]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_isPhase2]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[1]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_debugAff]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[1]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[c_swing]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[isTesting]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[totalConversionChance]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[numInteractionsPerStep]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[couplingAgeOlderAmountBias]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[secRXDimensionsIncrementDenominator]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[attitudeIncrement]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[attitudeSelfDecrement]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[dimensionsIncrement]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[highSNWCutoff]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[stronglyReligiousCutoff]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[minStrictness]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[modeStrictness]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[maxStrictness]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_InteractionsType]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_inheritanceType]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[input_coupleSwitching]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[secularEducation]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[0.1]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[religiousEducation]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA[0.5]]></Code>
					</ParameterValue>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[switchThreshold]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[disaffThreshold]]></ParameterName>
				</Parameter>
			</Parameters>			
			<PresentationProperties>
				<EnableZoomAndPanning>true</EnableZoomAndPanning>
				<ExecutionMode><![CDATA[realTimeScaled]]></ExecutionMode>
				<Title><![CDATA[Cohort_Component_Method : Simulation]]></Title>	
				<EnableDeveloperPanel>true</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
				<RealTimeScale>1.0</RealTimeScale>
			</PresentationProperties>
			<ModelTimeProperties>
				<StopOption><![CDATA[Stop at specified date]]></StopOption>
				<InitialDate><![CDATA[1262304000000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[2524672800000]]></FinalDate>	
				<FinalTime><![CDATA[40.02945205479452]]></FinalTime>	
			</ModelTimeProperties>
			<BypassInitialScreen>true</BypassInitialScreen>
		</SimulationExperiment>
		<!--   =========  Optimization Experiment   ========  -->
		<OptimizationExperiment ActiveObjectClassId="1494655951608">
			<Id>1699809462101</Id>
			<Name><![CDATA[Optimization]]></Name>
			<AdditionalClassCode><![CDATA[public static AtomicInteger runId = new AtomicInteger(1);

]]></AdditionalClassCode>
			<Import><![CDATA[import java.util.function.*;
import java.util.concurrent.atomic.AtomicInteger;]]></Import>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<MaximumMemory>100000</MaximumMemory>
			<RandomNumberGenerationType>fixedSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<BeforeEachExperimentRunCode><![CDATA[datasetCurrentObjective.reset();
datasetBestInfeasibleObjective.reset();
datasetBestFeasibleObjective.reset();
]]></BeforeEachExperimentRunCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1699902077520</Id>
					<Name><![CDATA[bestInfeasibleObjective]]></Name>
					<X>-350</X><Y>120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[Double.POSITIVE_INFINITY]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
			</Variables>
			<AnalysisData>
    			<DataSet>
					<Id>1699902077518</Id>
					<Name><![CDATA[datasetCurrentObjective]]></Name>
					<X>-350</X><Y>50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1699948800000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</RecurrenceCode>
					<FreezeXAxis>true</FreezeXAxis>
					<VerticalAxisExpression><![CDATA[getCurrentObjectiveValue()]]></VerticalAxisExpression>
					<SamplesToKeep>500</SamplesToKeep>
				</DataSet>
    			<DataSet>
					<Id>1699902077519</Id>
					<Name><![CDATA[datasetBestInfeasibleObjective]]></Name>
					<X>-350</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>false</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1699948800000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</RecurrenceCode>
					<FreezeXAxis>true</FreezeXAxis>
					<VerticalAxisExpression><![CDATA[bestInfeasibleObjective]]></VerticalAxisExpression>
					<SamplesToKeep>500</SamplesToKeep>
				</DataSet>
    			<DataSet>
					<Id>1699902077522</Id>
					<Name><![CDATA[datasetBestFeasibleObjective]]></Name>
					<X>-350</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>false</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1699948800000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</RecurrenceCode>
					<FreezeXAxis>true</FreezeXAxis>
					<VerticalAxisExpression><![CDATA[getBestObjectiveValue()]]></VerticalAxisExpression>
					<SamplesToKeep>500</SamplesToKeep>
				</DataSet>
			</AnalysisData>

			<Presentation>
				<Text>
					<Id>1699902077345</Id>
					<Name><![CDATA[text]]></Name>
					<X>40</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[Cohort_Component_Method : Optimization]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>24</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077346</Id>
					<Name><![CDATA[text1]]></Name>
					<X>240</X><Y>80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12566464</Color>
					<Text><![CDATA[Current]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077347</Id>
					<Name><![CDATA[text2]]></Name>
					<X>330</X><Y>80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12566464</Color>
					<Text><![CDATA[Best]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Line>
					<Id>1699902077348</Id>
					<Name><![CDATA[line]]></Name>
					<X>40</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>2</LineWidth>
					<LineColor>-12566464</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<Dx>310</Dx>
					<Dy>0</Dy>
					<Dz>0</Dz>
				</Line>
				<Text>
					<Id>1699902077349</Id>
					<Name><![CDATA[text3]]></Name>
					<X>50</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[Iterations completed:]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077350</Id>
					<Name><![CDATA[text4]]></Name>
					<X>240</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getNumberOfCompletedIterations() )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077351</Id>
					<Name><![CDATA[text5]]></Name>
					<X>240</X><Y>119</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0 && !isCurrentSolutionFeasible()]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-65536</Color>
					<Text><![CDATA[infeasible]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077352</Id>
					<Name><![CDATA[text6]]></Name>
					<X>330</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format(getBestIteration())]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077353</Id>
					<Name><![CDATA[text7]]></Name>
					<X>330</X><Y>119</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0 && !isBestSolutionFeasible()]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-65536</Color>
					<Text><![CDATA[infeasible]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077354</Id>
					<Name><![CDATA[rectangle]]></Name>
					<X>40</X><Y>130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077355</Id>
					<Name><![CDATA[text8]]></Name>
					<X>50</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[Objective:]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077356</Id>
					<Name><![CDATA[text9]]></Name>
					<X>240</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format(getCurrentObjectiveValue())]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077357</Id>
					<Name><![CDATA[text10]]></Name>
					<X>330</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format(getBestObjectiveValue())]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Line>
					<Id>1699902077358</Id>
					<Name><![CDATA[line1]]></Name>
					<X>115</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>2</LineWidth>
					<LineColor>-12566464</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<Dx>0</Dx>
					<Dy>15</Dy>
					<Dz>0</Dz>
				</Line>
				<Polyline>
					<Id>1699902077359</Id>
					<Name><![CDATA[polyline]]></Name>
					<X>110</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>2</LineWidth>
					<LineColor>-12566464</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>5</X><Y>5</Y><Z>0</Z></Point>
					   <Point><X>10</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Text>
					<Id>1699902077360</Id>
					<Name><![CDATA[text11]]></Name>
					<X>50</X><Y>180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12566464</Color>
					<Text><![CDATA[Parameters]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Line>
					<Id>1699902077362</Id>
					<Name><![CDATA[line2]]></Name>
					<X>40</X><Y>200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>2</LineWidth>
					<LineColor>-12566464</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<Dx>310</Dx>
					<Dy>0</Dy>
					<Dz>0</Dz>
				</Line>
				<Text>
					<Id>1699902077363</Id>
					<Name><![CDATA[text12]]></Name>
					<X>50</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[AnnualCSV_FileName]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077364</Id>
					<Name><![CDATA[text13]]></Name>
					<X>240</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( AnnualCSV_FileName )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077365</Id>
					<Name><![CDATA[text14]]></Name>
					<X>330</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( AnnualCSV_FileName )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077366</Id>
					<Name><![CDATA[rectangle1]]></Name>
					<X>40</X><Y>230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077367</Id>
					<Name><![CDATA[text15]]></Name>
					<X>50</X><Y>240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[Annual_Individual_CSV_FileName]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077368</Id>
					<Name><![CDATA[text16]]></Name>
					<X>240</X><Y>240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( Annual_Individual_CSV_FileName )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077369</Id>
					<Name><![CDATA[text17]]></Name>
					<X>330</X><Y>240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( Annual_Individual_CSV_FileName )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077370</Id>
					<Name><![CDATA[text18]]></Name>
					<X>50</X><Y>270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[SimulationID]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077371</Id>
					<Name><![CDATA[text19]]></Name>
					<X>240</X><Y>270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( SimulationID )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077372</Id>
					<Name><![CDATA[text20]]></Name>
					<X>330</X><Y>270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( SimulationID )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077373</Id>
					<Name><![CDATA[rectangle2]]></Name>
					<X>40</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077374</Id>
					<Name><![CDATA[text21]]></Name>
					<X>50</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[Annual_Data_Collect]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077375</Id>
					<Name><![CDATA[text22]]></Name>
					<X>240</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( Annual_Data_Collect )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077376</Id>
					<Name><![CDATA[text23]]></Name>
					<X>330</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( Annual_Data_Collect )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077377</Id>
					<Name><![CDATA[text24]]></Name>
					<X>50</X><Y>330</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[Annual_Club_CSV_FileName]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077378</Id>
					<Name><![CDATA[text25]]></Name>
					<X>240</X><Y>330</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( Annual_Club_CSV_FileName )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077379</Id>
					<Name><![CDATA[text26]]></Name>
					<X>330</X><Y>330</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( Annual_Club_CSV_FileName )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077380</Id>
					<Name><![CDATA[rectangle3]]></Name>
					<X>40</X><Y>350</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077381</Id>
					<Name><![CDATA[text27]]></Name>
					<X>50</X><Y>360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[LHS_Experiment_Number]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077382</Id>
					<Name><![CDATA[text28]]></Name>
					<X>240</X><Y>360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( LHS_Experiment_Number )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077383</Id>
					<Name><![CDATA[text29]]></Name>
					<X>330</X><Y>360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( LHS_Experiment_Number )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077384</Id>
					<Name><![CDATA[text30]]></Name>
					<X>50</X><Y>390</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[input_TopDownInitialAgents]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077385</Id>
					<Name><![CDATA[text31]]></Name>
					<X>240</X><Y>390</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_TopDownInitialAgents )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077386</Id>
					<Name><![CDATA[text32]]></Name>
					<X>330</X><Y>390</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_TopDownInitialAgents )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077387</Id>
					<Name><![CDATA[rectangle4]]></Name>
					<X>40</X><Y>410</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077388</Id>
					<Name><![CDATA[text33]]></Name>
					<X>50</X><Y>420</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[input_FiveYearStep]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077389</Id>
					<Name><![CDATA[text34]]></Name>
					<X>240</X><Y>420</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_FiveYearStep )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077390</Id>
					<Name><![CDATA[text35]]></Name>
					<X>330</X><Y>420</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_FiveYearStep )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077391</Id>
					<Name><![CDATA[text36]]></Name>
					<X>50</X><Y>450</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[Death_Rate_Source]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077392</Id>
					<Name><![CDATA[text37]]></Name>
					<X>240</X><Y>450</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( Death_Rate_Source )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077393</Id>
					<Name><![CDATA[text38]]></Name>
					<X>330</X><Y>450</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( Death_Rate_Source )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077394</Id>
					<Name><![CDATA[rectangle5]]></Name>
					<X>40</X><Y>470</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077395</Id>
					<Name><![CDATA[text39]]></Name>
					<X>50</X><Y>480</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[Birth_Rate_Source]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077396</Id>
					<Name><![CDATA[text40]]></Name>
					<X>240</X><Y>480</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( Birth_Rate_Source )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077397</Id>
					<Name><![CDATA[text41]]></Name>
					<X>330</X><Y>480</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( Birth_Rate_Source )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077398</Id>
					<Name><![CDATA[text42]]></Name>
					<X>50</X><Y>510</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[input_TopDown]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077399</Id>
					<Name><![CDATA[text43]]></Name>
					<X>240</X><Y>510</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_TopDown )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077400</Id>
					<Name><![CDATA[text44]]></Name>
					<X>330</X><Y>510</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_TopDown )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077401</Id>
					<Name><![CDATA[rectangle6]]></Name>
					<X>40</X><Y>530</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077402</Id>
					<Name><![CDATA[text45]]></Name>
					<X>50</X><Y>540</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[input_AgentInitializationPerAgeYear]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077403</Id>
					<Name><![CDATA[text46]]></Name>
					<X>240</X><Y>540</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_AgentInitializationPerAgeYear )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077404</Id>
					<Name><![CDATA[text47]]></Name>
					<X>330</X><Y>540</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_AgentInitializationPerAgeYear )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077405</Id>
					<Name><![CDATA[text48]]></Name>
					<X>50</X><Y>570</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[Starting_Period]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077406</Id>
					<Name><![CDATA[text49]]></Name>
					<X>240</X><Y>570</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( Starting_Period )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077407</Id>
					<Name><![CDATA[text50]]></Name>
					<X>330</X><Y>570</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( Starting_Period )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077408</Id>
					<Name><![CDATA[rectangle7]]></Name>
					<X>40</X><Y>590</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077409</Id>
					<Name><![CDATA[text51]]></Name>
					<X>50</X><Y>600</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[input_NumberOfInitialAgents]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077410</Id>
					<Name><![CDATA[text52]]></Name>
					<X>240</X><Y>600</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_NumberOfInitialAgents )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077411</Id>
					<Name><![CDATA[text53]]></Name>
					<X>330</X><Y>600</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_NumberOfInitialAgents )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077412</Id>
					<Name><![CDATA[text54]]></Name>
					<X>50</X><Y>630</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[input_splitFertility]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077413</Id>
					<Name><![CDATA[text55]]></Name>
					<X>240</X><Y>630</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_splitFertility )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077414</Id>
					<Name><![CDATA[text56]]></Name>
					<X>330</X><Y>630</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_splitFertility )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077415</Id>
					<Name><![CDATA[rectangle8]]></Name>
					<X>40</X><Y>650</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077416</Id>
					<Name><![CDATA[text57]]></Name>
					<X>50</X><Y>660</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[country_id]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077417</Id>
					<Name><![CDATA[text58]]></Name>
					<X>240</X><Y>660</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( country_id )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077418</Id>
					<Name><![CDATA[text59]]></Name>
					<X>330</X><Y>660</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( country_id )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077419</Id>
					<Name><![CDATA[text60]]></Name>
					<X>50</X><Y>690</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[input_ForceUseSplitAge]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077420</Id>
					<Name><![CDATA[text61]]></Name>
					<X>240</X><Y>690</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_ForceUseSplitAge )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077421</Id>
					<Name><![CDATA[text62]]></Name>
					<X>330</X><Y>690</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_ForceUseSplitAge )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077422</Id>
					<Name><![CDATA[rectangle9]]></Name>
					<X>40</X><Y>710</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077423</Id>
					<Name><![CDATA[text63]]></Name>
					<X>50</X><Y>720</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[starting_population_size_index]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077424</Id>
					<Name><![CDATA[text64]]></Name>
					<X>240</X><Y>720</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( starting_population_size_index )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077425</Id>
					<Name><![CDATA[text65]]></Name>
					<X>330</X><Y>720</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( starting_population_size_index )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077426</Id>
					<Name><![CDATA[text66]]></Name>
					<X>50</X><Y>750</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[starting_population_sizes]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077427</Id>
					<Name><![CDATA[text67]]></Name>
					<X>240</X><Y>750</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( starting_population_sizes )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077428</Id>
					<Name><![CDATA[text68]]></Name>
					<X>330</X><Y>750</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( starting_population_sizes )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077429</Id>
					<Name><![CDATA[rectangle10]]></Name>
					<X>40</X><Y>770</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077430</Id>
					<Name><![CDATA[text69]]></Name>
					<X>50</X><Y>780</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[input_ImmigrantsImmuneFromDeath]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077431</Id>
					<Name><![CDATA[text70]]></Name>
					<X>240</X><Y>780</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_ImmigrantsImmuneFromDeath )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077432</Id>
					<Name><![CDATA[text71]]></Name>
					<X>330</X><Y>780</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_ImmigrantsImmuneFromDeath )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077433</Id>
					<Name><![CDATA[text72]]></Name>
					<X>50</X><Y>810</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[skipExperimentFilter]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077434</Id>
					<Name><![CDATA[text73]]></Name>
					<X>240</X><Y>810</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( skipExperimentFilter )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077435</Id>
					<Name><![CDATA[text74]]></Name>
					<X>330</X><Y>810</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[String.valueOf( skipExperimentFilter )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077436</Id>
					<Name><![CDATA[rectangle11]]></Name>
					<X>40</X><Y>830</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077437</Id>
					<Name><![CDATA[text75]]></Name>
					<X>50</X><Y>840</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[input_isPhase2]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077438</Id>
					<Name><![CDATA[text76]]></Name>
					<X>240</X><Y>840</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_isPhase2 )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077439</Id>
					<Name><![CDATA[text77]]></Name>
					<X>330</X><Y>840</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_isPhase2 )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077440</Id>
					<Name><![CDATA[text78]]></Name>
					<X>50</X><Y>870</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[input_debugAff]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077441</Id>
					<Name><![CDATA[text79]]></Name>
					<X>240</X><Y>870</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_debugAff )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077442</Id>
					<Name><![CDATA[text80]]></Name>
					<X>330</X><Y>870</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_debugAff )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077443</Id>
					<Name><![CDATA[rectangle12]]></Name>
					<X>40</X><Y>890</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077444</Id>
					<Name><![CDATA[text81]]></Name>
					<X>50</X><Y>900</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[c_swing]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077445</Id>
					<Name><![CDATA[text82]]></Name>
					<X>240</X><Y>900</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_c_swing ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077446</Id>
					<Name><![CDATA[text83]]></Name>
					<X>330</X><Y>900</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_c_swing ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077447</Id>
					<Name><![CDATA[text84]]></Name>
					<X>50</X><Y>930</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[isTesting]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077448</Id>
					<Name><![CDATA[text85]]></Name>
					<X>240</X><Y>930</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( isTesting )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077449</Id>
					<Name><![CDATA[text86]]></Name>
					<X>330</X><Y>930</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( isTesting )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077450</Id>
					<Name><![CDATA[rectangle13]]></Name>
					<X>40</X><Y>950</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077451</Id>
					<Name><![CDATA[text87]]></Name>
					<X>50</X><Y>960</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[totalConversionChance]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077452</Id>
					<Name><![CDATA[text88]]></Name>
					<X>240</X><Y>960</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_totalConversionChance ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077453</Id>
					<Name><![CDATA[text89]]></Name>
					<X>330</X><Y>960</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_totalConversionChance ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077454</Id>
					<Name><![CDATA[text90]]></Name>
					<X>50</X><Y>990</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[numInteractionsPerStep]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077455</Id>
					<Name><![CDATA[text91]]></Name>
					<X>240</X><Y>990</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_numInteractionsPerStep ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077456</Id>
					<Name><![CDATA[text92]]></Name>
					<X>330</X><Y>990</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_numInteractionsPerStep ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077457</Id>
					<Name><![CDATA[rectangle14]]></Name>
					<X>40</X><Y>1010</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077458</Id>
					<Name><![CDATA[text93]]></Name>
					<X>50</X><Y>1020</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[couplingAgeOlderAmountBias]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077459</Id>
					<Name><![CDATA[text94]]></Name>
					<X>240</X><Y>1020</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( couplingAgeOlderAmountBias )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077460</Id>
					<Name><![CDATA[text95]]></Name>
					<X>330</X><Y>1020</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( couplingAgeOlderAmountBias )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077461</Id>
					<Name><![CDATA[text96]]></Name>
					<X>50</X><Y>1050</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[secRXDimensionsIncrementDenominator]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077462</Id>
					<Name><![CDATA[text97]]></Name>
					<X>240</X><Y>1050</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_secRXDimensionsIncrementDenominator ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077463</Id>
					<Name><![CDATA[text98]]></Name>
					<X>330</X><Y>1050</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_secRXDimensionsIncrementDenominator ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077464</Id>
					<Name><![CDATA[rectangle15]]></Name>
					<X>40</X><Y>1070</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077465</Id>
					<Name><![CDATA[text99]]></Name>
					<X>50</X><Y>1080</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[attitudeIncrement]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077466</Id>
					<Name><![CDATA[text100]]></Name>
					<X>240</X><Y>1080</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_attitudeIncrement ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077467</Id>
					<Name><![CDATA[text101]]></Name>
					<X>330</X><Y>1080</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_attitudeIncrement ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077468</Id>
					<Name><![CDATA[text102]]></Name>
					<X>50</X><Y>1110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[attitudeSelfDecrement]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077469</Id>
					<Name><![CDATA[text103]]></Name>
					<X>240</X><Y>1110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_attitudeSelfDecrement ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077470</Id>
					<Name><![CDATA[text104]]></Name>
					<X>330</X><Y>1110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_attitudeSelfDecrement ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077471</Id>
					<Name><![CDATA[rectangle16]]></Name>
					<X>40</X><Y>1130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077472</Id>
					<Name><![CDATA[text105]]></Name>
					<X>50</X><Y>1140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[dimensionsIncrement]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077473</Id>
					<Name><![CDATA[text106]]></Name>
					<X>240</X><Y>1140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_dimensionsIncrement ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077474</Id>
					<Name><![CDATA[text107]]></Name>
					<X>330</X><Y>1140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_dimensionsIncrement ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077475</Id>
					<Name><![CDATA[text108]]></Name>
					<X>50</X><Y>1170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[highSNWCutoff]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077476</Id>
					<Name><![CDATA[text109]]></Name>
					<X>240</X><Y>1170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_highSNWCutoff ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077477</Id>
					<Name><![CDATA[text110]]></Name>
					<X>330</X><Y>1170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_highSNWCutoff ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077478</Id>
					<Name><![CDATA[rectangle17]]></Name>
					<X>40</X><Y>1190</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077479</Id>
					<Name><![CDATA[text111]]></Name>
					<X>50</X><Y>1200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[stronglyReligiousCutoff]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077480</Id>
					<Name><![CDATA[text112]]></Name>
					<X>240</X><Y>1200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_stronglyReligiousCutoff ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077481</Id>
					<Name><![CDATA[text113]]></Name>
					<X>330</X><Y>1200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_stronglyReligiousCutoff ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077482</Id>
					<Name><![CDATA[text114]]></Name>
					<X>50</X><Y>1230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[minStrictness]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077483</Id>
					<Name><![CDATA[text115]]></Name>
					<X>240</X><Y>1230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( minStrictness )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077484</Id>
					<Name><![CDATA[text116]]></Name>
					<X>330</X><Y>1230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( minStrictness )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077485</Id>
					<Name><![CDATA[rectangle18]]></Name>
					<X>40</X><Y>1250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077486</Id>
					<Name><![CDATA[text117]]></Name>
					<X>50</X><Y>1260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[modeStrictness]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077487</Id>
					<Name><![CDATA[text118]]></Name>
					<X>240</X><Y>1260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_modeStrictness ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077488</Id>
					<Name><![CDATA[text119]]></Name>
					<X>330</X><Y>1260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_modeStrictness ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077489</Id>
					<Name><![CDATA[text120]]></Name>
					<X>50</X><Y>1290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[maxStrictness]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077490</Id>
					<Name><![CDATA[text121]]></Name>
					<X>240</X><Y>1290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( maxStrictness )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077491</Id>
					<Name><![CDATA[text122]]></Name>
					<X>330</X><Y>1290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( maxStrictness )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077492</Id>
					<Name><![CDATA[rectangle19]]></Name>
					<X>40</X><Y>1310</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077493</Id>
					<Name><![CDATA[text123]]></Name>
					<X>50</X><Y>1320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[input_InteractionsType]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077494</Id>
					<Name><![CDATA[text124]]></Name>
					<X>240</X><Y>1320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_InteractionsType )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077495</Id>
					<Name><![CDATA[text125]]></Name>
					<X>330</X><Y>1320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_InteractionsType )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077496</Id>
					<Name><![CDATA[text126]]></Name>
					<X>50</X><Y>1350</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[input_inheritanceType]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077497</Id>
					<Name><![CDATA[text127]]></Name>
					<X>240</X><Y>1350</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_inheritanceType )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077498</Id>
					<Name><![CDATA[text128]]></Name>
					<X>330</X><Y>1350</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_inheritanceType )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077499</Id>
					<Name><![CDATA[rectangle20]]></Name>
					<X>40</X><Y>1370</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077500</Id>
					<Name><![CDATA[text129]]></Name>
					<X>50</X><Y>1380</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12171190</Color>
					<Text><![CDATA[input_coupleSwitching]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077501</Id>
					<Name><![CDATA[text130]]></Name>
					<X>240</X><Y>1380</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_coupleSwitching )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077502</Id>
					<Name><![CDATA[text131]]></Name>
					<X>330</X><Y>1380</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( input_coupleSwitching )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077503</Id>
					<Name><![CDATA[text132]]></Name>
					<X>50</X><Y>1410</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[secularEducation]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077504</Id>
					<Name><![CDATA[text133]]></Name>
					<X>240</X><Y>1410</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_secularEducation ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077505</Id>
					<Name><![CDATA[text134]]></Name>
					<X>330</X><Y>1410</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_secularEducation ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077506</Id>
					<Name><![CDATA[rectangle21]]></Name>
					<X>40</X><Y>1430</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077507</Id>
					<Name><![CDATA[text135]]></Name>
					<X>50</X><Y>1440</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[religiousEducation]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077508</Id>
					<Name><![CDATA[text136]]></Name>
					<X>240</X><Y>1440</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_religiousEducation ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077509</Id>
					<Name><![CDATA[text137]]></Name>
					<X>330</X><Y>1440</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_religiousEducation ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077510</Id>
					<Name><![CDATA[text138]]></Name>
					<X>50</X><Y>1470</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[switchThreshold]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077511</Id>
					<Name><![CDATA[text139]]></Name>
					<X>240</X><Y>1470</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_switchThreshold ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077512</Id>
					<Name><![CDATA[text140]]></Name>
					<X>330</X><Y>1470</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_switchThreshold ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Rectangle>
					<Id>1699902077513</Id>
					<Name><![CDATA[rectangle22]]></Name>
					<X>40</X><Y>1490</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<Width>310</Width>
					<Height>30</Height>
					<Rotation>0.0</Rotation>
					<FillColor>-657931</FillColor>
					<FillMaterial>null</FillMaterial>
				</Rectangle>
				<Text>
					<Id>1699902077514</Id>
					<Name><![CDATA[text141]]></Name>
					<X>50</X><Y>1500</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[disaffThreshold]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1699902077515</Id>
					<Name><![CDATA[text142]]></Name>
					<X>240</X><Y>1500</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getCurrentParamValue( _oqvar_disaffThreshold ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Text>
					<Id>1699902077516</Id>
					<Name><![CDATA[text143]]></Name>
					<X>330</X><Y>1500</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getBestIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format( getBestParamValue( _oqvar_disaffThreshold ) )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>1</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Control Type="Button">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1699902077361</Id>
					<Name><![CDATA[button]]></Name>
					<X>255</X><Y>175</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<BasicProperties Width="90" Height="20">
                        <EmbeddedIcon>false</EmbeddedIcon>	
						<TextColor/>
						<Enabled>true</Enabled>
						<EnableExpression><![CDATA[getBestIteration() > 0]]></EnableExpression>
						<ActionCode><![CDATA[String s = "";
s += "AnnualCSV_FileName\t" + String.valueOf( AnnualCSV_FileName ) + "\n";
s += "Annual_Individual_CSV_FileName\t" + String.valueOf( Annual_Individual_CSV_FileName ) + "\n";
s += "SimulationID\t" + String.valueOf( SimulationID ) + "\n";
s += "Annual_Data_Collect\t" + format( Annual_Data_Collect ) + "\n";
s += "Annual_Club_CSV_FileName\t" + String.valueOf( Annual_Club_CSV_FileName ) + "\n";
s += "LHS_Experiment_Number\t" + format( LHS_Experiment_Number ) + "\n";
s += "input_TopDownInitialAgents\t" + format( input_TopDownInitialAgents ) + "\n";
s += "input_FiveYearStep\t" + format( input_FiveYearStep ) + "\n";
s += "Death_Rate_Source\t" + String.valueOf( Death_Rate_Source ) + "\n";
s += "Birth_Rate_Source\t" + String.valueOf( Birth_Rate_Source ) + "\n";
s += "input_TopDown\t" + format( input_TopDown ) + "\n";
s += "input_AgentInitializationPerAgeYear\t" + format( input_AgentInitializationPerAgeYear ) + "\n";
s += "Starting_Period\t" + format( Starting_Period ) + "\n";
s += "input_NumberOfInitialAgents\t" + format( input_NumberOfInitialAgents ) + "\n";
s += "input_splitFertility\t" + format( input_splitFertility ) + "\n";
s += "country_id\t" + format( country_id ) + "\n";
s += "input_ForceUseSplitAge\t" + format( input_ForceUseSplitAge ) + "\n";
s += "starting_population_size_index\t" + format( starting_population_size_index ) + "\n";
s += "starting_population_sizes\t" + String.valueOf( starting_population_sizes ) + "\n";
s += "input_ImmigrantsImmuneFromDeath\t" + format( input_ImmigrantsImmuneFromDeath ) + "\n";
s += "skipExperimentFilter\t" + String.valueOf( skipExperimentFilter ) + "\n";
s += "input_isPhase2\t" + format( input_isPhase2 ) + "\n";
s += "input_debugAff\t" + format( input_debugAff ) + "\n";
s += "c_swing\t" + format( getBestParamValue( _oqvar_c_swing ) ) + "\n";
s += "isTesting\t" + format( isTesting ) + "\n";
s += "totalConversionChance\t" + format( getBestParamValue( _oqvar_totalConversionChance ) ) + "\n";
s += "numInteractionsPerStep\t" + format( getBestParamValue( _oqvar_numInteractionsPerStep ) ) + "\n";
s += "couplingAgeOlderAmountBias\t" + format( couplingAgeOlderAmountBias ) + "\n";
s += "secRXDimensionsIncrementDenominator\t" + format( getBestParamValue( _oqvar_secRXDimensionsIncrementDenominator ) ) + "\n";
s += "attitudeIncrement\t" + format( getBestParamValue( _oqvar_attitudeIncrement ) ) + "\n";
s += "attitudeSelfDecrement\t" + format( getBestParamValue( _oqvar_attitudeSelfDecrement ) ) + "\n";
s += "dimensionsIncrement\t" + format( getBestParamValue( _oqvar_dimensionsIncrement ) ) + "\n";
s += "highSNWCutoff\t" + format( getBestParamValue( _oqvar_highSNWCutoff ) ) + "\n";
s += "stronglyReligiousCutoff\t" + format( getBestParamValue( _oqvar_stronglyReligiousCutoff ) ) + "\n";
s += "minStrictness\t" + format( minStrictness ) + "\n";
s += "modeStrictness\t" + format( getBestParamValue( _oqvar_modeStrictness ) ) + "\n";
s += "maxStrictness\t" + format( maxStrictness ) + "\n";
s += "input_InteractionsType\t" + format( input_InteractionsType ) + "\n";
s += "input_inheritanceType\t" + format( input_inheritanceType ) + "\n";
s += "input_coupleSwitching\t" + format( input_coupleSwitching ) + "\n";
s += "secularEducation\t" + format( getBestParamValue( _oqvar_secularEducation ) ) + "\n";
s += "religiousEducation\t" + format( getBestParamValue( _oqvar_religiousEducation ) ) + "\n";
s += "switchThreshold\t" + format( getBestParamValue( _oqvar_switchThreshold ) ) + "\n";
s += "disaffThreshold\t" + format( getBestParamValue( _oqvar_disaffThreshold ) ) + "\n";

copyToClipboard( s );]]></ActionCode>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<LabelText><![CDATA[Copy best]]></LabelText>
					</ExtendedProperties>
				</Control>
				<Line>
					<Id>1699902077517</Id>
					<Name><![CDATA[line3]]></Name>
					<X>250</X><Y>70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-4144960</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<Dx>0</Dx>
					<Dy>1450</Dy>
					<Dz>0</Dz>
				</Line>
    			<Plot>
					<Id>1699902077523</Id>
					<Name><![CDATA[plot1]]></Name>
					<X>370</X><Y>80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<AutoUpdate>false</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1699948800000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[YEAR]]></Unit>
					</RecurrenceCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Width>500</Width>
					<Height>300</Height>
					<BackgroundColor/>
					<BorderColor/>
					<ChartArea>
						<XOffset>80</XOffset>
						<YOffset>20</YOffset>
						<Width>400</Width>
						<Height>200</Height>
						<BackgroundColor>-1</BackgroundColor>
						<BorderColor>-9868951</BorderColor>
						<GridColor>-12566464</GridColor>
					</ChartArea>
					<Legend>
						<Place>SOUTH</Place>
						<TextColor>-16777216</TextColor>
						<Size>40</Size>
					</Legend>
					<Labels>
						<HorLabelsPosition>DEFAULT</HorLabelsPosition>
						<VerLabelsPosition>DEFAULT</VerLabelsPosition>
						<TextColor>-12566464</TextColor>
					</Labels>
					<ShowLegend>true</ShowLegend>
					<VerScaleFromExpression><![CDATA[0]]></VerScaleFromExpression>
					<VerScaleToExpression><![CDATA[1]]></VerScaleToExpression>
					<VerScaleType>AUTO</VerScaleType>
					<DrawLine>true</DrawLine>
					<Interpolation>LINEAR</Interpolation>
					<DatasetExpression>  
						<Title><![CDATA[Current]]></Title>
					<Id>1699902077525</Id>
					<Expression><![CDATA[datasetCurrentObjective]]></Expression>
					<Color>-4144960</Color>
					<Expression2Flag>false</Expression2Flag>
						<PointStyle>CIRCLE</PointStyle>
						<LineWidth>0.0</LineWidth>
						<HorizontalAxisExpression><![CDATA[]]></HorizontalAxisExpression>
					</DatasetExpression>
					<DatasetExpression>  
						<Title><![CDATA[Best infeasible]]></Title>
					<Id>1699902077526</Id>
					<Expression><![CDATA[datasetBestInfeasibleObjective]]></Expression>
					<Color>-4194304</Color>
					<Expression2Flag>false</Expression2Flag>
						<PointStyle>NONE</PointStyle>
						<LineWidth>2.0</LineWidth>
						<HorizontalAxisExpression><![CDATA[]]></HorizontalAxisExpression>
					</DatasetExpression>
					<DatasetExpression>  
						<Title><![CDATA[Best feasible]]></Title>
					<Id>1699902077527</Id>
					<Expression><![CDATA[datasetBestFeasibleObjective]]></Expression>
					<Color>-16777088</Color>
					<Expression2Flag>false</Expression2Flag>
						<PointStyle>NONE</PointStyle>
						<LineWidth>2.0</LineWidth>
						<HorizontalAxisExpression><![CDATA[]]></HorizontalAxisExpression>
					</DatasetExpression>
					<SamplesToKeep>100</SamplesToKeep>
					<HorScaleFromExpression><![CDATA[0]]></HorScaleFromExpression>
					<HorScaleToExpression><![CDATA[1]]></HorScaleToExpression>
					<HorScaleType>AUTO</HorScaleType>
    			</Plot>
			</Presentation>

			<Parameter>	
				<Id>1540893879728</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA["CRED_Annual_Stats.csv"]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1540893879734</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1540893879741</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[runId.getAndIncrement() + ""]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1540894011080</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[true]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1541740410511</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1588671396788</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1612992144530</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1617721935915</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1618332956184</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1618584211210</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1620835060614</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1620919785493</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1621627279688</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1621629563421</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[40000]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1631551760655</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1635971049972</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[DBUtils.COUNTRY_ID_INDIA]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1639591937776</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1648492121753</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1648492141861</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1648493023183</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1648595220287</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[Main.BASIC_FILTER]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1686104420241</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1686104542844</Id>
				<Type>FIXED</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Value>
			</Parameter>
			<Parameter>	
				<Id>1697123468691</Id>
				<Type>CONTINUOUS</Type>
				<Min Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Max>
				<Suggested Class="CodeValue">
					<Code><![CDATA[0.5]]></Code>
				</Suggested>
			</Parameter>
			<Parameter>	
				<Id>1697123468694</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1697123468697</Id>
				<Type>CONTINUOUS</Type>
				<Min Class="CodeValue">
					<Code><![CDATA[0.0001]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[0.01]]></Code>
				</Max>
				<Suggested Class="CodeValue">
					<Code><![CDATA[0.001]]></Code>
				</Suggested>
			</Parameter>
			<Parameter>	
				<Id>1697123468700</Id>
				<Type>DISCRETE</Type>
				<Min Class="CodeValue">
					<Code><![CDATA[5]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[10]]></Code>
				</Max>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
				<Suggested Class="CodeValue">
					<Code><![CDATA[10]]></Code>
				</Suggested>
			</Parameter>
			<Parameter>	
				<Id>1697123468703</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1697123468706</Id>
				<Type>CONTINUOUS</Type>
				<Min Class="CodeValue">
					<Code><![CDATA[1.5]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[5]]></Code>
				</Max>
				<Suggested Class="CodeValue">
					<Code><![CDATA[4]]></Code>
				</Suggested>
			</Parameter>
			<Parameter>	
				<Id>1697123468709</Id>
				<Type>CONTINUOUS</Type>
				<Min Class="CodeValue">
					<Code><![CDATA[0.005]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[0.1]]></Code>
				</Max>
				<Suggested Class="CodeValue">
					<Code><![CDATA[0.02]]></Code>
				</Suggested>
			</Parameter>
			<Parameter>	
				<Id>1697123468712</Id>
				<Type>CONTINUOUS</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[0.005]]></Code>
				</Value>
				<Min Class="CodeValue">
					<Code><![CDATA[0.005]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[0.05]]></Code>
				</Max>
				<Suggested Class="CodeValue">
					<Code><![CDATA[0.0015]]></Code>
				</Suggested>
			</Parameter>
			<Parameter>	
				<Id>1697123468715</Id>
				<Type>CONTINUOUS</Type>
				<Min Class="CodeValue">
					<Code><![CDATA[0.005]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[0.05]]></Code>
				</Max>
				<Suggested Class="CodeValue">
					<Code><![CDATA[0.02]]></Code>
				</Suggested>
			</Parameter>
			<Parameter>	
				<Id>1697123468718</Id>
				<Type>CONTINUOUS</Type>
				<Min Class="CodeValue">
					<Code><![CDATA[0.4]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[0.8]]></Code>
				</Max>
				<Suggested Class="CodeValue">
					<Code><![CDATA[0.5]]></Code>
				</Suggested>
			</Parameter>
			<Parameter>	
				<Id>1697123468721</Id>
				<Type>CONTINUOUS</Type>
				<Min Class="CodeValue">
					<Code><![CDATA[0.4]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[0.8]]></Code>
				</Max>
				<Suggested Class="CodeValue">
					<Code><![CDATA[0.5]]></Code>
				</Suggested>
			</Parameter>
			<Parameter>	
				<Id>1697126924112</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1697126924118</Id>
				<Type>CONTINUOUS</Type>
				<Min Class="CodeValue">
					<Code><![CDATA[0.1]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[0.6]]></Code>
				</Max>
				<Suggested Class="CodeValue">
					<Code><![CDATA[0.35]]></Code>
				</Suggested>
			</Parameter>
			<Parameter>	
				<Id>1697126924122</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1697562748859</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1697562788272</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1697567368903</Id>
				<Type>FIXED</Type>
			</Parameter>
			<Parameter>	
				<Id>1697580785524</Id>
				<Type>CONTINUOUS</Type>
				<Min Class="CodeValue">
					<Code><![CDATA[0.1]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[0.9]]></Code>
				</Max>
				<Suggested Class="CodeValue">
					<Code><![CDATA[0.3]]></Code>
				</Suggested>
			</Parameter>
			<Parameter>	
				<Id>1697580797846</Id>
				<Type>CONTINUOUS</Type>
				<Min Class="CodeValue">
					<Code><![CDATA[0.1]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[0.9]]></Code>
				</Max>
				<Suggested Class="CodeValue">
					<Code><![CDATA[0.33]]></Code>
				</Suggested>
			</Parameter>
			<Parameter>	
				<Id>1699901014119</Id>
				<Type>CONTINUOUS</Type>
				<Min Class="CodeValue">
					<Code><![CDATA[0.6]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[2]]></Code>
				</Max>
			</Parameter>
			<Parameter>	
				<Id>1699901034038</Id>
				<Type>CONTINUOUS</Type>
				<Value Class="CodeValue">
					<Code><![CDATA[0.6]]></Code>
				</Value>
				<Min Class="CodeValue">
					<Code><![CDATA[0.6]]></Code>
				</Min>
				<Max Class="CodeValue">
					<Code><![CDATA[2]]></Code>
				</Max>
			</Parameter>
			<ObjectiveFunctionCode><![CDATA[root.getCost()]]></ObjectiveFunctionCode>
			<Objective>MINIMIZE</Objective>  
			<OptimizationEngine>NATIVE</OptimizationEngine>
			<AfterIterationCode><![CDATA[if (isBestSolutionFeasible()) {
	datasetBestFeasibleObjective.update();
}
if (!isCurrentSolutionFeasible()) {
	bestInfeasibleObjective = min( bestInfeasibleObjective, getCurrentObjectiveValue() );
}
if (bestInfeasibleObjective != Double.POSITIVE_INFINITY) {
	datasetBestInfeasibleObjective.update();
}
]]></AfterIterationCode>
			<AllowParallelEvaluations>true</AllowParallelEvaluations>
			<ReplicationsProperties>
				<UseReplication>false</UseReplication>
				<FixedReplicationsNumber>true</FixedReplicationsNumber>
				<ReplicationPerIteration>10</ReplicationPerIteration>
				<MinimumReplication>2</MinimumReplication>
				<MaximumReplication>10</MaximumReplication>
				<ConfidenceLevel>LEVEL_80</ConfidenceLevel>
				<ErrorPercent>0.5</ErrorPercent>
			</ReplicationsProperties>
			<PresentationProperties>
				<EnableZoomAndPanning>true</EnableZoomAndPanning>
				<Title><![CDATA[Cohort_Component_Method : Optimization]]></Title>	
				<EnableDeveloperPanel>true</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
			</PresentationProperties>
			<ModelTimeProperties>
				<StopOption><![CDATA[Stop at specified date]]></StopOption>
				<InitialDate><![CDATA[1262304000000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[2524672800000]]></FinalDate>	
				<FinalTime><![CDATA[40.02945205479452]]></FinalTime>	
				<StopAfterIterationCount>true</StopAfterIterationCount>
				<IterationCount>700</IterationCount>
				<AutomaticStop>false</AutomaticStop>
			</ModelTimeProperties>
		</OptimizationExperiment>
		<!--   =========  Parameter Variation Experiment   ========  -->
		<ParamVariationExperiment ActiveObjectClassId="1494655951608">
			<Id>1648492659756</Id>
			<Name><![CDATA[ParametersVariation_orig]]></Name>
			<AdditionalClassCode><![CDATA[public static BufferedWriter realRatesWriter;
private static Object writerLock = new Object();

static {
synchronized(writerLock) {
if (realRatesWriter == null) {


try {
	StringBuilder sb = new StringBuilder();
	
	sb.append("CountryId"); sb.append(',');
	sb.append("time"); sb.append(',');
	sb.append("gender"); sb.append(',');
	sb.append("using_age"); sb.append(',');
	sb.append("cur_age"); sb.append(',');
	sb.append("rate_type"); sb.append(',');
	sb.append("val"); sb.append('\n');
	realRatesWriter = new BufferedWriter(new FileWriter("RatesBreakdown.csv"));
	realRatesWriter.write(sb.toString());
} catch (IOException e) {
	throw new RuntimeException("Error 1");
}
}
}
}

public static BufferedWriter agentWriter;
private static Object agentWriterLock = new Object();

static {
synchronized(agentWriterLock) {
if (agentWriter == null) {


try {
	agentWriter = new BufferedWriter(new FileWriter("Agents.csv"));
	agentWriter.write(PersonReligiosity.getCSVHeaders());
} catch (IOException e) {
	throw new RuntimeException("Error 1");
}
}
}
}


public static BufferedWriter switchWriter;
private static Object switchWriterLock = new Object();

static {
synchronized(switchWriterLock) {
if (switchWriter == null) {


try {
	switchWriter = new BufferedWriter(new FileWriter("Switches.csv"));
	switchWriter.write("SwitchType,"+PersonReligiosity.getCSVHeaders("before_", false)+PersonReligiosity.getCSVHeaders("after_", true));
} catch (IOException e) {
	throw new RuntimeException("Error 1");
}
}
}
}]]></AdditionalClassCode>
			<Import><![CDATA[import java.util.function.Predicate;
import java.io.*;]]></Import>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<InitialSetupCode><![CDATA[//setRealRatesWriter();]]></InitialSetupCode>
			<MaximumMemory>100000</MaximumMemory>
			<RandomNumberGenerationType>randomSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<BeforeSimulationRunCode><![CDATA[traceln("Starting a sim");

//REMINDER: Set the AnnualCSV_FileName parameter to this same name
String AnnualStats_CsvFileName = "CRED_Annual_Soc_Stats.csv";
//String AnnualClub_CsvFileName = "CRED_Annual_Club_Stats.csv";
//root.Annual_Individual_CSV_FileName = "Deaths_per_Year_First_Period.csv";

root.SimulationID = getCurrentIteration() + "_" + getCurrentReplication();
traceln("Current_Sim: " + root.SimulationID);

root.Create_AnnualCSV_CustomExp(root.AnnualCSV_FileName );
//root.Create_Annual_Individual_CSV_CustomExp(root.Annual_Individual_CSV_FileName);
//root.Create_Annual_Club_CSV_CustomExp(root.Annual_Club_CSV_FileName);]]></BeforeSimulationRunCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>


			<AfterExperimentCode><![CDATA[try {
	realRatesWriter.flush();
	agentWriter.flush();
	switchWriter.flush();
}catch (IOException e) {
	traceln("Error");
}]]></AfterExperimentCode>
			<AllowParallelEvaluations>true</AllowParallelEvaluations>
			<UseFreeformParameters>false</UseFreeformParameters>
			<NumberOfRuns>10</NumberOfRuns>
			<FreeformParamValue>	
				<Id>1540893879728</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1540893879734</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1540893879741</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1540894011080</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1541740410511</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1588671396788</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1612992144530</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1617721935915</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1618332956184</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1618584211210</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1620835060614</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1620919785493</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1621627279688</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1621629563421</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1631551760655</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1635971049972</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1639591937776</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1648492121753</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1648492141861</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1648493023183</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1648595220287</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1686104420241</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1686104542844</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468691</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468694</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468697</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468700</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468703</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468706</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468709</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468712</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468715</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468718</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468721</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697126924112</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697126924118</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697126924122</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697562748859</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697562788272</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697567368903</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697580785524</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697580797846</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1699901014119</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1699901034038</Id>
			</FreeformParamValue>
			<RangeVariationParamValue>	
				<Id>1540893879728</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA["CRED_Annual_Stats.csv"]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1540893879734</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA["unused_output.csv"]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1540893879741</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1540894011080</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[true]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1541740410511</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA["unused_output2.csv"]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1588671396788</Id>
				<Type>FIXED</Type>
				<From Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[6]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1612992144530</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1617721935915</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1618332956184</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1618584211210</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1620835060614</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1620919785493</Id>
				<Type>FIXED</Type>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1621627279688</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1621629563421</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[50000]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1631551760655</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1635971049972</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[DBUtils.COUNTRY_ID_USA]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[3]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1639591937776</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1648492121753</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[-1]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[2]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1648492141861</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[{50000, 100000, 200000}]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1648493023183</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1648595220287</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[Main.BASIC_FILTER]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1686104420241</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1686104542844</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468691</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.653924245]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0.25]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[0.75]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[0.25]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468694</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468697</Id>
				<Type>FIXED</Type>
				<From Class="CodeValue">
					<Code><![CDATA[0.001]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[0.002]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[0.001]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468700</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468703</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468706</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1.5]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468709</Id>
				<Type>FIXED</Type>
				<From Class="CodeValue">
					<Code><![CDATA[0.01]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[0.03]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[0.01]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468712</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.0077]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0.0075]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[0.015]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[0.0075]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468715</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.038198454]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0.01]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[0.02]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[0.005]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468718</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.56]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0.4]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[0.6]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[0.1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468721</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.465]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0.4]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[0.6]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[0.1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697126924112</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697126924118</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.53]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0.35]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[0.53]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[0.18]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697126924122</Id>
				<Type>FIXED</Type>
				<From Class="CodeValue">
					<Code><![CDATA[0.5]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[0.9]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[0.2]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697562748859</Id>
				<Type>FIXED</Type>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[2]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697562788272</Id>
				<Type>FIXED</Type>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697567368903</Id>
				<Type>FIXED</Type>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697580785524</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.587354919]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0.587354919]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[0.67]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[0.02]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697580797846</Id>
				<Type>RANGE</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.670673929]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[0.670673929]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[0.8]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[0.02]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1699901014119</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1699901034038</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<ModelTimeProperties>
				<StopOption><![CDATA[Stop at specified date]]></StopOption>
				<InitialDate><![CDATA[1262304000000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[2524672800000]]></FinalDate>	
				<FinalTime><![CDATA[40.02945205479452]]></FinalTime>	
			</ModelTimeProperties>
			<PresentationProperties>
				<EnableZoomAndPanning>true</EnableZoomAndPanning>
				<Title><![CDATA[Cohort_Component_Method : ParametersVariation]]></Title>
				<EnableDeveloperPanel>true</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
			</PresentationProperties>
			<ReplicationsProperties>
				<UseReplication>false</UseReplication>
				<FixedReplicationsNumber>true</FixedReplicationsNumber>
				<ReplicationPerIteration>10</ReplicationPerIteration>
				<MinimumReplication>2</MinimumReplication>
				<MaximumReplication>10</MaximumReplication>
				<ConfidenceLevel>LEVEL_80</ConfidenceLevel>
				<ErrorPercent>0.5</ErrorPercent>
				<ExpressionForConfidenceComputation><![CDATA[0]]></ExpressionForConfidenceComputation>
			</ReplicationsProperties>
		</ParamVariationExperiment>
		<!--   =========  Parameter Variation Experiment   ========  -->
		<ParamVariationExperiment ActiveObjectClassId="1494655951608">
			<Id>1699641317525</Id>
			<Name><![CDATA[ParametersVariation]]></Name>
			<AdditionalClassCode><![CDATA[public static BufferedWriter realRatesWriter;
private static Object writerLock = new Object();

static {
synchronized(writerLock) {
if (realRatesWriter == null) {


try {
	StringBuilder sb = new StringBuilder();
	
	sb.append("CountryId"); sb.append(',');
	sb.append("time"); sb.append(',');
	sb.append("gender"); sb.append(',');
	sb.append("using_age"); sb.append(',');
	sb.append("cur_age"); sb.append(',');
	sb.append("rate_type"); sb.append(',');
	sb.append("val"); sb.append('\n');
	realRatesWriter = new BufferedWriter(new FileWriter("RatesBreakdown.csv"));
	realRatesWriter.write(sb.toString());
} catch (IOException e) {
	throw new RuntimeException("Error 1");
}
}
}
}

public static BufferedWriter agentWriter;
private static Object agentWriterLock = new Object();

static {
synchronized(agentWriterLock) {
if (agentWriter == null) {


try {
	agentWriter = new BufferedWriter(new FileWriter("Agents.csv"));
	agentWriter.write(PersonReligiosity.getCSVHeaders());
} catch (IOException e) {
	throw new RuntimeException("Error 1");
}
}
}
}


public static BufferedWriter switchWriter;
private static Object switchWriterLock = new Object();

static {
synchronized(switchWriterLock) {
if (switchWriter == null) {


try {
	switchWriter = new BufferedWriter(new FileWriter("Switches.csv"));
	switchWriter.write("SwitchType,"+PersonReligiosity.getCSVHeaders("before_", false)+PersonReligiosity.getCSVHeaders("after_", true));
} catch (IOException e) {
	throw new RuntimeException("Error 1");
}
}
}
}]]></AdditionalClassCode>
			<Import><![CDATA[import java.util.function.Predicate;
import java.io.*;]]></Import>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<InitialSetupCode><![CDATA[//setRealRatesWriter();]]></InitialSetupCode>
			<MaximumMemory>100000</MaximumMemory>
			<RandomNumberGenerationType>randomSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<BeforeSimulationRunCode><![CDATA[traceln("Starting a sim");

//REMINDER: Set the AnnualCSV_FileName parameter to this same name
String AnnualStats_CsvFileName = "CRED_Annual_Soc_Stats.csv";
//String AnnualClub_CsvFileName = "CRED_Annual_Club_Stats.csv";
//root.Annual_Individual_CSV_FileName = "Deaths_per_Year_First_Period.csv";

root.SimulationID = getCurrentIteration() + "_" + getCurrentReplication();
traceln("Current_Sim: " + root.SimulationID);

root.Create_AnnualCSV_CustomExp(root.AnnualCSV_FileName );
//root.Create_Annual_Individual_CSV_CustomExp(root.Annual_Individual_CSV_FileName);
//root.Create_Annual_Club_CSV_CustomExp(root.Annual_Club_CSV_FileName);]]></BeforeSimulationRunCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>


			<AfterExperimentCode><![CDATA[try {
	realRatesWriter.flush();
	agentWriter.flush();
	switchWriter.flush();
}catch (IOException e) {
	traceln("Error");
}]]></AfterExperimentCode>
			<AllowParallelEvaluations>true</AllowParallelEvaluations>
			<UseFreeformParameters>false</UseFreeformParameters>
			<NumberOfRuns>10</NumberOfRuns>
			<FreeformParamValue>	
				<Id>1540893879728</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1540893879734</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1540893879741</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1540894011080</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1541740410511</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1588671396788</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1612992144530</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1617721935915</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1618332956184</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1618584211210</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1620835060614</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1620919785493</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1621627279688</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1621629563421</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1631551760655</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1635971049972</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1639591937776</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1648492121753</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1648492141861</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1648493023183</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1648595220287</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1686104420241</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1686104542844</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468691</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468694</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468697</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468700</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468703</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468706</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468709</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468712</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468715</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468718</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697123468721</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697126924112</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697126924118</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697126924122</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697562748859</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697562788272</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697567368903</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697580785524</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1697580797846</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1699901014119</Id>
			</FreeformParamValue>
			<FreeformParamValue>	
				<Id>1699901034038</Id>
			</FreeformParamValue>
			<RangeVariationParamValue>	
				<Id>1540893879728</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA["CRED_Annual_Stats.csv"]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1540893879734</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1540893879741</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1540894011080</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[true]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1541740410511</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1588671396788</Id>
				<Type>RANGE</Type>
				<From Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[10]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1612992144530</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1617721935915</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1618332956184</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1618584211210</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1620835060614</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1620919785493</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1621627279688</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1621629563421</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[80000]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1631551760655</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1635971049972</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[DBUtils.COUNTRY_ID_INDIA]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1639591937776</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1648492121753</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1648492141861</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1648493023183</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1648595220287</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[Main.BASIC_FILTER]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1686104420241</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1686104542844</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468691</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.99848107]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468694</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468697</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.000145]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468700</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[6]]></Code>
				</Expression>
				<From Class="CodeValue">
					<Code><![CDATA[5]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[10]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[5]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468703</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468706</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[3.813821386]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468709</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.053876369]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468712</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.005162414]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468715</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.011754829]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468718</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.626473589]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697123468721</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.703846951]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697126924112</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697126924118</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.180845754]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697126924122</Id>
				<Type>FIXED</Type>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697562748859</Id>
				<Type>RANGE</Type>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697562788272</Id>
				<Type>RANGE</Type>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[2]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697567368903</Id>
				<Type>RANGE</Type>
				<From Class="CodeValue">
					<Code><![CDATA[0]]></Code>
				</From>
				<To Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</To>
				<Step Class="CodeValue">
					<Code><![CDATA[1]]></Code>
				</Step>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697580785524</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.218164289]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1697580797846</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[0.658444286]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1699901014119</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1.296777867]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<RangeVariationParamValue>	
				<Id>1699901034038</Id>
				<Type>FIXED</Type>
				<Expression Class="CodeValue">
					<Code><![CDATA[1.779267275]]></Code>
				</Expression>
			</RangeVariationParamValue>
			<ModelTimeProperties>
				<StopOption><![CDATA[Stop at specified date]]></StopOption>
				<InitialDate><![CDATA[1262304000000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[2524672800000]]></FinalDate>	
				<FinalTime><![CDATA[40.02945205479452]]></FinalTime>	
			</ModelTimeProperties>
			<PresentationProperties>
				<EnableZoomAndPanning>true</EnableZoomAndPanning>
				<Title><![CDATA[Cohort_Component_Method : ParametersVariation]]></Title>
				<EnableDeveloperPanel>true</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
			</PresentationProperties>
			<ReplicationsProperties>
				<UseReplication>false</UseReplication>
				<FixedReplicationsNumber>true</FixedReplicationsNumber>
				<ReplicationPerIteration>10</ReplicationPerIteration>
				<MinimumReplication>2</MinimumReplication>
				<MaximumReplication>10</MaximumReplication>
				<ConfidenceLevel>LEVEL_80</ConfidenceLevel>
				<ErrorPercent>0.5</ErrorPercent>
				<ExpressionForConfidenceComputation><![CDATA[0]]></ExpressionForConfidenceComputation>
			</ReplicationsProperties>
		</ParamVariationExperiment>	
	</Experiments>
	<JavaClasses>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1631549080874</Id>
			<Name><![CDATA[DBUtils]]></Name>
			<Text><![CDATA[import java.util.stream.Collectors;
import com.querydsl.core.types.dsl.StringPath;
import java.util.Optional;
import java.lang.UnsupportedOperationException;

/**
 * This class has helper functions to pull from the database to get
 * rate information.
 */	
public final class DBUtils {

	public static final int COUNTRY_ID_NORWAY = 1;
	public static final int COUNTRY_ID_USA = 2;
	public static final int COUNTRY_ID_INDIA = 3;
	
	private static final ArrayList<String> possibleAgeRange = new ArrayList<String>() {
        {
            add("0-4");
            add("5-9");
            add("10-14");
            add("15-19");
            add("20-24");
            add("25-29");
            add("30-34");
            add("35-39");
            add("40-44");
            add("45-49");
            add("50-54");
            add("55-59");
            add("60-64");
            add("65-69");
            add("70-74");
            add("75-79");
            add("80-84");
            add("85-89");
            add("90-94");
            add("95+");
        }
    };
    
    public static final double getPhase2HybridInitTotalWeight(Main main) {
    	List<Double> weights = main.selectFrom(phase2hybrid_baseinit).list(phase2hybrid_baseinit.weight);
    	return weights.stream().mapToDouble(d -> d).sum();
    }
    
    public static final int INDEX_AGECAT5 = 0;
    public static final int INDEX_AFFIL_HYBRID = 1;
    public static final int INDEX_G2 = 2;
    public static final int INDEX_SEX = 3;
    public static final int INDEX_PERCEDU = 4;
    public static final int INDEX_WEIGHT = 5;
    public static final int INDEX_MARRIED = 6;
    public static final List<Tuple> getPhase2HybridInitRows(Main main) {
    	return main.selectFrom(phase2hybrid_baseinit)
    			.list(phase2hybrid_baseinit.agecat5,
    					phase2hybrid_baseinit.affil_hybrid,
    					phase2hybrid_baseinit.g2,
    					phase2hybrid_baseinit.sex,
    					phase2hybrid_baseinit.perc_edu,
    					phase2hybrid_baseinit.weight,
    					phase2hybrid_baseinit.init_perc_married);
    }
    
    private static String mapToWiderAgeCategory(String originalAgeCategory) {
	    // Extract the lower and upper bounds of the original age category
	    String[] bounds = originalAgeCategory.split("-");
	    int lowerBound = Integer.parseInt(bounds[0]);
	    int upperBound = Integer.parseInt(bounds[1]);

	    // Determine the wider age category
	    int widerLowerBound = ((lowerBound - 1) / 10) * 10 + 5; // Round down to the nearest multiple of 10 and add 5
	    int widerUpperBound;

	    if (upperBound >= 85) {
	        widerUpperBound = 110; // Special case for values >= 85
	    } else {
	        widerUpperBound = widerLowerBound + 9; // Round up to the nearest multiple of 10 and subtract 1
	    }

	    // Create the wider age category string
	    String widerAgeCategory = widerLowerBound + "-" + widerUpperBound;

	    return widerAgeCategory;
	}
    
    public static final Map<String, Double> getPhase2HybridSecondaryInit(Main main, String agecat5, String affil_hyrbid, int g2, int sex, int perc_edu, int married) {
    	//traceln("Here");
    	Tuple t = null;
    	//try {
    	t = main.selectFrom(phase2hybrid_secondaryinit)
    			.where(phase2hybrid_secondaryinit.affil_hybrid.eq(affil_hyrbid))
    			.where(phase2hybrid_secondaryinit.g2.eq(g2))
    			.where(phase2hybrid_secondaryinit.sex.eq(sex))
    			.where(phase2hybrid_secondaryinit.perc_edu.eq(perc_edu))
    			.where(phase2hybrid_secondaryinit.agecat10.eq(mapToWiderAgeCategory(agecat5)))
    			.where(phase2hybrid_secondaryinit.init_perc_married.eq(married))
    			.uniqueResult(phase2hybrid_secondaryinit.nchild,
    					//phase2hybrid_secondaryinit.mean_fborn,
    					phase2hybrid_secondaryinit.mean_p_fborn,
    					//phase2hybrid_secondaryinit.mean_cohab,
    					phase2hybrid_secondaryinit.mean_child,
    					phase2hybrid_secondaryinit.mean_public,
    					phase2hybrid_secondaryinit.mean_private,
    					phase2hybrid_secondaryinit.mean_super,
    					phase2hybrid_secondaryinit.mean_importance,
    					phase2hybrid_secondaryinit.mean_strict,
    					//phase2hybrid_secondaryinit.mean_jewatt,
    					phase2hybrid_secondaryinit.mean_chrsatt,
    					phase2hybrid_secondaryinit.mean_buddatt,
    					phase2hybrid_secondaryinit.mean_hindatt,
    					phase2hybrid_secondaryinit.mean_musatt,
    					//phase2hybrid_secondaryinit.mean_noneatt,
    					phase2hybrid_secondaryinit.mean_othatt,
    					phase2hybrid_secondaryinit.init_perc_married);
    	//} catch (RuntimeException e) {
    //		traceln("I'm here too");
   // 		throw e;
    	
    //	}
    	
    	Map<String, Double> resultMap = new HashMap<>();

    	resultMap.put("nchild", t.get(phase2hybrid_secondaryinit.nchild));
    	double defaultValue = 0.4;
    	//resultMap.put("mean_fborn", t.get(phase2hybrid_secondaryinit.mean_fborn) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_fborn) : defaultValue);
    	resultMap.put("mean_p_fborn", t.get(phase2hybrid_secondaryinit.mean_p_fborn) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_p_fborn) : defaultValue);
    	//resultMap.put("mean_cohab", t.get(phase2hybrid_secondaryinit.mean_cohab) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_cohab) : defaultValue);
    	resultMap.put("mean_child", t.get(phase2hybrid_secondaryinit.mean_child) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_child) : defaultValue);
    	resultMap.put("mean_public", t.get(phase2hybrid_secondaryinit.mean_public) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_public) : defaultValue);
    	resultMap.put("mean_private", t.get(phase2hybrid_secondaryinit.mean_private) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_private) : defaultValue);
    	resultMap.put("mean_supernatural", t.get(phase2hybrid_secondaryinit.mean_super) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_super) : defaultValue);
    	resultMap.put("mean_importance", t.get(phase2hybrid_secondaryinit.mean_importance) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_importance) : defaultValue);
    	resultMap.put("mean_strict", t.get(phase2hybrid_secondaryinit.mean_strict) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_strict) : 0.4);

    	
    	Affiliation aff = affilHybridToPew(affil_hyrbid.toLowerCase());
    	Map<Affiliation, Double> global_prejudice = main.global_prejudice.get(aff);
    	//resultMap.put("mean_jewatt", t.get(phase2hybrid_secondaryinit.mean_jewatt) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_jewatt) : 1 - global_prejudice.get(Affiliation.jews));
    	resultMap.put("mean_chrsatt", t.get(phase2hybrid_secondaryinit.mean_chrsatt) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_chrsatt) : 1 - global_prejudice.get(Affiliation.christians));
    	resultMap.put("mean_buddatt", t.get(phase2hybrid_secondaryinit.mean_buddatt) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_buddatt) : 1 - global_prejudice.get(Affiliation.buddhists));
    	resultMap.put("mean_hindatt", t.get(phase2hybrid_secondaryinit.mean_hindatt) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_hindatt) : 1 - global_prejudice.get(Affiliation.hindus));
    	resultMap.put("mean_musatt", t.get(phase2hybrid_secondaryinit.mean_musatt) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_musatt) : 1 - global_prejudice.get(Affiliation.muslims));
    	resultMap.put("mean_noneatt", t.get(phase2hybrid_secondaryinit.mean_othatt) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_othatt) : 1 - global_prejudice.get(Affiliation.unaffiliated));
    	resultMap.put("mean_othatt", t.get(phase2hybrid_secondaryinit.mean_othatt) >= 0 ? t.get(phase2hybrid_secondaryinit.mean_othatt) : 1 - global_prejudice.get(Affiliation.other_religions));


    	return resultMap;
    }
    
    public static final Affiliation affilHybridToPew(String aff) {
    	switch(aff.toLowerCase()) {
    	case "protestant":
    	case "catholic":
    	case "christianity":
    		return Affiliation.christians;
    	case "buddhist":
    		return Affiliation.buddhists;
    	case "hindu":
    		return Affiliation.hindus;
    	case "jewish":
    		return Affiliation.jews;
    	case "muslim":
    		return Affiliation.muslims;
    	case "no religion":
    		return Affiliation.unaffiliated;
    	case "other":
    		return Affiliation.other_religions;
    	default:
    		throw new IllegalStateException("Unexpected affiliation string: " + aff);
    	}
    }
    
    public static final double getPercentageOfPopulationUnder15(Main main, double year) {
    	if (main.country_id == COUNTRY_ID_INDIA)
    	{
    		return main.selectFrom(init_pop_dist_india_pew)
			.where(init_pop_dist_india_pew.year.eq(year))
			.where(init_pop_dist_india_pew.age.eq("0-4").or(
					init_pop_dist_india_pew.age.eq("5-9")).or(
					init_pop_dist_india_pew.age.eq("10-14")))
			.groupBy(init_pop_dist_india_pew.year)
			.firstResult(init_pop_dist_india_pew.population.sum())
			/ main.selectFrom(init_pop_dist_india_pew)
			.where(init_pop_dist_india_pew.year.eq(year))
			.groupBy(init_pop_dist_india_pew.year)
			.firstResult(init_pop_dist_india_pew.population.sum());
    	}
    	else if (main.country_id == COUNTRY_ID_USA)
    	{
    		return main.selectFrom(init_pop_dist_usa_pew)
	    			.where(init_pop_dist_usa_pew.year.eq(year))
	    			.where(init_pop_dist_usa_pew.age.eq("0-4").or(
	    					init_pop_dist_usa_pew.age.eq("5-9")).or(
	    					init_pop_dist_usa_pew.age.eq("10-14")))
	    			.groupBy(init_pop_dist_usa_pew.year)
	    			.firstResult(init_pop_dist_usa_pew.population.sum())
	    			/ main.selectFrom(init_pop_dist_usa_pew)
	    			.where(init_pop_dist_usa_pew.year.eq(year))
	    			.groupBy(init_pop_dist_usa_pew.year)
	    			.firstResult(init_pop_dist_usa_pew.population.sum());
    	}
    	else
    	{

    		throw new UnsupportedOperationException();
    	}
    }

    public static final Double getInitWeightSum(Main main, double year) {
    	if (main.country_id == COUNTRY_ID_INDIA)
    	{
    		return main.selectFrom(init_pop_dist_india_pew)
			.where(init_pop_dist_india_pew.year.eq(year))
			.where(init_pop_dist_india_pew.age.eq("0-4").or(
					init_pop_dist_india_pew.age.eq("5-9")).or(
					init_pop_dist_india_pew.age.eq("10-14")))
			.groupBy(init_pop_dist_india_pew.year)
			.firstResult(init_pop_dist_india_pew.population.sum());
    	}
    	else if (main.country_id == COUNTRY_ID_USA)
    	{
    		return main.selectFrom(init_pop_dist_usa_pew)
	    			.where(init_pop_dist_usa_pew.year.eq(year))
	    			.where(init_pop_dist_usa_pew.age.eq("0-4").or(
	    					init_pop_dist_usa_pew.age.eq("5-9")).or(
	    					init_pop_dist_usa_pew.age.eq("10-14")))
	    			.groupBy(init_pop_dist_usa_pew.year)
	    			.firstResult(init_pop_dist_usa_pew.population.sum());
    	}
    	else
    	{

    		throw new UnsupportedOperationException();
    	}
    }
    
    public static final ResultSet getInitRows(Main main, double year) {
    	if (main.country_id == COUNTRY_ID_INDIA)
    	{

    		return main.selectFrom(init_pop_dist_india_pew)
			.where(init_pop_dist_india_pew.year.eq(year))
			.where(init_pop_dist_india_pew.age.eq("0-4").or(
					init_pop_dist_india_pew.age.eq("5-9")).or(
					init_pop_dist_india_pew.age.eq("10-14")))
			.getResults(init_pop_dist_india_pew.all());
    	}
    	else if (main.country_id == COUNTRY_ID_USA)
    	{
    		return main.selectFrom(init_pop_dist_usa_pew)
        			.where(init_pop_dist_usa_pew.year.eq(year))
	    			.where(init_pop_dist_usa_pew.age.eq("0-4").or(
	    					init_pop_dist_usa_pew.age.eq("5-9")).or(
	    					init_pop_dist_usa_pew.age.eq("10-14")))
        			.getResults(init_pop_dist_usa_pew.all());
    	}
    	else
    	{

    		throw new UnsupportedOperationException();
    	}
    	
    }

	public static final List<Double> getInitialAgeWeightsMale(Main main) {
		final List<Double> rawWeights = main.selectFrom(init_age_dist_1950_un_mal)
									.where(init_age_dist_1950_un_mal.country_id.eq(main.country_id))
									.orderBy(init_age_dist_1950_un_mal.start.asc())
									.list(init_age_dist_1950_un_mal.weight);
		final double sumWeight = main.selectFrom(init_age_dist_1950_un_mal)
								.where(init_age_dist_1950_un_mal.country_id.eq(main.country_id))
								.list(init_age_dist_1950_un_mal.weight.sum())
								.get(0);
		
		return rawWeights.stream().map(d -> d / sumWeight).collect(Collectors.toList());
	}
	
	public static final List<Double> getInitialAgeWeightsFemale(Main main) {
		final List<Double> rawWeights = main.selectFrom(init_age_dist_1950_un_fem)
									.where(init_age_dist_1950_un_fem.country_id.eq(main.country_id))
									.orderBy(init_age_dist_1950_un_fem.start.asc())
									.list(init_age_dist_1950_un_fem.weight);
		final double sumWeight = main.selectFrom(init_age_dist_1950_un_fem)
								.where(init_age_dist_1950_un_fem.country_id.eq(main.country_id))
								.list(init_age_dist_1950_un_fem.weight.sum())
								.get(0);
		
		return rawWeights.stream().map(d -> d / sumWeight).collect(Collectors.toList());
	}
	
	public static final double getYearlyFertilityRate(Main main, String period, int age) {
		return main.selectFrom(fertility_rate)
				.where(fertility_rate.country_id.eq(main.country_id))
				.where(fertility_rate.period_range.eq(period))
				.where(fertility_rate.cohort.eq(age))
				.uniqueResult(true, fertility_rate.amount);
	}
	
	// When running the Phase 2 and 3 models (with Pew data and Affiliation)
		public static final double getYearlyFertilityRate(Main main, String period, int age, Affiliation aff) {
			String ageRange = ageToAgeRange(age);
			String affStr = aff.toString();
			try {
				double fertRate = main.selectFrom(pew_fertility_rate_all)
						.where(pew_fertility_rate_all.country_id.eq(main.country_id))
						.where(pew_fertility_rate_all.period_range.eq(period))
						.where(pew_fertility_rate_all.religion.eq(aff))
						.where(pew_fertility_rate_all.age.eq(ageRange))
						.uniqueResult(true, pew_fertility_rate_all.asfr)
						/ 1000.0
						/ (main.FiveYearStep ? 1.0 : 5.0);
				return fertRate;
			} catch (Exception err) {
				throw new IllegalStateException("Could not find age: " + ageRange + ", aff: " + affStr + ", period: " + period);
			}
			
		}
	
	public static final double getInfantSexRatio(Main main, String period) {
		return main.selectFrom(sex_ratio_at_birth)
				.where(sex_ratio_at_birth.country_id.eq(main.country_id))
				.where(sex_ratio_at_birth.period_range.eq(period))
				.uniqueResult(true, sex_ratio_at_birth.amount);
	}
	
	/**
	 * When using split age in one year step models, infants have some special handling
	 * of mortality rate.
	 * @param main
	 * @param period
	 * @param age
	 * @param gender
	 * @return
	 */
	public static final double getInfantDeathRate(Main main, String period, double age, Gender_List gender) {
		if (!(main.ForceUseSplitAge && !main.FiveYearStep)) {
			throw new IllegalStateException("Function not applicable to not splitFert or 5 year.");
		}
			
		if (age >= 4) {
			throw new IllegalStateException("Cannot call getInfantDeathRate on non-infant.");
		}
		String cohort = getDeathCohortSurvivalRatio(main, period, -1, gender);
		//traceln(String.format("%s %f %s %s", period, age, cohort, gender.toString()));
		double survivalRatio = (
				main.isPhase2 && main.Period_Count < 8
					? main.selectFrom(pew_survival_ratio_all)
							.where(pew_survival_ratio_all.country_id.eq(main.country_id))
							.where(pew_survival_ratio_all.period_range.eq(period))
							.where(pew_survival_ratio_all.age.eq(cohort))
							.where(pew_survival_ratio_all.sex.eq(gender))
							.uniqueResult(true, pew_survival_ratio_all.sr)
					: main.selectFrom(un_survival_ratio)
							.where(un_survival_ratio.country_id.eq(main.country_id))
							.where(un_survival_ratio.period_range.eq(period))
							.where(un_survival_ratio.cohort.eq(cohort))
							.where(un_survival_ratio.gender.eq(gender))
							.uniqueResult(true, un_survival_ratio.survival_ratio)
			);
		
		int year = (int) floor(main.time(YEAR));
		int yearsPassedInPeriod = year % 5;
		double yearsAgoBorn = age + 1;
		double tc = yearsPassedInPeriod - yearsAgoBorn;
		double powerDenominator = 5 - tc;
		return 1.0 - Math.pow(survivalRatio, 1.0 / powerDenominator);
	}
		

	public static final double getDeathRateFromSurvivalRatio(Main main, String period, double age, Gender_List gender) {
		if (main.ForceUseSplitAge && !main.FiveYearStep && age < 0) {
			throw new IllegalStateException("Must call getInfantDeathRate for infants during 1yr splitFert.");
		}
		// traceln("period: " + period + ", gender: " + gender.toString() + ", age: " + age);
		String cohort = getDeathCohortSurvivalRatio(main, period, age, gender);
		double survivalRatio = (
			main.isPhase2 && main.Period_Count < 8
				? main.selectFrom(pew_survival_ratio_all)
						.where(pew_survival_ratio_all.country_id.eq(main.country_id))
						.where(pew_survival_ratio_all.period_range.eq(period))
						.where(pew_survival_ratio_all.age.eq(cohort))
						.where(pew_survival_ratio_all.sex.eq(gender))
						.uniqueResult(true, pew_survival_ratio_all.sr)
				: main.selectFrom(un_survival_ratio)
						.where(un_survival_ratio.country_id.eq(main.country_id))
						.where(un_survival_ratio.period_range.eq(period))
						.where(un_survival_ratio.cohort.eq(cohort))
						.where(un_survival_ratio.gender.eq(gender))
						.uniqueResult(true, un_survival_ratio.survival_ratio)
		);
		if (main.FiveYearStep) {
			return 1.0 - survivalRatio;
		} else {
			return 1.0 - Math.pow(survivalRatio, 0.2);
		}
	}
	
	// Can remove 'period' and 'gender'
	public static final String getDeathCohortSurvivalRatio(Main main, String period, double age, Gender_List gender) {
		if (age < 0) { return "0-1";}
		else if (age < 5) { return "1-4";}
		else if (age < 10) {return "5-9";}
		else if (age < 15) {return "10-14";}
		else if (age < 20) {return "15-19";}
		else if (age < 25) {return "20-24";}
		else if (age < 30) {return "25-29";}
		else if (age < 35) {return "30-34";}
		else if (age < 40) {return "35-39";}
		else if (age < 45) {return "40-44";}
		else if (age < 50) {return "45-49";}
		else if (age < 55) {return "50-54";}
		else if (age < 60) {return "55-59";}
		else if (age < 65) {return "60-64";}
		else if (age < 70) {return "65-69";}
		else if (age < 75) {return "70-74";}
		else if (age < 80) {return "75-79";}
		else if (age < 85) {return "80-84";}
		else if (age < 90) {return "85-89";}
		else if (age < 95) {return "90-94";}
		else if (age <= 104) {return "95-99";} // 100 yr olds experience 95-99
		else if (age >= 105) {return "100+";}
		else {traceln("Error: age cohort not found"); return "-1";}
	}
	

	public static final Map<Cohort, Integer> getNumEmigrantsPhase2(Main main, String period) {
		Map<Cohort, Integer> toReturn = new HashMap<>();
		for (Affiliation aff : Affiliation.values()) {
			for (Gender_List gender : Gender_List.values()) {
				int total = (int) Math.rint(main.Percent_Pop * main.selectFrom(net_out_migration_per_period_pew)
						.where(net_out_migration_per_period_pew.country_id.eq(main.country_id))
						.where(net_out_migration_per_period_pew.period_range.eq(toPhase2MigrationPeriod(period)))
						.where(net_out_migration_per_period_pew.gender.eq(gender))
						.where(net_out_migration_per_period_pew.affiliation.eq(aff))
						.uniqueResult(net_out_migration_per_period_pew.amount));
				if (total > 0) {
					List<Tuple> ageProp = main.phase2MigrationSchedule;
					for (Tuple t : ageProp) {
						if (!main.FiveYearStep && main.ForceUseSplitAge && t.get(0, String.class).startsWith("0-4")) {
							int year = (int) floor(main.time(YEAR));
							int yearsPassedInPeriod = year % 5;
							for (int curAge = -1; curAge < yearsPassedInPeriod; curAge++) {
								double yearsAgoBorn = curAge + 1;
								double tc = yearsPassedInPeriod - yearsAgoBorn;
								double denominator = (5 - tc) * 5;
								
								int numEmigrants = (int) Math.rint(
										t.get(1, Double.class) 
										* total
										/ denominator);
								if (numEmigrants > 0) {
									String cohort = t.get(0, String.class);
									double age = getEmigrantAgeFromCohortString(cohort);
									toReturn.put(Cohort.getMigrationCohort(age, gender, curAge, main.isPhase2 ? aff : null), numEmigrants);
								}
							}
							
						} else {
						
							int numEmigrants = (int) Math.rint(
									t.get(1, Double.class) 
									* total
									/ (main.FiveYearStep 
											? 1 
											: 25.0));
							if (numEmigrants > 0) {
								String cohort = t.get(0, String.class);
								double age = getEmigrantAgeFromCohortString(cohort);
								toReturn.put(Cohort.getMigrationCohort(age, gender, main.isPhase2 ? aff : null), numEmigrants);
							}
						}
					}
				}
			}
		}
		Map<Cohort, Integer> filterOutFolk = new HashMap<>();
		for (Map.Entry<Cohort, Integer> entry : toReturn.entrySet()) {
			if (entry.getKey().aff != folk_religions) {
				filterOutFolk.put(entry.getKey(), entry.getValue());
			} else {
				Cohort newCohort = entry.getKey().switchToAff(other_religions);
				filterOutFolk.merge(newCohort, entry.getValue(), Integer::sum);
			}
		}
		return filterOutFolk;
	}


	public static final double getEmigrationRate(final Main main, final String period, final Person p) {
		Cohort cohort = Cohort.asMigrationCohort(p);
		main.emigrationRateCache.computeIfAbsent(cohort, k -> {
			double population = main.People.findAll(cohort::includesPerson).size();				
			Double numEmigrants;
			if (main.isPhase2) {
				Integer em = main.emigrationCountCache.get(cohort);
				if (em == null) {
					return 0.0;
				}
				numEmigrants = em.doubleValue();
			} else {
				numEmigrants = getNumEmigrants(main, period, k.age, k.gender);
			}
					
			if (numEmigrants == 0) {
				return 0.0;
			}
			return numEmigrants / population;
		});
		
		return main.emigrationRateCache.get(cohort);
	}
	
	
	public static final Map<Cohort, Integer> getNumEmigrants(Main main, String period) {
		Map<Cohort, Integer> toReturn = new HashMap<>();
		
		int Net_Out_migration_Mal = (int) Math.rint(
				100.0 * main.Percent_Pop * main.selectFrom(net_out_migration_per_period)
				.where(net_out_migration_per_period.country_id.eq(main.country_id))
				.where(net_out_migration_per_period.period_range.eq(period))
				.where(net_out_migration_per_period.gender.eq(MALE))
				.uniqueResult(net_out_migration_per_period.counts));
		if (Net_Out_migration_Mal > 0) {
			List<Tuple> ageProp = main.selectFrom(net_out_mig_age_gender_prop)
					.where(net_out_mig_age_gender_prop.country_id.eq(main.country_id))
					.where(net_out_mig_age_gender_prop.period_range.eq(period))
	                .where(net_out_mig_age_gender_prop.gender.eq(MALE))
	                .list(net_out_mig_age_gender_prop.cohort, net_out_mig_age_gender_prop.amount);
			for (Tuple t : ageProp) {
				if (!main.FiveYearStep && main.ForceUseSplitAge && t.get(0, String.class).startsWith("0-4")) {
					int year = (int) floor(main.time(YEAR));
					int yearsPassedInPeriod = year % 5;
					for (int curAge = -1; curAge < yearsPassedInPeriod; curAge++) {
						double yearsAgoBorn = curAge + 1;
						double tc = yearsPassedInPeriod - yearsAgoBorn;
						double denominator = (5 - tc) * 5;
						
						int numEmigrants = (int) Math.rint(
								t.get(1, Double.class) 
								* Net_Out_migration_Mal 
								/ denominator);
						if (numEmigrants > 0) {
							String cohort = t.get(0, String.class);
							double age = getEmigrantAgeFromCohortString(cohort);
							toReturn.put(Cohort.getMigrationCohort(age, MALE, curAge), numEmigrants);
						}
					}
					
				} else {
				
					int numEmigrants = (int) Math.rint(
							t.get(1, Double.class) 
							* Net_Out_migration_Mal 
							/ (main.FiveYearStep 
									? 1 
									: 25.0));
					if (numEmigrants > 0) {
						String cohort = t.get(0, String.class);
						double age = getEmigrantAgeFromCohortString(cohort);
						toReturn.put(Cohort.getMigrationCohort(age, MALE), numEmigrants);
					}
				}
			}
		}
		
		
		int Net_Out_migration_Fem = (int) Math.rint(
				100.0 * main.Percent_Pop * main.selectFrom(net_out_migration_per_period)
				.where(net_out_migration_per_period.country_id.eq(main.country_id))
				.where(net_out_migration_per_period.period_range.eq(period))
				.where(net_out_migration_per_period.gender.eq(FEMALE))
				.uniqueResult(net_out_migration_per_period.counts));
		if (Net_Out_migration_Fem > 0) {
			List<Tuple> ageProp = main.selectFrom(net_out_mig_age_gender_prop)
					.where(net_out_mig_age_gender_prop.country_id.eq(main.country_id))
					.where(net_out_mig_age_gender_prop.period_range.eq(period))
	                .where(net_out_mig_age_gender_prop.gender.eq(FEMALE))
	                .list(net_out_mig_age_gender_prop.cohort, net_out_mig_age_gender_prop.amount);
			for (Tuple t : ageProp) {
				if (!main.FiveYearStep && main.ForceUseSplitAge && t.get(0, String.class).startsWith("0-4")) {
					int year = (int) floor(main.time(YEAR));
					int yearsPassedInPeriod = year % 5;
					for (int curAge = -1; curAge < yearsPassedInPeriod; curAge++) {
						double yearsAgoBorn = curAge + 1;
						double tc = yearsPassedInPeriod - yearsAgoBorn;
						double denominator = (5 - tc) * 5;
						
						int numEmigrants = (int) Math.rint(
								t.get(1, Double.class) 
								* Net_Out_migration_Fem 
								/ denominator);
						if (numEmigrants > 0) {
							String cohort = t.get(0, String.class);
							double age = getEmigrantAgeFromCohortString(cohort);
							toReturn.put(Cohort.getMigrationCohort(age, FEMALE, curAge), numEmigrants);
						}
					}
				} else {
					int numEmigrants = (int) Math.rint(
							t.get(1, Double.class) 
							* Net_Out_migration_Fem 
							/ (main.FiveYearStep 
									? 1 
									: 25.0));
					if (numEmigrants > 0) {
						String cohort = t.get(0, String.class);
						double age = getEmigrantAgeFromCohortString(cohort);
						toReturn.put(Cohort.getMigrationCohort(age, FEMALE), numEmigrants);
					}
				}
			}
		}

		return toReturn;
	}
	
	public static final double getNumEmigrants(Main main, String period, double age, Gender_List gender) {
		String cohort = 
				age >= 80 
					? "80+" 
					: age <= 3
							? "0-4"
							: String.format("%d-%d", (int) age, ((int)age) + 4);
		
		boolean hasResults = main.selectFrom(net_out_mig_age_gender_prop)
				.where(net_out_mig_age_gender_prop.country_id.eq(main.country_id))
				.where(net_out_mig_age_gender_prop.period_range.eq(period))
                .where(net_out_mig_age_gender_prop.gender.eq(gender))
                .where(net_out_mig_age_gender_prop.cohort.eq(cohort))
                .hasResults();
		if (!hasResults) {
			return 0.0;
		}
		
		if (gender == MALE) {
			int Net_Out_migration_Mal = (int) Math.rint(
					100.0 * main.Percent_Pop *main.selectFrom(net_out_migration_per_period)
					.where(net_out_migration_per_period.country_id.eq(main.country_id))
					.where(net_out_migration_per_period.period_range.eq(period))
					.where(net_out_migration_per_period.gender.eq(MALE))
					.uniqueResult(true, net_out_migration_per_period.counts));
			if (Net_Out_migration_Mal <= 0) {
				return 0.0;
			}

			
			double prop = main.selectFrom(net_out_mig_age_gender_prop)
						.where(net_out_mig_age_gender_prop.country_id.eq(main.country_id))
						.where(net_out_mig_age_gender_prop.period_range.eq(period))
		                .where(net_out_mig_age_gender_prop.gender.eq(MALE))
		                .where(net_out_mig_age_gender_prop.cohort.eq(cohort))
		                .uniqueResult(true, net_out_mig_age_gender_prop.amount);
			// In split age one year step models, infants have some special migration handling.
			if (!main.FiveYearStep && main.ForceUseSplitAge && age <= 3) {
				int year = (int) floor(main.time(YEAR));
				int yearsPassedInPeriod = year % 5;
				double yearsAgoBorn = age + 1;
				double tc = yearsPassedInPeriod - yearsAgoBorn;
				double denominator = (5 - tc) * 5;
				
				int numEmigrants = (int) Math.rint(
						prop
						* Net_Out_migration_Mal 
						/ denominator);
				return numEmigrants;
			} else {
			
				int numEmigrants = (int) Math.rint(
						prop
						* Net_Out_migration_Mal 
						/ (main.FiveYearStep 
								? 1 
								: 25.0));
				return numEmigrants;
			}
		}
	
		if (gender == FEMALE) {
			int Net_Out_migration_Fem = (int) Math.rint(
					100.0 * main.Percent_Pop *main.selectFrom(net_out_migration_per_period)
					.where(net_out_migration_per_period.country_id.eq(main.country_id))
					.where(net_out_migration_per_period.period_range.eq(period))
					.where(net_out_migration_per_period.gender.eq(FEMALE))
					.uniqueResult(true, net_out_migration_per_period.counts));
			if (Net_Out_migration_Fem <= 0) {
				return 0.0;
			}

			
			double prop = main.selectFrom(net_out_mig_age_gender_prop)
						.where(net_out_mig_age_gender_prop.country_id.eq(main.country_id))
						.where(net_out_mig_age_gender_prop.period_range.eq(period))
		                .where(net_out_mig_age_gender_prop.gender.eq(FEMALE))
		                .where(net_out_mig_age_gender_prop.cohort.eq(cohort))
		                .uniqueResult(true, net_out_mig_age_gender_prop.amount);
			// In split age one year step models, infants have some special migration handling.
			if (!main.FiveYearStep && main.ForceUseSplitAge && age <= 3) {
				int year = (int) floor(main.time(YEAR));
				int yearsPassedInPeriod = year % 5;
				double yearsAgoBorn = age + 1;
				double tc = yearsPassedInPeriod - yearsAgoBorn;
				double denominator = (5 - tc) * 5;
				
				int numEmigrants = (int) Math.rint(
						prop
						* Net_Out_migration_Fem 
						/ denominator);
				return numEmigrants;
			} else {
			
				int numEmigrants = (int) Math.rint(
						prop
						* Net_Out_migration_Fem 
						/ (main.FiveYearStep 
								? 1 
								: 25.0));
				return numEmigrants;
			}
		}
		
		return 0.0;
	}

	public static final String toPhase2MigrationPeriod(String period) {
		String[] parts = period.split("-");
		
		if (parts.length == 2) {
			try {
				int x = Integer.parseInt(parts[0]);
				int y = Integer.parseInt(parts[1]);
				
				int z = y + 1;
				
				return x + "-" + z;
				
			} catch (NumberFormatException e) {
				throw new IllegalStateException("Invalid Period format");
			}
		} else {
			throw new IllegalStateException("Invalid Period format");	
		}
	}

	public static final Map<Cohort, Integer> getNumImmigrantsPhase2(Main main, String period) {
		Map<Cohort, Integer> toReturn = new HashMap<>();
		for (Affiliation aff : Affiliation.values()) {
			for (Gender_List gender : Gender_List.values()) {
				int total = (int) Math.rint(main.Percent_Pop * main.selectFrom(net_in_migration_per_period_pew)
						.where(net_in_migration_per_period_pew.country_id.eq(main.country_id))
						.where(net_in_migration_per_period_pew.period_range.eq(toPhase2MigrationPeriod(period)))
						.where(net_in_migration_per_period_pew.gender.eq(gender))
						.where(net_in_migration_per_period_pew.affiliation.eq(aff))
						.uniqueResult(net_in_migration_per_period_pew.amount));
				if (total > 0) {
					List<Tuple> ageProp = main.phase2MigrationSchedule;
					for (Tuple t : ageProp) {
						if (!main.FiveYearStep && main.ForceUseSplitAge && t.get(0, String.class).startsWith("0-4")) {
							int year = (int) floor(main.time(YEAR));
							int yearsPassedInPeriod = year % 5;
							for (int curAge = -1; curAge < yearsPassedInPeriod; curAge++) {
								double yearsAgoBorn = curAge + 1;
								double tc = yearsPassedInPeriod - yearsAgoBorn;
								double denominator = (5 - tc) * 5;
								
								int numEmigrants = (int) Math.rint(
										t.get(1, Double.class) 
										* total
										/ denominator);
								if (numEmigrants > 0) {
									String cohort = t.get(0, String.class);
									double age = getEmigrantAgeFromCohortString(cohort);
									toReturn.put(Cohort.getMigrationCohort(age, gender, curAge, main.isPhase2 ? aff : null), numEmigrants);
								}
							}
							
						} else {
						
							int numEmigrants = (int) Math.rint(
									t.get(1, Double.class) 
									* total
									/ (main.FiveYearStep 
											? 1 
											: 25.0));
							if (numEmigrants > 0) {
								String cohort = t.get(0, String.class);
								double age = getEmigrantAgeFromCohortString(cohort);
								toReturn.put(Cohort.getMigrationCohort(age, gender, main.isPhase2 ? aff : null), numEmigrants);
							}
						}
					}
				}
			}
		}
		
		Map<Cohort, Integer> filterOutFolk = new HashMap<>();
		for (Map.Entry<Cohort, Integer> entry : toReturn.entrySet()) {
			if (entry.getKey().aff != folk_religions) {
				filterOutFolk.put(entry.getKey(), entry.getValue());
			} else {
				Cohort newCohort = entry.getKey().switchToAff(other_religions);
				filterOutFolk.merge(newCohort, entry.getValue(), Integer::sum);
			}
		}
		return filterOutFolk;
	}
	
	
	public static final int getNumFemaleImmigrants(Main main, String period) {
		return (int) Math.rint(100.0 * main.Percent_Pop * main.selectFrom(net_in_migration_per_period)
				.where(net_in_migration_per_period.country_id.eq(main.country_id))
				.where(net_in_migration_per_period.period_range.eq(period))
				.where(net_in_migration_per_period.gender.eq(FEMALE))
				.uniqueResult(true, net_in_migration_per_period.counts)
				/ (main.FiveYearStep ? 1 : 5.0));
	}
	
	public static final int getNumMaleImmigrants(Main main, String period) {
		return (int) Math.rint(100.0 * main.Percent_Pop * main.selectFrom(net_in_migration_per_period)
				.where(net_in_migration_per_period.country_id.eq(main.country_id))
				.where(net_in_migration_per_period.period_range.eq(period))
				.where(net_in_migration_per_period.gender.eq(MALE))
				.uniqueResult(true, net_in_migration_per_period.counts)
				/ (main.FiveYearStep ? 1 : 5.0));
	}
	
	public static final Map<Cohort, Double> getImmigrantsWeights(Main main, String period, Gender_List gender) {
		Map<Cohort, Double> toReturn = new HashMap<>();
		
		List<Tuple> ageProp = main.selectFrom(net_in_mig_age_gender_prop)
				.where(net_in_mig_age_gender_prop.country_id.eq(main.country_id))
				.where(net_in_mig_age_gender_prop.period_range.eq(period))
                .where(net_in_mig_age_gender_prop.gender.eq(gender))
                .where(net_in_mig_age_gender_prop.amount.gt(0.0))
                .list(net_in_mig_age_gender_prop.cohort, net_in_mig_age_gender_prop.amount);
		for (Tuple t : ageProp) {
			double weight = t.get(1, Double.class);
			String cohort = t.get(0, String.class);
			double age = getEmigrantAgeFromCohortString(cohort);
			toReturn.put(Cohort.getMigrationCohort(age, gender), weight);
		}

		return toReturn;
	}
	
	public static final Map<Cohort, Integer> getNumImmigrants(Main main, String period) {
		Map<Cohort, Integer> toReturn = new HashMap<>();
		
		int Net_In_migration_Mal = getNumMaleImmigrants(main, period);
		if (Net_In_migration_Mal > 0) {
			List<Tuple> ageProp = main.selectFrom(net_in_mig_age_gender_prop)
					.where(net_in_mig_age_gender_prop.country_id.eq(main.country_id))
					.where(net_in_mig_age_gender_prop.period_range.eq(period))
	                .where(net_in_mig_age_gender_prop.gender.eq(MALE))
	                .list(net_in_mig_age_gender_prop.cohort, net_in_mig_age_gender_prop.amount);
			for (Tuple t : ageProp) {
				// In split age one year step models, infants have some special migration handling.
				if (!main.FiveYearStep && main.ForceUseSplitAge && t.get(0, String.class).startsWith("0-4")) {
					int year = (int) floor(main.time(YEAR));
					int yearsPassedInPeriod = year % 5;
					for (int curAge = 0; curAge <= yearsPassedInPeriod; curAge++) {
						double tc = yearsPassedInPeriod - curAge;
						double denominator = (5 - tc) * 5;
						
						int numImmigrants = (int) Math.rint(
								5.0
								* t.get(1, Double.class) 
								* Net_In_migration_Mal 
								/ denominator);
						if (numImmigrants > 0) {
							String cohort = t.get(0, String.class);
							double age = getEmigrantAgeFromCohortString(cohort);
							toReturn.put(Cohort.getMigrationCohort(age, MALE, curAge), numImmigrants);
						}
					}
				} else {
					int numImmigrants = (int) Math.rint(t.get(1, Double.class) * Net_In_migration_Mal);
					if (numImmigrants > 0) {
						String cohort = t.get(0, String.class);
						double age = getEmigrantAgeFromCohortString(cohort);
						toReturn.put(Cohort.getMigrationCohort(age, MALE), numImmigrants);
					}
				}
			}
		}
		
		
		int Net_In_migration_Fem = getNumFemaleImmigrants(main, period);
		if (Net_In_migration_Fem > 0) {
			List<Tuple> ageProp = main.selectFrom(net_in_mig_age_gender_prop)
					.where(net_in_mig_age_gender_prop.country_id.eq(main.country_id))
					.where(net_in_mig_age_gender_prop.period_range.eq(period))
	                .where(net_in_mig_age_gender_prop.gender.eq(FEMALE))
	                .list(net_in_mig_age_gender_prop.cohort, net_in_mig_age_gender_prop.amount);
			for (Tuple t : ageProp) {
				// In split age one year step models, infants have some special migration handling.
				if (!main.FiveYearStep && main.ForceUseSplitAge && t.get(0, String.class).startsWith("0-4")) {
					int year = (int) floor(main.time(YEAR));
					int yearsPassedInPeriod = year % 5;
					for (int curAge = 0; curAge <= yearsPassedInPeriod; curAge++) {
						double tc = yearsPassedInPeriod - curAge;
						double denominator = (5 - tc) * 5;
						
						int numImmigrants = (int) Math.rint(
								5.0
								* t.get(1, Double.class) 
								* Net_In_migration_Fem 
								/ denominator);
						if (numImmigrants > 0) {
							String cohort = t.get(0, String.class);
							double age = getEmigrantAgeFromCohortString(cohort);
							toReturn.put(Cohort.getMigrationCohort(age, FEMALE, curAge), numImmigrants);
						}
					}
				} else {
					int numImmigrants = (int) Math.rint(t.get(1, Double.class) * Net_In_migration_Fem);
					if (numImmigrants > 0) {
						String cohort = t.get(0, String.class);
						double age = getEmigrantAgeFromCohortString(cohort);
						toReturn.put(Cohort.getMigrationCohort(age, FEMALE), numImmigrants);
					}
				}
			}
		}

		return toReturn;
	}
	
	public static final double getEmigrantAgeFromCohortString(String cohort) {
		int dashIndex = cohort.indexOf('-');
		if (dashIndex > 0) {
			return Integer.parseInt(cohort.substring(0, dashIndex));
		}
		int plusIndex = cohort.indexOf('+');
		if (plusIndex > 0) {
			return Integer.parseInt(cohort.substring(0, plusIndex));
		}
		throw new IllegalStateException("Error with cohort age group");
	}
	
	public static final Affiliation getAffiliation(Main main, Gender_List gender, double age) {
		//Calculations given sex/age for the religious affiliation
		//pull data from male/female datasets
		//To get rel-affl -> random number 0-1, with >4 decimal places
			//Use the interval sum method to see if the random number falls within each 
			//religious percentage interval, assign religion if number is within interval
		double affProb = main.uniform();
		double cumulativeProb = 0;
		for (Affiliation aff : Affiliation.values()) {
			cumulativeProb += affiliationProb(main, gender, age, aff);
			if (affProb < cumulativeProb) {
				return aff;
			}
		}
		// Default case:
		throw new IllegalStateException("Could not calculate affiliation.");
	}
	
	private static final double affiliationProb(Main main, Gender_List gender, double age, Affiliation aff) {
		// Get row by gender and age
		SelectQuery ageAndGenderQ = main.selectFrom(init_aff_dist_2010)
				.where(init_aff_dist_2010.gender.eq(gender))
				.where(init_aff_dist_2010.age.eq(ageToAgeRange(age)));
		
		// Get affiliation column
		switch(aff) {
		case buddhists:
			return ageAndGenderQ.uniqueResult(true, init_aff_dist_2010.buddhists);
		case christians:
			return ageAndGenderQ.uniqueResult(true, init_aff_dist_2010.christians);
		case folk_religions:
			return ageAndGenderQ.uniqueResult(true, init_aff_dist_2010.folk_religions);
		case hindus:
			return ageAndGenderQ.uniqueResult(true, init_aff_dist_2010.hindus);
		case jews:
			return ageAndGenderQ.uniqueResult(true, init_aff_dist_2010.jews);
		case muslims:
			return ageAndGenderQ.uniqueResult(true, init_aff_dist_2010.muslims);
		case other_religions:
			return ageAndGenderQ.uniqueResult(true, init_aff_dist_2010.other_religions);
		case unaffiliated:
			return ageAndGenderQ.uniqueResult(true, init_aff_dist_2010.unaffiliated);
		default:
			throw new IllegalStateException("Error with agent affiliation group");
		}
	}
	
	private static final String ageToAgeRange(double age) {
		// ArrayList<String> possibleAgeRange = new ArrayList<String>() {
        //     {
        //         add("0-4");
        //         add("5-9");
        //         add("10-14");
        //         add("15-19");
        //         add("20-24");
        //         add("25-29");
        //         add("30-34");
        //         add("35-39");
        //         add("40-44");
        //         add("45-49");
        //         add("50-54");
        //         add("55-59");
        //         add("60-64");
        //         add("65-69");
        //         add("70-74");
        //         add("75-79");
        //         add("80-84");
        //         add("85-89");
        //         add("90-94");
        //         add("95+");
        //     }
        // };
		// TODO: discuss what to do with negative age
		if (age < 5) {
			return "0-4";
		}
		if (age >= 95) {
			return "95+";
		}
		int roundedDown = (int)Math.round(age - (age % 5));
		String ageRange = roundedDown + "-" + (roundedDown + 4);
		if(!possibleAgeRange.contains(ageRange)) {
			throw new IllegalStateException("Bad ageRange: " + ageRange);
		}
		return ageRange;
	}
	
	  public static final boolean canSwitch(Person p) {
	    	Main main = p.get_Main();
	    	double age = p.Age;
	    	Gender_List gender = p.Gender;
	    	Affiliation aff = p.Affiliation;
	    	
	    	return DBUtils.switchableCohort(main, age, gender, aff);
	    }
	    
	    private static final boolean switchableCohort(Main main, double age, Gender_List gender, Affiliation aff) {
	    	String ageRange = ageToAgeRange(age);
	    	
	    	Double switchProb = main.selectFrom(pew_switch_rate_all)
	    			.where(pew_switch_rate_all.country_id.eq(main.country_id))
					.where(pew_switch_rate_all.affiliation.eq(aff))
					.where(pew_switch_rate_all.age.eq(ageRange))
					.where(pew_switch_rate_all.gender.eq(gender))
					.firstResult(true, pew_switch_rate_all.switch_rt);
	    	
	    	if (switchProb == null) {
	    		return false;
	    	}
	    	return true;
	    }
	    
	    public static final Map<Affiliation, Double> getSwitchRates(Main main, Cohort cohort) {
	    	double age = cohort.age;
	    	Gender_List gender = cohort.gender;
	    	Affiliation aff = cohort.aff;
	    	
	    	return DBUtils.listSwitchRates(main, age, gender, aff);
	    }
	    
	    public static final Map<Affiliation, Double> getSwitchRates(Person p) {
	    	Main main = p.get_Main();
	    	double age = p.Age;
	    	Gender_List gender = p.Gender;
	    	Affiliation aff = p.Affiliation;
	    	
	    	return DBUtils.listSwitchRates(main, age, gender, aff);
	    }
	    
	    private static final Map<Affiliation, Double> listSwitchRates(Main main, double age, Gender_List gender, Affiliation aff) {
	    	String ageRange = ageToAgeRange(age);
	    	
	    	List<Tuple> switchRates = main.selectFrom(pew_switch_rate_all)
	    			.where(pew_switch_rate_all.country_id.eq(main.country_id))
					.where(pew_switch_rate_all.affiliation.eq(aff))
					.where(pew_switch_rate_all.age.eq(ageRange))
					.where(pew_switch_rate_all.gender.eq(gender))
					.list(pew_switch_rate_all.switch_rt, pew_switch_rate_all.destination);
	    	
	    	return switchRates.stream()
	    			.collect(Collectors.toMap(
	    					t -> t.get(pew_switch_rate_all.destination),
	    					t -> t.get(pew_switch_rate_all.switch_rt)));
	    }
	    
	

	public static final double getSwitchingThreshold(Main main) {
		final String period = main.Periods.get(main.Period_Count);
		Integer year = Integer.parseInt(period.substring(0, 4));
		return main.selectFrom(switching_thresholds)
				.where(switching_thresholds.country_id.eq(main.country_id))
				.where(switching_thresholds.year.eq(year))
				.where(switching_thresholds.version.eq("Mock1"))
				.uniqueResult(true, switching_thresholds.switch_threshold);
	}
	
	public static final double getDisaffiliationThreshold(Main main) {
		final String period = main.Periods.get(main.Period_Count);
		int year = Integer.parseInt(period.substring(0, 4));
		return main.selectFrom(switching_thresholds)
				.where(switching_thresholds.country_id.eq(main.country_id))
				.where(switching_thresholds.year.eq(year))
				.where(switching_thresholds.version.eq("Mock1"))
				.uniqueResult(true, switching_thresholds.disaffiliation_threshold);
	}
	

	private static final int GDP_INDEX = 0;
	private static final int LIFE_EXPECTANCY_INDEX = 1;
	private static final int EDUCATION_INDEX = 2;
	private static final int HRI_INDEX = 3;
	private static final int GINI_INDEX = 4;
	private static final int ECL_INDEX = 5;
	private static final int WCS_INDEX = 6;
	private static final int LOG_GDP_INDEX = 7;
	private static final double NOT_AVAILABLE = -999;
	// For some reason AnyLogics db caching seems to be performing poorly for this function
	// So we have a DYI solution.
	private static Tuple homophilyCache = null;
	private static int homophilyCacheCountryId = -1;
	private static int homophilyCacheYear = -1;
	private static final Optional<Tuple> getRawHomophilyData(Main main) {
		final String period = main.Periods.get(main.Period_Count);
		int yearPeriodStart = Integer.parseInt(period.substring(0, 4));
		int year = yearPeriodStart + ((int) main.time() % 5);
		
		if (main.country_id == homophilyCacheCountryId && (homophilyCacheYear == year || year >= 2018)) {
			return Optional.of(homophilyCache);
		}
		
		Tuple t = main.selectFrom(homophily_minmax_scaled)
			.where(homophily_minmax_scaled.country_id.eq(main.country_id))
			.where(homophily_minmax_scaled.year.eq(year))
			.firstResult(true, 
							homophily_minmax_scaled.gdp,		//0
							homophily_minmax_scaled.lifeexp,	//1
							homophily_minmax_scaled.edyrs,		//2
							homophily_minmax_scaled.hri,		//3
							homophily_minmax_scaled.gini,		//4
							homophily_minmax_scaled.ecl,		//5
							homophily_minmax_scaled.wcs,		//6
							homophily_minmax_scaled.log_gdp);	//7
		if (t == null && homophilyCache != null) {
			return Optional.of(homophilyCache);
		} else if (t == null) {
			return Optional.empty();
		}
		
		homophilyCache = t;
		homophilyCacheYear = year;
		homophilyCacheCountryId = main.country_id;
		return Optional.of(t);
	}
	private static double mostRecentLogGDP = 0.1;
	public static final double getLifestyleOpportunity(Main main) {
		return 0.022629;
		/*
		Optional<Tuple> t = getRawHomophilyData(main);
		if (t.isEmpty()) {
			return mostRecentLogGDP;
		}
		Double value = t.get().get(LOG_GDP_INDEX, Double.class);
		if (value == -999.0 || value == null) {
			return mostRecentLogGDP;
		}
		mostRecentLogGDP = value;
		
		return mostRecentLogGDP;
		*/
	}
	
	private static double mostRecentHRI = 0.1;
	public static final double getFreedom(Main main) {
		return 0.3705;
		/*
		Optional<Tuple> t = getRawHomophilyData(main);
		if (t.isEmpty()) {
			return mostRecentHRI;
		}
		Double value = t.get().get(HRI_INDEX, Double.class);
		if (value == -999.0 || value == null) {
			return mostRecentHRI;
		}
		mostRecentHRI = value;
		
		return value;
		*/
	}
	
	private static double mostRecentLifeExpectancy = 0.1;
	public static final double getExistentialSecurity(Main main) {
		return 0.2676;
		/*
		Optional<Tuple> t = getRawHomophilyData(main);
		if (t.isEmpty()) {
			return mostRecentLifeExpectancy;
		}
		Double value = t.get().get(LIFE_EXPECTANCY_INDEX, Double.class);
		if (value ==-999.0 || value == null) {
			return mostRecentLifeExpectancy;
		}
		mostRecentLifeExpectancy = value;
		
		return value;
		*/
	}
	
	public static final double getReligiousEducation(Main main) {
		return 1 - getSecularEducation(main);
	}
	
	private static double mostRecentSecularEducationValue = 0.1;
	public static final double getSecularEducation(Main main) {
		Optional<Tuple> t = getRawHomophilyData(main);
		if (t.isEmpty()) {
			return mostRecentSecularEducationValue;
		}
		Double value = t.get().get(EDUCATION_INDEX, Double.class);
		if (value == -999.0 || value == null) {
			return mostRecentSecularEducationValue;
		}
		mostRecentSecularEducationValue = value;
		
		return value;
	}
	
	public static final double getInteractionEduBias(Main main) {
		/*Optional<Tuple> t = getRawHomophilyData(main);
		if (t.isEmpty()) {
			return 5;
		}
		Double value = t.get().get(GINI_INDEX, Double.class);
		if (value == -999.0 || value == null) {
			return 5;
		}*/
		
		double value = 0.225;
		return value * 10 + 1;
	}
	
	public static final double getInteractionGroupBias(Main main) {
		/*
		Optional<Tuple> t = getRawHomophilyData(main);
		if (t.isEmpty()) {
			return 5;
		}
		Double value = t.get().get(ECL_INDEX, Double.class);
		if (value == -999.0 || value == null) {
			return 5;
		} */
		double value = 0.643875;
		return (1 - value) * 10 + 1;
	}
	
	public static final double getInteractionGenderBias(Main main) {
		/*Optional<Tuple> t = getRawHomophilyData(main);
		if (t.isEmpty()) {
			return 5;
		}
		Double value = t.get().get(WCS_INDEX, Double.class);
		if (value == -999.0 || value == null) {
			return 5;
		}*/
		double value = 0.599;
		return (1 - value) * 10 + 1;
	}
	
	public static final double getCouplingEduBias(Main main) {
		/*Optional<Tuple> t = getRawHomophilyData(main);
		if (t.isEmpty()) {
			return 5;
		}
		Double value = t.get().get(GINI_INDEX, Double.class);
		if (value == -999.0 || value == null) {
			return 5;
		}*/
		
		double value = 0.225;
		return value * 10 + 1;
	}
	
	public static final double getCouplingGroupBias(Main main) {
		/*
		Optional<Tuple> t = getRawHomophilyData(main);
		if (t.isEmpty()) {
			return 5;
		}
		Double value = t.get().get(ECL_INDEX, Double.class);
		if (value == -999.0 || value == null) {
			return 5;
		} */
		double value = 0.643875;
		return (1 - value) * 10 + 1;
	}
	
	public static final double getCouplingGenderBias(Main main) {
		/*Optional<Tuple> t = getRawHomophilyData(main);
		if (t.isEmpty()) {
			return 5;
		}
		Double value = t.get().get(WCS_INDEX, Double.class);
		if (value == -999.0 || value == null) {
			return 5;
		}*/
		double value = 0.599;
		return (1 - value) * 10 + 1;
	}
	
	private DBUtils() {}

}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1631550869382</Id>
			<Name><![CDATA[Utils]]></Name>
			<Text><![CDATA[

/**
 * Utils
 */	
public class Utils implements Serializable {

    private Utils() {}
    

}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1631551080184</Id>
			<Name><![CDATA[Cohort]]></Name>
			<Text><![CDATA[import java.util.function.Predicate;
/**
 * Cohort is a very important class for the model. Cohort
 * is used as a key for grouping agents, meaning it MUST
 * have a correct hash function, equals(), and compare:
 * if two cohorts are equal, hash functions must be identical,
 * equals must return true, and compare must return 0.
 * 
 * For five year step, cohorts represent each age sex cohort by
 * 5 year age group.
 * 
 * For one year steps, each age has a separate cohort group -
 * cohorts are not just 5 year age groups. Very importantly,
 * in split age models, Cohort is where the age that will be
 * used for mortality / migration risk is set.
 */	
public class Cohort implements Comparable<Cohort>{

	// Cohorts can be used for migration, mortality, or fertility.
	// Type is important for cohort equality and selecting age.
	private static enum CohortType {MIGRATION, MORTALITY, FERTILITY, SWITCH};
	
	/**
	 * age is the age that will be used for Cohort risk. age may or
	 * may not equal curAge.
	 * 
	 * For five year step models, curAge is irrelevant and set to -1.
	 */
	public final double age;
	/**
	 * curAge is the actual current age of the agents represented in the
	 * cohort.
	 * 
	 * For example, in a one year split age model, an agent aged 47 will have
	 * a cohort with curAge == 47, but age will be either 40 or 45 depending
	 * on whether the agent was < 45 or not at period start.
	 */
	public final double curAge;
	public final Gender_List gender;
	public final Affiliation aff;
	public final CohortType type;
	
	private static final Cohort asCohort(Person p, CohortType type) {
		switch(type) {
			case MIGRATION:
				return asMigrationCohort(p);
			case MORTALITY:
				return asDeathCohort(p);
			case FERTILITY:
				return asFertilityCohort(p);
			case SWITCH:
				return asSwitchCohort(p);
		}
		throw new IllegalStateException();
	}
	
	public static final Cohort asDeathCohort(Person p) {
		Main m = p.get_Main();
		if (!m.FiveYearStep) {
			if (m.ForceUseSplitAge) {
				// For mortality, the age of the agent at the start of the period is used for risk
				return getDeathCohort(p.Age_At_Period_Start, p.Gender, p.Age);
			} else {
				return getDeathCohort(p.Age, p.Gender, p.Age);
			}
		}
		return getDeathCohort(p.Age, p.Gender);
	}
	
	public static final Cohort asMigrationCohort(Person p) {
		Main m = p.get_Main();
		Affiliation aff = m.isPhase2 ? p.Affiliation : null;
		if (!m.FiveYearStep) {
			if (m.ForceUseSplitAge) {
				// For migration, the age of the agent at the end of the period is used for risk
				return getMigrationCohort(p.Age_At_Period_End, p.Gender, p.Age, aff);
			} else {
				return getMigrationCohort(p.Age, p.Gender, p.Age, aff);
			}
		}
		return getMigrationCohort(p.Age, p.Gender, aff);
	}
	
	public static final Cohort asFertilityCohort(Person p) {
		if (p.get_Main().isPhase2) {
			return getFertilityCohort(p.Age, p.Gender, p.Affiliation);
		}
		return getFertilityCohort(p.Age, p.Gender);
	}
	
	public static final Cohort asSwitchCohort(Person p) {
		return getSwitchCohort(p.Age, p.Gender, p.Affiliation);
	}
	
	// Various factory methods - curAge is irrelevant to five year step, so we have
	// factory methods that don't take a curAge.
	
	public static final Cohort getMigrationCohort(double age, Gender_List gender) {
		return new Cohort(age, gender, CohortType.MIGRATION);
	}
	
	public static final Cohort getMigrationCohort(double age, Gender_List gender, Affiliation aff) {
		return new Cohort(age, gender, CohortType.MIGRATION, aff);
	}
	
	public static final Cohort getDeathCohort(double age, Gender_List gender) {
		return new Cohort(age, gender, CohortType.MORTALITY);
	}
	
	public static final Cohort getMigrationCohort(double age, Gender_List gender, double curAge) {
		return new Cohort(age, gender, CohortType.MIGRATION, curAge);
	}
	
	public static final Cohort getMigrationCohort(double age, Gender_List gender, double curAge, Affiliation aff) {
		return new Cohort(age, gender, CohortType.MIGRATION, curAge, aff);
	}
	
	
	public static final Cohort getDeathCohort(double age, Gender_List gender, double curAge) {
		return new Cohort(age, gender, CohortType.MORTALITY, curAge);
	}
	
	public static final Cohort getFertilityCohort(double age, Gender_List gender) {
		return new Cohort(age, gender, CohortType.FERTILITY, age);
	}
	
	public static final Cohort getFertilityCohort(double age, Gender_List gender, Affiliation aff) {
		return new Cohort(age, gender, CohortType.FERTILITY, age, aff);
	}
	
	public static final Cohort getSwitchCohort(double age, Gender_List gender, Affiliation aff) {
		return new Cohort(age, gender, CohortType.SWITCH, aff);
	}
    
	protected Cohort(double age, Gender_List gender, CohortType type) {
		this(age, gender, type, -1.0);
    }
	
	protected Cohort(double age, Gender_List gender, CohortType type, double curAge) {
		this(age, gender, type, curAge, null);
	}
	
	protected Cohort(double age, Gender_List gender, CohortType type, Affiliation aff) {
		this(age, gender, type, -1.0, aff);
	}
	
	protected Cohort(double age, Gender_List gender, CohortType type, double curAge, Affiliation aff) {
		if (type == CohortType.MIGRATION && age >= 80) {
			// For migration, the rate for 80 is used for all 80+
			this.age = 80;
		} else if (age < 0) {
			this.age = age;
		} else {
			// Age will always be the lower edge of the cohort age range.
			this.age = age - (age % 5);
		}
		this.gender = gender;
		this.type = type;
		this.curAge = curAge;
		this.aff = aff;
    }
	
	public Cohort switchToAff(Affiliation aff) {
		return new Cohort(this.age, this.gender, this.type, this.curAge, aff);
	}
	
	public double lowerAge() {
		return age - (age % 5);
	}
	
	public boolean isChildBearing() {
		return 15 <= age && age < 50 && gender == FEMALE;
	}
	
	public boolean includesPerson(Person p) {
		Cohort c = asCohort(p, this.type);
		return c.equals(this);
	}
	
	@Override
	public boolean equals(Object o) {
		if (o instanceof Cohort) {
			Cohort c = (Cohort) o;
			return (c.age == this.age
					&& c.gender == this.gender
					&& c.curAge == this.curAge
					&& c.aff == this.aff
					&& c.type == this.type);
		}
		return false;
	}
	
	@Override
	public int compareTo(Cohort c) {
		double typeCompare = this.type.ordinal() - c.type.ordinal();
		if (typeCompare != 0) {
			return typeCompare > 0 ? 1 : -1;
		}
		
		double ageCompare = this.age - c.age;
		if (ageCompare != 0) {
			return ageCompare > 0 ? 1 : -1;
		}

		double curAgeCompare = this.curAge - c.curAge;
		if (curAgeCompare != 0) {
			return curAgeCompare > 0 ? 1 : -1;
		}
		
		double affCompare = (
			this.aff != null && c.aff != null
				? this.aff.ordinal() - c.aff.ordinal()
				: 0
		);
		if (affCompare != 0) {
			return affCompare > 0 ? 1 : -1;
		}
		
		if (c.gender == this.gender) {
			return 0;
		} else if (c.gender == MALE) {
			return 1;
		} else {
			return -1;
		}
	}
	
	@Override
	public int hashCode() {
		double hashVal = 17 * (gender == MALE ? 2 : 1) * (age + 31) * (curAge + 31);
		if (this.aff != null) {
			double affVal = this.aff.ordinal() + 43;
			return ((Double)(hashVal * affVal)).intValue();
		}
		return ((Double)(hashVal)).intValue();
	}

	@Override
	public String toString() {
		return age + " " + gender.toString();
	}

}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1697123026535</Id>
			<Name><![CDATA[PersonReligiosity]]></Name>
			<Text><![CDATA[import java.util.function.Supplier;

public class PersonReligiosity {
	
	private static PersonReligiosity DUMMY_INSTANCE =  new PersonReligiosity.Builder()
			.edu(false)
			.married(false)
			.group(Group.USA_White)
			.strictness(0.0)
			.attitudes(new HashMap<>())
			.switchFrustration(0.0)
			.disaffFrustration(0.0)
			.publicPractice(0.0)
			.privatePractice(0.0)
			.supernaturalWorldview(0.0)
			.importance(0.0)
			.age(0.0)
			.gender(Gender_List.FEMALE)
			.person(() -> null)
			.isImmigrant(false)
			.build();
	
	  Boolean edu;
	  Boolean married;
	  Group group;
	  double strictness;
	  Map<Affiliation, Double> attitudes;
	  double switchFrustration;
	  double disaffFrustration;
	  Affiliation affiliation;
	  double publicPractice;
	  double privatePractice;
	  double supernaturalWorldview;
	  double importance;
	  double age;
	  Gender_List gender;
	  // Making this a supplier to support lazy loading
	  Supplier<Person> person;
	  int personId;
	  int motherId;
	  int fatherId;
	  Boolean isImmigrant;
	
	  public Boolean getEdu(){ return edu;}
	  public Boolean getMarried(){ return married;}
	  public Group getGroup(){ return group;}
	  public double getStrictness(){ return strictness;}
	  public Map<Affiliation, Double> getAttitudes(){ return attitudes;}
	  public double getSwitchFrustration(){ return switchFrustration;}
	  public double getDisaffFrustration(){ return disaffFrustration;}
	  public Affiliation getAffiliation(){ return affiliation;}
	  public double getPublicPractice(){ return publicPractice;}
	  public double getPrivatePractice(){ return privatePractice;}
	  public double getSupernaturalWorldview(){ return supernaturalWorldview;}
	  public double getImportance(){ return importance;}
	  public Gender_List getGender() { return gender;}
	  public double getAge(){ return age;}
	  public Person getPerson() { return person.get(); }
	  public int getPersonId() { return personId; }
	  public int getMotherId() { return motherId; }
	  public int getFatherId() { return fatherId; }
	  public Boolean getIsImmigrant() { return isImmigrant; }
	  
	  public static PersonReligiosity dummy() {
		  return PersonReligiosity.DUMMY_INSTANCE;
	  }
	  
	  public static PersonReligiosity from(Person p) {
		  return new PersonReligiosity.Builder()
					.edu(p.edu)
					.married(p.married)
					.group(p.group)
					.strictness(p.strictness)
					.attitudes(p.attitudes)
					.switchFrustration(p.switchFrustration)
					.disaffFrustration(p.disaffFrustration)
					.affiliation(p.Affiliation)
					.publicPractice(p.publicPractice)
					.privatePractice(p.privatePractice)
					.supernaturalWorldview(p.supernaturalWorldview)
					.importance(p.importance)
					.age(p.Age)
					.gender(p.Gender)
					.person(() -> p)
					.personId(p.getId())
					.motherId(p.motherId)
					.fatherId(p.fatherId)
					.isImmigrant(p.Nativity == Nativity_Level.NON_NATIVE)
					.build();
	  }
	  
	  public String toHRString() {
		  StringBuilder csv = new StringBuilder();
		  csv.append("Affiliation: ").append(affiliation).append(",");
		  csv.append("Public Practice: ").append(publicPractice).append(",");
		  csv.append("Private Practice: ").append(privatePractice).append(",");
		  csv.append("Supernatural Worldview: ").append(supernaturalWorldview).append(",");
		  csv.append("Importance: ").append(importance).append(",");
		  csv.append("Gender: ").append(gender).append(",");
		  csv.append("Age: ").append(age).append(",");
		  csv.append("Person: ").append(person).append(",");
		  csv.append("Education: ").append(edu).append(",");
		  csv.append("Marital Status: ").append(married).append(",");
		  csv.append("Group: ").append(group).append(",");
		  csv.append("Strictness: ").append(strictness).append(",");
		  csv.append("Buddhists Attitude: ").append(attitudes.get(Affiliation.buddhists)).append(",");
		  csv.append("Christians Attitude: ").append(attitudes.get(Affiliation.christians)).append(",");
		  csv.append("Hindus Attitude: ").append(attitudes.get(Affiliation.hindus)).append(",");
		  csv.append("Jews Attitude: ").append(attitudes.get(Affiliation.jews)).append(",");
		  csv.append("Muslims Attitude: ").append(attitudes.get(Affiliation.muslims)).append(",");
		  csv.append("Unaffiliated Attitude: ").append(attitudes.get(Affiliation.unaffiliated)).append(",");
		  csv.append("Other Religions Attitude: ").append(attitudes.get(Affiliation.other_religions)).append(",");
		  csv.append("Switch Frustration: ").append(switchFrustration).append(",");
		  csv.append("Disaffiliation Frustration: ").append(disaffFrustration).append(",");
		  
		  csv.append("Person ID: ").append(personId).append(",");
		  csv.append("Mother ID: ").append(motherId).append(",");
		  csv.append("Father ID: ").append(fatherId).append(",");
		  csv.append("Is Immigrant: ").append(isImmigrant);
		  
		  return csv.toString();

	  }
	  
	  public String toCSV(String experimentId, String period) {
		  return toCSV(experimentId, period, true);

	  }
	    public String toCSV(String experimentId, String period, boolean newLine) {
	        StringBuilder csv = new StringBuilder();
	        csv.append(experimentId).append(",");
	        csv.append(period).append(",");
	        csv.append(edu).append(",");
	        csv.append(married).append(",");
	        csv.append(group).append(",");
	        csv.append(strictness).append(",");
	        csv.append(attitudes.get(Affiliation.buddhists)).append(",");
	        csv.append(attitudes.get(Affiliation.christians)).append(",");
	        csv.append(attitudes.get(Affiliation.hindus)).append(",");
	        csv.append(attitudes.get(Affiliation.jews)).append(",");
	        csv.append(attitudes.get(Affiliation.muslims)).append(",");
	        csv.append(attitudes.get(Affiliation.unaffiliated)).append(",");
	        csv.append(attitudes.get(Affiliation.other_religions)).append(",");
	        csv.append(switchFrustration).append(",");
	        csv.append(disaffFrustration).append(",");
	        csv.append(affiliation).append(",");
	        csv.append(publicPractice).append(",");
	        csv.append(privatePractice).append(",");
	        csv.append(supernaturalWorldview).append(",");
	        csv.append(importance).append(",");
	        csv.append(gender).append(",");
	        csv.append(age).append(",");
	        csv.append(person).append(",");
	        csv.append(personId).append(",");
	        csv.append(motherId).append(",");
	        csv.append(fatherId).append(",");
	        csv.append(isImmigrant);
	        if (newLine) {
	        	csv.append("\n");
	        }

	        return csv.toString();
	    }

		public static String getCSVHeaders() {
		    return getCSVHeaders("", true); 
	}
		
		public static String getCSVHeaders(String prefix, boolean newLine) {
		    return prefix + "ExperimentId," +
		           prefix + "Period," +
		           prefix + "Edu," +
		           prefix + "Married," +
		           prefix + "Group," +
		           prefix + "Strictness," +
		           prefix + "BuddhistAttitude," +
		           prefix + "ChristianAttitude," +
		           prefix + "HinduAttitude," +
		           prefix + "JewishAttitude," +
		           prefix + "MuslimAttitude," +
		           prefix + "NoReligionAttitude," +
		           prefix + "OtherAttitude," +
		           prefix + "SwitchFrustration," +
		           prefix + "DisaffFrustration," +
		           prefix + "Affiliation," +
		           prefix + "PublicPractice," +
		           prefix + "PrivatePractice," +
		           prefix + "SupernaturalWorldview," +
		           prefix + "Importance," +
		           prefix + "Gender," +
		           prefix + "Age," +
		           prefix + "Person," +
		           prefix + "PersonId," +
		           prefix + "MotherId," +
		           prefix + "FatherId," +
		           prefix + "IsImmigrant" +
		           (newLine ? "\n" : "");
		}

	  
	  public double getCouplingBiasScore(PersonReligiosity candidate, Main main) {
		  if (candidate.getGender() == Gender_List.FEMALE) {
			  return 0; // We should always be finding a male candidate for a female
		  }
		  double m = 1;
		  double ageOlderAmountBias = main.couplingAgeOlderAmountBias;
		  double eduBias = DBUtils.getCouplingEduBias(main);
		  double groupBias = DBUtils.getCouplingGroupBias(main);
		  
		  double ageDiff = candidate.getAge() - this.getAge();
		  double diffFrom3 = abs(ageOlderAmountBias - ageDiff);
		  m *= (1.0 / (diffFrom3 + 1));
		  if (this.getAge() >= 18) {
			  m *= candidate.getAge() >= 18
					  ? (this.getEdu() == candidate.getEdu() ? eduBias : 1.0)
					  : 1.0;
		  }
		  if (this.getGroup() == candidate.getGroup()) {
			  m *= groupBias;
		  }
		  return m;
	  }
	  
	  public double getInteractionsBiasScore(PersonReligiosity candidate, Main main) {
		  double m = 1;
		  double genderBias = DBUtils.getInteractionGenderBias(main);
		  double eduBias = DBUtils.getInteractionEduBias(main);
		  double groupBias = DBUtils.getInteractionGroupBias(main);
		  
		  if (this.getAge() >= 18) {
			  m *= candidate.getAge() >= 18
					  ? (this.getEdu() == candidate.getEdu() ? eduBias : 1.0)
					  : 1.0;
		  }
		  if (this.getGroup() == candidate.getGroup()) {
			  m *= groupBias;
		  }
		  if (this.getGender() == candidate.getGender()) {
			  m *= genderBias;
		  }
		  return m;
	  }
	  
	  public String getHighLevelInteractionType(PersonReligiosity alter, Main m) {
		  if (m.uniform() < m.totalConversionChance) {
		      return "total_conversion";
		  }

		  if (this.getAffiliation() == alter.getAffiliation() && this.getAffiliation() != Affiliation.unaffiliated) {
		      return "RX_RX";
		  }

		  else if (this.getAffiliation() != alter.getAffiliation()
		  			&& this.getAffiliation() != Affiliation.unaffiliated 
		  			&& alter.getAffiliation() != Affiliation.unaffiliated){
		   	// different affiliations (non-secular)
		      return "RX_RY";
		  }
		  else if (this.getAffiliation() != Affiliation.unaffiliated && alter.getAffiliation() == Affiliation.unaffiliated) {
		      // Affiliated ego with secular alter
		      return "RX_SEC";
		  }

		  else if (this.getAffiliation() == Affiliation.unaffiliated && alter.getAffiliation() == Affiliation.unaffiliated) {
		      // Both secular
		      return "SEC_SEC";
		  }

		  else if (this.getAffiliation() == Affiliation.unaffiliated && alter.getAffiliation() != Affiliation.unaffiliated) {
		      // Secular with religous
		      return "SEC_RX";
		  }
		  throw new IllegalStateException(
		  			  String.format("Invalid or unconsidered interaction: Ego %s, Alter %s",
		  							  this.getAffiliation().toString(),
		  							  alter.getAffiliation().toString()
		  						   )
		  			);
		  
	  }
	
	  public static class Builder {
	    
	    private Boolean edu;
	    private Boolean married;
	    private Group group;
	    private double strictness;
	    private Map<Affiliation, Double> attitudes;
	    private double switchFrustration;
	    private double disaffFrustration;
	    private Affiliation affiliation;
	    private double publicPractice;
	    private double privatePractice;
	    private double supernaturalWorldview;
	    private double importance; 
	    private double age;
	    private Gender_List gender;
	    private Supplier<Person> person;
	    private int personId;
	    private int motherId;
	    private int fatherId;
	    private Boolean isImmigrant;
	
	    public Builder() {    
	    }
	      
	    Builder(Boolean edu, Boolean married, Group group, double strictness, Map<Affiliation, Double> attitudes, 
	    		double switchFrustration, double disaffFrustration, Affiliation affiliation, double publicPractice, 
	    		double privatePractice, double supernaturalWorldview, double importance, double age, Gender_List gender,
	    		Supplier<Person> person, int personId, int motherId, int fatherId, Boolean isImmigrant) {    
	      this.edu = edu; 
	      this.married = married; 
	      this.group = group; 
	      this.strictness = strictness; 
	      this.attitudes = attitudes; 
	      this.switchFrustration = switchFrustration; 
	      this.disaffFrustration = disaffFrustration; 
	      this.affiliation = affiliation; 
	      this.publicPractice = publicPractice; 
	      this.privatePractice = privatePractice; 
	      this.supernaturalWorldview = supernaturalWorldview; 
	      this.importance = importance;             
	      this.age = age;
	      this.gender = gender;
	      this.person = person;
	      this.personId = personId;
	      this.motherId = motherId;
	      this.fatherId = fatherId;
	      this.isImmigrant = isImmigrant;
	    }
	        
	    public Builder edu(Boolean edu){
	      this.edu = edu;
	      return Builder.this;
	    }
	
	    public Builder married(Boolean married){
	      this.married = married;
	      return Builder.this;
	    }
	
	    public Builder group(Group group){
	      this.group = group;
	      return Builder.this;
	    }
	
	    public Builder strictness(double strictness){
	      this.strictness = strictness;
	      return Builder.this;
	    }
	
	    public Builder attitudes(Map<Affiliation, Double> attitudes){
	      this.attitudes = attitudes;
	      return Builder.this;
	    }
	
	    public Builder switchFrustration(double switchFrustration){
	      this.switchFrustration = switchFrustration;
	      return Builder.this;
	    }
	
	    public Builder disaffFrustration(double disaffFrustration){
	      this.disaffFrustration = disaffFrustration;
	      return Builder.this;
	    }
	
	    public Builder affiliation(Affiliation affiliation){
	      this.affiliation = affiliation == folk_religions ? other_religions : affiliation;
	      return Builder.this;
	    }
	
	    public Builder publicPractice(double publicPractice){
	      this.publicPractice = publicPractice;
	      return Builder.this;
	    }
	
	    public Builder privatePractice(double privatePractice){
	      this.privatePractice = privatePractice;
	      return Builder.this;
	    }
	
	    public Builder supernaturalWorldview(double supernaturalWorldview){
	      this.supernaturalWorldview = supernaturalWorldview;
	      return Builder.this;
	    }
	
	    public Builder importance(double importance){
	      this.importance = importance;
	      return Builder.this;
	    }
	    
	    public Builder age(double age){
	        this.age = age;
	        return Builder.this;
	      }
	
	      public Builder gender(Gender_List gender){
	        this.gender = gender;
	        return Builder.this;
	      }
	      
	   public Builder person(Supplier<Person> person) {
		   this.person = person;
		   return Builder.this;
	   }
	   
	   public Builder personId(int personId) {
		   this.personId = personId;
		   return Builder.this;
	   }
	   
	   public Builder motherId(int motherId) {
		   this.motherId = motherId;
		   return Builder.this;
	   }
	   
	   public Builder fatherId(int fatherId) {
		   this.fatherId = fatherId;
		   return Builder.this;
	   }
	   
	   public Builder isImmigrant(Boolean isImmigrant) {
		   this.isImmigrant = isImmigrant;
		   return Builder.this;
	   }
	
	    public PersonReligiosity build() {
	
	        return new PersonReligiosity(this);
	    }
	  }
	
	  private PersonReligiosity(Builder builder) {
	    this.edu = builder.edu; 
	    this.married = builder.married; 
	    this.group = builder.group; 
	    this.strictness = builder.strictness; 
	    this.attitudes = builder.attitudes != null ? builder.attitudes : Map.of(); 
	    this.switchFrustration = builder.switchFrustration; 
	    this.disaffFrustration = builder.disaffFrustration; 
	    this.affiliation = builder.affiliation; 
	    this.publicPractice = builder.publicPractice; 
	    this.privatePractice = builder.privatePractice; 
	    this.supernaturalWorldview = builder.supernaturalWorldview; 
	    this.importance = builder.importance;     
	    this.age = builder.age;
	    this.gender = builder.gender;
	    this.person = builder.person;
	    this.personId = builder.personId;
	    this.motherId = builder.motherId;
	    this.fatherId = builder.fatherId;
	    this.isImmigrant = builder.isImmigrant;
	  }
	
	  public void doSomething() {
	      // do something
	  }
}
]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1697123026547</Id>
			<Name><![CDATA[PersonReligiosityCache]]></Name>
			<Text><![CDATA[import java.util.Optional;
import java.util.stream.Collectors;
import java.util.EnumMap;
import static cohort_comp_method_2020.InteractionsUtils.PUBLIC;
import static cohort_comp_method_2020.InteractionsUtils.PRIVATE;
import static cohort_comp_method_2020.InteractionsUtils.SUPERNATURAL;
import static cohort_comp_method_2020.InteractionsUtils.IMPORTANCE;
import static cohort_comp_method_2020.InteractionsUtils.STRICTNESS;

/**
 * PersonReligiositCache
 */
public class PersonReligiosityCache
		implements
			Serializable {

	public static final int ALL_STRICTNESSES = -1;

	// Maps Aff -> Age -> Strictness -> List of males with
	// that Aff Age and Strictness
	private Map<Affiliation, TreeMap<Double, TreeMap<Double, List<PersonReligiosity>>>> couplingCache = new HashMap<>();
	private Map<Affiliation, TreeMap<Double, TreeMap<Double, List<PersonReligiosity>>>> interactionsCache = new HashMap<>();
	private Map<Integer, PersonReligiosity> idToReligiosityCache = new HashMap<>();

	// Map Agent Aff -> Third (0,1,2) -> Attitude
	// Affiliation -> Sum/Count
	private Map<Affiliation, Map<Integer, Map<String, Double>>> thirdsAveragesSums = new HashMap<>();
	private Map<Affiliation, Map<Integer, Map<String, Integer>>> thirdsAveragesCounts = new HashMap<>();

	// Map Agent Aff -> Third (0,1,2) -> Attitude
	// Affiliation -> Sum/Count
	private Map<Affiliation, Map<Integer, Map<String, Double>>> thirdsAveragesDimSums = new HashMap<>();
	private Map<Affiliation, Map<Integer, Map<String, Integer>>> thirdsAveragesDimCounts = new HashMap<>();

	private Object switchCountsLock = new Object();
	private Map<String, Map<Affiliation, Map<Affiliation, Integer>>> switchingCounts = new HashMap<>();

	private TreeMap<Double, List<PersonReligiosity>> immigrantCache = new TreeMap<>();

	private EnumMap<Affiliation, Integer> affiliationCounts = new EnumMap<>(
			Affiliation.class);

	private EnumMap<Affiliation, Integer> affiliationCountEdu = new EnumMap<>(
			Affiliation.class);
	private EnumMap<Affiliation, Integer> affiliationCountG2 = new EnumMap<>(
			Affiliation.class);
	private EnumMap<Affiliation, Map<String, Double>> affiliationDimensionSums = new EnumMap<>(
			Affiliation.class);

	private double sumImportance = 0;
	private double sumPrivate = 0;
	private double sumPublic = 0;
	private double sumSupernatural = 0;
	private double sumStrictness = 0;
	private int agentCount = 0;
	private int nonesCount = 0;
	private int affiliatedCount = 0;

	/**
	 * Default constructor
	 */
	public PersonReligiosityCache() {
	}
	
	public void clearWithSwitching() {
		this.switchingCounts = new HashMap<>();
		clear();
	}

	public void clear() {
		this.couplingCache = new HashMap<>();
		this.interactionsCache = new HashMap<>();
		this.thirdsAveragesCounts = new HashMap<>();
		this.thirdsAveragesSums = new HashMap<>();
		//this.switchingCounts = new HashMap<>();
		sumImportance = sumPrivate = sumPublic = sumSupernatural = sumStrictness = 0.0;
		agentCount = nonesCount = affiliatedCount = 0;
		this.immigrantCache = new TreeMap<>();
		this.affiliationCounts = new EnumMap<>(
				Affiliation.class);
		this.affiliationCountEdu = new EnumMap<>(
				Affiliation.class);
		this.affiliationCountG2 = new EnumMap<>(
				Affiliation.class);
	}

	private static final String SWITCH_COUPLE_KEY = "couple";
	private static final String SWITCH_NOMINAL_KEY = "switch";
	private static final String SWITCH_TOTAL_CONVERSION_KEY = "totalConversion";
	private static final String SWITCH_DISAFFILIATION_KEY = "disaffiliation";
	private void reportSwitchesHelper(Affiliation from,
			Affiliation to, String key) {
		synchronized (switchCountsLock) {
			this.switchingCounts
					.computeIfAbsent(key,
							s -> new HashMap<>())
					.computeIfAbsent(from,
							s -> new HashMap<>())
					.merge(to, 1, Integer::sum);
		}
	}

	public void reportCoupleSwitch(Affiliation from,
			Affiliation to) {
		reportSwitchesHelper(from, to, SWITCH_COUPLE_KEY);
	}

	public void reportSwitch(Affiliation from,
			Affiliation to) {
		reportSwitchesHelper(from, to, SWITCH_NOMINAL_KEY);
	}

	public void reportTotalConversion(Affiliation from,
			Affiliation to) {
		reportSwitchesHelper(from, to,
				SWITCH_TOTAL_CONVERSION_KEY);
	}

	public void reportDisaffiliation(Affiliation from) {
		reportSwitchesHelper(from, unaffiliated,
				SWITCH_DISAFFILIATION_KEY);
	}

	private Optional<Integer> getSwitchesHelper(
			Affiliation from, Affiliation to, String key) {
		if (!this.switchingCounts.containsKey(key)) {
			return Optional.empty();
		}
		if (!this.switchingCounts.get(key)
				.containsKey(from)) {
			return Optional.empty();
		}
		if (!this.switchingCounts.get(key).get(from)
				.containsKey(to)) {
			return Optional.empty();
		}

		return Optional.of(this.switchingCounts.get(key)
				.get(from).get(to));
	}

	public Optional<Integer> getCoupleSwitchCount(
			Affiliation from, Affiliation to) {
		return getSwitchesHelper(from, to,
				SWITCH_COUPLE_KEY);
	}

	public Optional<Integer> getSwitchCount(
			Affiliation from, Affiliation to) {
		return getSwitchesHelper(from, to,
				SWITCH_NOMINAL_KEY);
	}

	public Optional<Integer> getTotalConversionCount(
			Affiliation from, Affiliation to) {
		return getSwitchesHelper(from, to,
				SWITCH_TOTAL_CONVERSION_KEY);
	}

	public Optional<Integer> getDisaffiliationCount(
			Affiliation from) {
		return getSwitchesHelper(from, unaffiliated,
				SWITCH_DISAFFILIATION_KEY);
	}

	public synchronized void update(PersonReligiosity p) {
		this.idToReligiosityCache.put(p.getPersonId(), p);
	}

	public String dimensionsCSV() {
		StringBuilder sb = new StringBuilder();
		boolean first = true;
		for (Affiliation aff : Affiliation.values()) {
			if (aff == folk_religions) {
				continue;
			}
			Optional<Map<String, Double>> dims = getThirdsStrictnessDimensionsAverage(
					aff, ALL_STRICTNESSES);
			Double importance, publicPr, privatePr, sup,
					strict;
			importance = publicPr = privatePr = sup = strict = null;
			if (dims.isPresent()) {
				importance = dims.get().get(IMPORTANCE);
				publicPr = dims.get().get(PUBLIC);
				privatePr = dims.get().get(PRIVATE);
				sup = dims.get().get(SUPERNATURAL);
				strict = dims.get().get(STRICTNESS);
			}
			if (!first) {
				sb.append(',');
			}
			first = false;
			sb.append(importance).append(',')
					.append(publicPr).append(',')
					.append(privatePr).append(',')
					.append(sup).append(',').append(strict);
		}
		return sb.toString();
	}
	public static String dimensionsCSVHeaders() {
		StringBuilder sb = new StringBuilder();
		boolean first = true;
		for (Affiliation aff : Affiliation.values()) {
			if (aff == folk_religions) {
				continue;
			}
			if (!first) {
				sb.append(',');
			}
			first = false;
			sb.append(aff.toString()).append("_importance")
					.append(',').append(aff.toString())
					.append("_publicPr").append(',')
					.append(aff.toString())
					.append("_privatePr").append(',')
					.append(aff.toString()).append("_sup")
					.append(',').append(aff.toString())
					.append("_strict");
		}
		return sb.toString();
	}
	public String switchesCSV() {
		StringBuilder sb = new StringBuilder();
		boolean firstOuter = true;
		OUTER_LOOP : for (Affiliation from : Affiliation
				.values()) {
			if (from == folk_religions) {
				continue OUTER_LOOP;
			}
			if (!firstOuter) {
				sb.append(",");
			}
			firstOuter = false;
			if (from != unaffiliated) {
				Optional<Integer> disaffCount = getDisaffiliationCount(
						from);
				if (disaffCount.isPresent()) {
					sb.append(disaffCount.get());
				}
				sb.append(",");
			}
			boolean firstInner = true;
			INNER_LOOP : for (Affiliation to : Affiliation
					.values()) {
				if (to == folk_religions) {
					continue INNER_LOOP;
				}
				Optional<Integer> totalConversion = getTotalConversionCount(
						from, to);
				Optional<Integer> switchCouple = getCoupleSwitchCount(
						from, to);
				Optional<Integer> switchNominal = getSwitchCount(
						from, to);
				if (!firstInner) {
					sb.append(",");
				}
				firstInner = false;
				if (totalConversion.isPresent()) {
					sb.append(totalConversion.get());
				}
				sb.append(",");
				if (switchCouple.isPresent()) {
					sb.append(switchCouple.get());
				}
				sb.append(",");
				if (switchNominal.isPresent()) {
					sb.append(switchNominal.get());
				}
			}
		}
		return sb.toString();
	}
	public static String switchesCSVHeaders() {
		StringBuilder sb = new StringBuilder();
		boolean firstOuter = true;
		OUTER_LOOP : for (Affiliation from : Affiliation
				.values()) {
			if (from == folk_religions) {
				continue OUTER_LOOP;
			}
			if (!firstOuter) {
				sb.append(",");
			}
			firstOuter = false;
			if (from != unaffiliated) {
				sb.append(from.toString())
						.append("_disaff_count")
						.append(",");
			}
			boolean firstInner = true;
			INNER_LOOP : for (Affiliation to : Affiliation
					.values()) {
				if (to == folk_religions) {
					continue INNER_LOOP;
				}
				
				if (!firstInner) {
					sb.append(",");
				}
				firstInner = false;
				sb.append(from.toString()).append("_to_")
						.append(to.toString())
						.append("_totalConversion");
				sb.append(",");
				sb.append(from.toString()).append("_to_")
						.append(to.toString())
						.append("_switchCouple");
				sb.append(",");
				sb.append(from.toString()).append("_to_")
						.append(to.toString())
						.append("_switchNominal");
			}
		}
		return sb.toString();
	}

	private void mergeDimensions(PersonReligiosity p) {
		int agentStrictnessThird = p.getStrictness() < 1.0
				/ 3.0
						? 0
						: p.getStrictness() < 2.0 / 3.0
								? 1
								: 2;
		this.mergeDimensions(p, agentStrictnessThird);
		this.mergeDimensions(p, ALL_STRICTNESSES);
	}

	private void mergeDimensions(PersonReligiosity p,
			int third) {
		int agentStrictnessThird = third;
		thirdsAveragesSums.putIfAbsent(p.getAffiliation(),
				new HashMap<>());
		Map<String, Double> sumMap = thirdsAveragesSums
				.get(p.getAffiliation())
				.computeIfAbsent(agentStrictnessThird,
						a -> new HashMap<>());
		sumMap.merge(IMPORTANCE, p.getImportance(),
				Double::sum);
		sumMap.merge(PUBLIC, p.getPublicPractice(),
				Double::sum);
		sumMap.merge(PRIVATE, p.getPrivatePractice(),
				Double::sum);
		sumMap.merge(SUPERNATURAL,
				p.getSupernaturalWorldview(), Double::sum);
		sumMap.merge(STRICTNESS, p.getStrictness(),
				Double::sum);

		thirdsAveragesCounts.putIfAbsent(p.getAffiliation(),
				new HashMap<>());
		Map<String, Integer> countMap = thirdsAveragesCounts
				.get(p.getAffiliation())
				.computeIfAbsent(agentStrictnessThird,
						a -> new HashMap<>());
		countMap.merge(IMPORTANCE, 1, Integer::sum);
		countMap.merge(PUBLIC, 1, Integer::sum);
		countMap.merge(PRIVATE, 1, Integer::sum);
		countMap.merge(SUPERNATURAL, 1, Integer::sum);
		countMap.merge(STRICTNESS, 1, Integer::sum);
	}

	private void mergeAttitudes(PersonReligiosity p) {
		int agentStrictnessThird = p.getStrictness() < 1.0
				/ 3.0
						? 0
						: p.getStrictness() < 2.0 / 3.0
								? 1
								: 2;
		this.mergeAttitudes(p, agentStrictnessThird);
		this.mergeAttitudes(p, ALL_STRICTNESSES);
	}

	private void mergeAttitudes(PersonReligiosity p,
			int third) {
		int agentStrictnessThird = third;
		for (Map.Entry<Affiliation, Double> attitude : p
				.getAttitudes().entrySet()) {
			thirdsAveragesSums.get(p.getAffiliation())
					.computeIfAbsent(agentStrictnessThird,
							aff -> new HashMap<>())
					.merge(attitude.getKey().toString(),
							attitude.getValue(),
							Double::sum);
			thirdsAveragesCounts.get(p.getAffiliation())
					.computeIfAbsent(agentStrictnessThird,
							aff -> new HashMap<>())
					.merge(attitude.getKey().toString(), 1,
							Integer::sum);
		}
	}

	public double getPercEduByAff(Affiliation aff) {
		if (this.affiliationCountEdu.get(aff) == null) {
			
			return 0.5;
		}
		
		return this.affiliationCountEdu.get(aff)
				.doubleValue()
				/ this.affiliationCounts.get(aff);
	}

	public double getPercG2ByAff(Affiliation aff) {
		if (this.affiliationCountG2.get(aff) == null) {
			return 0.5;
		}
		return this.affiliationCountG2.get(aff)
				.doubleValue()
				/ this.affiliationCounts.get(aff);
	}

	public double getNonesProportion() {
		return (1.0 * nonesCount) / agentCount;
	}

	private int c = 0;
	private void partialLog(String msg) {
		if (c++ % 10000 == 0) {
			traceln(msg + " " + c);
		}
	}

	public synchronized void add(PersonReligiosity p,
			double time) {
		if (time > 15) {

			// traceln("When you're fifteen");
		}
		add(p);
	}

	public synchronized void add(PersonReligiosity p) {
		partialLog("Add");
		this.idToReligiosityCache.put(p.getPersonId(), p);

		if (p.getIsImmigrant() != null
				&& p.getIsImmigrant() == true) {
			this.immigrantCache.computeIfAbsent(p.getAge(),
					d -> new ArrayList<>()).add(p);
		}

		if (p.getAge() >= 12) {
			this.sumImportance += p.getImportance();
			this.sumPrivate += p.getPrivatePractice();
			this.sumPublic += p.getPublicPractice();
			this.sumSupernatural += p
					.getSupernaturalWorldview();
			this.sumStrictness += p.getStrictness();
			this.agentCount++;

			interactionsCache
					.computeIfAbsent(p.getAffiliation(),
							agent -> new TreeMap<>())
					.computeIfAbsent(p.getAge(),
							agent -> new TreeMap<>())
					.computeIfAbsent(p.getStrictness(),
							agent -> new ArrayList<>())
					.add(p);

			this.mergeDimensions(p);
			this.mergeAttitudes(p);

			if (p.getAffiliation() == unaffiliated) {
				this.nonesCount++;
			} else {
				this.affiliatedCount++;
			}

			this.affiliationCounts.merge(p.getAffiliation(),
					1, Integer::sum);
			if (p.getEdu()) {
				this.affiliationCountEdu.merge(
						p.affiliation, 1, Integer::sum);
			}
			if (p.getGroup() == USA_NonWhite) {
				this.affiliationCountG2.merge(p.affiliation,
						1, Integer::sum);
			}
		}

		if (p.getGender() == Gender_List.MALE
				&& p.getAge() >= 15) {
			// We will only be using this to match given
			// females to a male agent
			couplingCache
					.computeIfAbsent(p.getAffiliation(),
							agent -> new TreeMap<>())
					.computeIfAbsent(p.getAge(),
							agent -> new TreeMap<>())
					.computeIfAbsent(p.getStrictness(),
							agent -> new ArrayList<>())
					.add(p);
		}
	}

	public double calculatePluralism() {
		assert this.agentCount > 0;
		// Use process from
		// https://www.pewresearch.org/religion/2014/04/04/methodology-2/
		double rdiStep1 = 0;
		for (Affiliation aff : this.affiliationCounts
				.keySet()) {
			double proportion = (1.0
					* this.affiliationCounts.get(aff))
					/ this.agentCount;
			rdiStep1 += pow(proportion * 100, 2.0);
		}
		double rdiStep2 = 10000 - rdiStep1;
		double rdiStep3 = rdiStep2 / 875;
		// Adjust from 0-10 scale to be 0-1
		assert (rdiStep3 / 10) <= 1.0;
		return rdiStep3 / 10;
	}

	private boolean isValidAffiliation(String s) {
		for (Affiliation aff : Affiliation.values()) {
			if (aff.toString().equals(s)) {
				return true;
			}
		}
		return false;
	}

	public Optional<Map<Affiliation, Double>> getThirdsStrictnessAttitudeAverage(
			Affiliation from, int third) {
		if (!thirdsAveragesSums.containsKey(from)) {
			return Optional.empty();
		}
		if (!thirdsAveragesSums.get(from)
				.containsKey(third)) {
			return Optional.empty();
		}
		Map<Affiliation, Double> toReturn = new HashMap<>();
		Map<String, Double> totals = thirdsAveragesSums
				.get(from).get(third);
		totals.forEach((aff, total) -> {
			if (isValidAffiliation(aff)) {
				toReturn.put(Affiliation.valueOf(aff),
						total / thirdsAveragesCounts
								.get(from).get(third)
								.get(aff));
			}
		});
		return Optional.of(toReturn);
	}

	public Optional<Map<String, Double>> getThirdsStrictnessDimensionsAverage(
			Affiliation from, int third) {
		if (!thirdsAveragesSums.containsKey(from)) {
			return Optional.empty();
		}
		if (!thirdsAveragesSums.get(from)
				.containsKey(third)) {
			return Optional.empty();
		}
		Map<String, Double> toReturn = new HashMap<>();
		Map<String, Double> totals = thirdsAveragesSums
				.get(from).get(third);
		totals.forEach((dim, total) -> {
			if (!isValidAffiliation(dim)) {
				toReturn.put(dim,
						total / thirdsAveragesCounts
								.get(from).get(third)
								.get(dim));
			}
		});
		return Optional.of(toReturn);
	}

	public double getAverageImportance() {
		return sumImportance / agentCount;
	}

	public double getAveragePrivate() {
		return sumPrivate / agentCount;
	}

	public double getAveragePublic() {
		return sumPublic / agentCount;
	}

	public double getAverageSupernaturalWorldview() {
		return sumSupernatural / agentCount;
	}

	public double getAverageStrictness() {
		return sumStrictness / agentCount;
	}

	public PersonReligiosity getMostRecentReligiosityFor(
			int personId) {
		if (!this.idToReligiosityCache
				.containsKey(personId)) {
			throw new IllegalStateException("Person "
					+ personId + " does not exist");
		}
		return this.idToReligiosityCache.get(personId);
	}

	public List<PersonReligiosity> getInteractions(
			PersonReligiosity p, Main main) {
		if (!main.toggleOlderInteraction
				&& !main.toggYoungleInteractions) {
			throw new IllegalStateException(
					"This should not get called when interactions are disabled");
		}
		partialLog("Get interactions");
		double ageDistance;
		if (12 <= p.getAge() && p.getAge() <= 25) {
			ageDistance = 1;
		} else if (main.toggleOlderInteraction
				&& p.getAge() == 30) {
			ageDistance = 5;
		} else if (main.toggleOlderInteraction
				&& (p.getAge() == 40 || p.getAge() == 55
						|| p.getAge() == 70)) {
			ageDistance = 10;
		} else {
			// This function should not be called on agents
			// outside these ages
			return Collections.EMPTY_LIST;
		}

		Double startAge = max(12.0,
				p.getAge() - ageDistance);
		Double endAge = p.getAge() + ageDistance;
		Double[] strictnessRange = this
				.getStrictnessRange(p.getStrictness());

		List<PersonReligiosity> generalPool = this.interactionsCache
				.values().stream()
				// No strictness restriction for general
				.map(tm -> this.getAll(tm, startAge, endAge,
						-1.0, 2.0))
				.flatMap(List::stream)
				.collect(Collectors.toList());
		List<PersonReligiosity> sameAffPool = this.getAll(
				this.interactionsCache
						.get(p.getAffiliation()),
				startAge, endAge, strictnessRange[0],
				strictnessRange[1]);

		List<PersonReligiosity> toReturn = new ArrayList<>(
				10);
		if (generalPool.size() == 0
				&& sameAffPool.size() == 0) {
			traceln("I'm empty");
		}
		if (generalPool.size() + sameAffPool
				.size() <= main.numInteractionsPerStep) {
			toReturn.addAll(generalPool);
			toReturn.addAll(sameAffPool);
			return toReturn;
		}

		// SameAff Pool selections
		toReturn.addAll(this.pickNInteractionCandidatesFrom(
				sameAffPool, p,
				p.getStrictness()
						* main.numInteractionsPerStep,
				main, false));
		// General pool selections
		toReturn.addAll(this.pickNInteractionCandidatesFrom(
				generalPool, p,
				(1 - p.getStrictness())
						* main.numInteractionsPerStep,
				main, true));

		if (toReturn.isEmpty()) {
			traceln("Empty here");
		}

		return toReturn;
	}

	public PersonReligiosity getCoupling(
			PersonReligiosity p, Main main,
			GlobalParametersHaving globals) {
		Double startAge = max(15.0, p.getAge() - 5);
		Double endAge = p.getAge() + 5;
		Double[] strictnessRange = this
				.getStrictnessRange(p.getStrictness());

		List<PersonReligiosity> generalPool = this.couplingCache
				.values().stream()
				// No strictness restriction for general
				.map(tm -> this.getAll(tm, startAge, endAge,
						-1.0, 2.0))
				.flatMap(List::stream)
				.collect(Collectors.toList());
		List<PersonReligiosity> sameAffPool = this.getAll(
				this.couplingCache.get(p.getAffiliation()),
				startAge, endAge, strictnessRange[0],
				strictnessRange[1]);

		// This Exclusivity is calculated as:
		// (1-(1-s)(1-r)+rs)/2
		// Where s = strictness and r = importance of
		// religion.
		// The exclusivity index must be used in combination
		// with the MH Algorithm to determine homogamy by
		// religious
		// affiliation, although how that works is not yet
		// decided.
		// The MH Algorithm will incorporate existential
		// security,
		// pluralism, and freedom parameters to reduce
		// homogamy.
		// The prejudice parameter for marriage will make
		// marriage
		// to specific religious affiliations less likely.
		double s = p.getStrictness();
		double r = p.getImportance();
		double baseExclusivity = (1 - (1 - s) * (1 - r)
				+ r * s) / 2;
		// TODO: Check this max
		double exclusivity = max(0.0,
				baseExclusivity - ((globals.pluralism()
						+ globals.freedom()
						+ globals.existentialSecurity())
						/ 3));

		List<PersonReligiosity> allCandidates = new ArrayList();

		// SameAff Pool selections
		allCandidates.addAll(this
				.pickNCouplingCandidatesFrom(sameAffPool, p,
						exclusivity * 10, main));
		// General pool selections
		allCandidates.addAll(this
				.pickNCouplingCandidatesFrom(generalPool, p,
						(1 - exclusivity) * 10, main));

		List<PersonReligiosity> nonPrejudiced = allCandidates
				.stream()
				.filter(c -> c.getAffiliation() == p
						.getAffiliation()
						|| main.uniform() < p.getAttitudes()
								.get(c.getAffiliation()))
				.collect(Collectors.toList());
		if (nonPrejudiced.size() > 0) {
			return main.randomFrom(nonPrejudiced);
		}
		if (allCandidates.size() > 0) {
			return main.randomFrom(allCandidates);
		}
		// TODO: Make sure this does not happen for large
		// enough samples
		traceln("Unable to find partner for agent.");
		return null;
	}

	private List<PersonReligiosity> pickNCouplingCandidatesFrom(
			List<PersonReligiosity> l, PersonReligiosity p,
			double n, Main main) {
		if (l.size() <= n) {
			return l;
		}
		List<PersonReligiosity> toReturn = new ArrayList<>(
				(int) n);

		Map<Double, List<PersonReligiosity>> scoredMap = l
				.stream()
				.collect(Collectors.groupingBy(e -> p
						.getCouplingBiasScore(e, main)));
		TreeMap<Double, List<PersonReligiosity>> sortedScoredMap = new TreeMap<>(
				scoredMap); // Desc by default
		double total = sortedScoredMap.entrySet().stream()
				.mapToDouble(entry -> entry.getKey()
						* entry.getValue().size())
				.sum();
		OUTER_LOOP : for (int i = 0; i < n; i++) {
			double pick = main.uniform(0, total);
			double curVal = 0;
			for (Map.Entry<Double, List<PersonReligiosity>> entry : sortedScoredMap
					.entrySet()) {
				if (pick < curVal + (entry.getKey()
						* entry.getValue().size())) {
					double offset = (pick - curVal)
							/ entry.getKey();
					toReturn.add(entry.getValue()
							.get((int) floor(offset)));
					continue OUTER_LOOP;
				}
				curVal += entry.getKey()
						* entry.getValue().size();
			}
		}
		return toReturn;
	}

	private List<PersonReligiosity> pickNInteractionCandidatesFrom(
			List<PersonReligiosity> l, PersonReligiosity p,
			double n, Main main, boolean withPrejudice) {
		if (l.size() <= n) {
			return l;
		}
		List<PersonReligiosity> toReturn = new ArrayList<>(
				(int) n);

		Map<Double, List<PersonReligiosity>> scoredMap = l
				.stream()
				.collect(Collectors.groupingBy(
						e -> p.getInteractionsBiasScore(e,
								main)));
		TreeMap<Double, List<PersonReligiosity>> sortedScoredMap = new TreeMap<>(
				scoredMap); // Desc by default
		double total = sortedScoredMap.entrySet().stream()
				.mapToDouble(entry -> entry.getKey()
						* entry.getValue().size())
				.sum();
		OUTER_LOOP : while (toReturn.size() < n) {
			double pick = main.uniform(0, total);
			double curVal = 0;
			for (Map.Entry<Double, List<PersonReligiosity>> entry : sortedScoredMap
					.entrySet()) {
				if (pick < curVal + (entry.getKey()
						* entry.getValue().size())) {
					double offset = (pick - curVal)
							/ entry.getKey();
					PersonReligiosity candidate = entry
							.getValue()
							.get((int) floor(offset));
					if (withPrejudice) {
						Affiliation myAff = p.getAffiliation();
						Affiliation theirAff = candidate.getAffiliation();
						Map<Affiliation, Double> myPrej = main.global_prejudice.get(p.getAffiliation());
						if (myPrej == null) {
							traceln("THisAProb");
						}
						else if (myPrej.get(candidate.getAffiliation()) == null) {
							traceln("Also a prob");
						}
						double prejudice = main.global_prejudice
								.get(p.getAffiliation())
								.get(candidate
										.getAffiliation());
						double coinFlip = main.uniform();
						if (coinFlip < prejudice) {
							continue OUTER_LOOP;
						}
					}
					toReturn.add(candidate);
					continue OUTER_LOOP;
				}
				curVal += entry.getKey()
						* entry.getValue().size();
			}
		}
		return toReturn;
	}

	public PersonReligiosity getInitCoupling(
			PersonReligiosity p, Main main) {
		Double startAge = max(15.0, p.getAge() - 5);
		Double endAge = p.getAge() + 5;
		Double[] strictnessRange = this
				.getStrictnessRange(p.getStrictness());

		List<PersonReligiosity> candidates = this.getAll(
				this.couplingCache.get(p.getAffiliation()),
				startAge, endAge, strictnessRange[0],
				strictnessRange[1]);
		Map<Double, List<PersonReligiosity>> scoredMap = candidates
				.stream()
				.collect(Collectors.groupingBy(e -> p
						.getCouplingBiasScore(e, main)));
		TreeMap<Double, List<PersonReligiosity>> sortedScoredMap = new TreeMap<>(
				scoredMap); // Desc by default
		double total = sortedScoredMap.entrySet().stream()
				.mapToDouble(entry -> entry.getKey()
						* entry.getValue().size())
				.sum();

		double pick = main.uniform(0, total);
		double curVal = 0;
		for (Map.Entry<Double, List<PersonReligiosity>> entry : sortedScoredMap
				.entrySet()) {
			if (pick < curVal + (entry.getKey()
					* entry.getValue().size())) {
				double offset = (pick - curVal)
						/ entry.getKey();
				return entry.getValue()
						.get((int) floor(offset));
			}
			curVal += entry.getKey()
					* entry.getValue().size();
		}
		return null;
	}

	public Optional<Integer[]> getImmigrantParentIds(
			Person p, Main main) {
		double minAge = 15 + p.Age;
		double maxAge = 49 + p.Age;
		Double curAge = minAge;
		List<PersonReligiosity> parentCandidates = new ArrayList<>();
		while (curAge != null && curAge <= maxAge) {
			if (this.immigrantCache.containsKey(curAge)) {
				parentCandidates.addAll(
						this.immigrantCache.get(curAge));
			}
			curAge = this.immigrantCache.higherKey(curAge);
		}
		List<Integer> motherCandidates = parentCandidates
				.stream()
				.filter(pr -> pr.getGender() == FEMALE)
				.map(pr -> pr.getPersonId())
				.collect(Collectors.toList());
		List<Integer> fatherCandidates = parentCandidates
				.stream()
				.filter(pr -> pr.getGender() == MALE)
				.map(pr -> pr.getPersonId())
				.collect(Collectors.toList());

		if (motherCandidates.isEmpty()
				|| fatherCandidates.isEmpty()) {
			return Optional.empty();
		}
		return Optional.of(new Integer[]{
				main.randomFrom(motherCandidates),
				main.randomFrom(fatherCandidates)});
	}

	private List<PersonReligiosity> getAll(
			TreeMap<Double, TreeMap<Double, List<PersonReligiosity>>> map,
			Double firstLower, Double firstUpper,
			Double secondLower, Double secondUpper) {
		Double curVal = firstLower;
		List<PersonReligiosity> toReturn = new ArrayList<>();

		while (curVal != null && curVal <= firstUpper) {
			if (map.containsKey(curVal)) {
				toReturn.addAll(getAll(map.get(curVal),
						secondLower, secondUpper));
			}
			curVal = map.higherKey(curVal);
		}
		return toReturn;
	}

	private List<PersonReligiosity> getAll(
			TreeMap<Double, List<PersonReligiosity>> map,
			Double lower, Double upper) {
		Double curVal = lower;
		List<PersonReligiosity> toReturn = new ArrayList<>();

		while (curVal != null && curVal <= upper) {
			if (map.containsKey(curVal)) {
				toReturn.addAll(map.get(curVal));
			}
			curVal = map.higherKey(curVal);
		}
		return toReturn;
	}

	protected static Double[] getStrictnessRange(double s) {
		double sMax = min(1.0, (5.0 / 9.0) * s + 0.5);
		double sMin = max(0.0, 1.8 * s - 0.9);
		return new Double[]{sMin, sMax};
	}

	@Override
	public String toString() {
		return super.toString();
	}

	/**
	 * This number is here for model snapshot storing
	 * purpose<br>
	 * It needs to be changed when this class gets changed
	 */
	private static final long serialVersionUID = 1L;

}
]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1697123051247</Id>
			<Name><![CDATA[InteractionsUtils]]></Name>
			<Text><![CDATA[import java.util.function.*;
import java.util.stream.Collectors;
import java.util.Optional;
import java.util.Arrays;

/**
 * InteractionsUtils
 */	
public class InteractionsUtils implements Serializable {
	public static final String POSITIVE_AFFIRMING = "positive_affirming";
	public static final String NEGATIVE_SECULAR = "negative_secular";
	public static final String NEGATIVE_SWITCHING = "negative_switching";
	public static final String POSITIVE_SWITCHING = "positive_switching";
	public static final String NEGATIVE_REACTIVE = "negative_reactive";
	public static final String TOTAL_CONVERSION = "total_conversion";
	public static final String POSITIVE_SECULAR = "positive_secular";
	public static final String STRICTNESS = "strictness";
    public static final String IMPORTANCE = "importance";
    public static final String PUBLIC = "public";
    public static final String PRIVATE = "private";
    public static final String SUPERNATURAL = "supernatural";
    public static final String SWITCH = "switch";
    public static final String DISAFF = "disaff";
	
	public static Map<String, Function<GlobalParametersHaving, Map<String, Double>>> INTERACTION_LIKELIHOODS = Map.of(
		    "RX_RX", m -> rx_rx_likelihood(m.religiousEducation(), m.secularEducation(), m.pluralism()),
		    "RX_RY", m -> rx_ry_likelihood(m.religiousEducation(), m.secularEducation(), m.existentialSecurity(), m.pluralism()),
		    "RX_SEC", m -> rx_sec_likelihoods(m.religiousEducation(), m.secularEducation(), m.pluralism()),
		    "SEC_SEC", m -> Map.of(POSITIVE_AFFIRMING, 0.5, NEGATIVE_SWITCHING, 0.5),
		    "SEC_RX", m -> Map.of(
		        POSITIVE_SWITCHING, 0.5 - 0.5 * m.secularEducation() + 0.5 * m.pluralism(),
		        NEGATIVE_REACTIVE, 0.5 + 0.5 * m.secularEducation() - 0.5 * m.pluralism()
		    )
		);

	public static String getLowLevelInteractionType(String highLevelType, GlobalParametersHaving globals, Main main) {
		if (highLevelType.equals(TOTAL_CONVERSION)) {
			return TOTAL_CONVERSION;
		}
		//traceln(highLevelType);
		Map<String, Double> interactionLikelihoods = InteractionsUtils.INTERACTION_LIKELIHOODS.get(highLevelType).apply(globals);
		double likelihoodSum = interactionLikelihoods.values().stream().mapToDouble(d -> d).sum();
		
		if (likelihoodSum > 1) {
			// I think it's fine?
			//traceln("Warning: LL interaction type likelihood sum is greater than 1");
		}
		
		double pick = main.uniform() * likelihoodSum;
		double currentVal = 0;
		for (Map.Entry<String, Double> entry : interactionLikelihoods.entrySet()) {
			if (pick <= currentVal + entry.getValue()) {
				return entry.getKey();
			}
			currentVal += entry.getValue();
		}
		
		traceln("Error picking LL interaction with pic = " + pick);
		return interactionLikelihoods.keySet().iterator().next();
		//throw new IllegalStateException("Invalid stochastic selection.");
	}
	
	
	private static Map<String, Double> rx_rx_likelihood(double relig, double sec, double pluralism) {
		
		// Calculate base values
	    double base_pa = 1.5 + relig + pow(max(0, relig - sec), 0.5) + (1 - pluralism) * sec;
	    double base_nse = 0.05 + sec + pluralism + max(0, sec - relig);
	    double base_nsw = 0.1 + pluralism + (relig * 0.5 + sec * 0.5) * abs(relig - sec);
	    
	    // Calculate adjustment factors
	    double pa_adjust = 0.1 + pow(relig, 0.5);
	    double nse_adjust = 0.1 + pow(sec, 0.5);
	    double nsw_adjust = 0.1 + (pow(relig, 0.5) + pow(sec, 0.5)) / 2 ;
	    //print((pa_adjust, nse_adjust, nsw_adjust))
	    
	    // Calculate final values
	    double pa = pa_adjust * base_pa;
	    double nse = nse_adjust * base_nse;
	    double nsw = nsw_adjust * base_nsw;
	    
	    // Normalize the values to sum up to 1
	    double total = pa + nse + nsw;
	    pa /= total;
	    nse /= total;
	    nsw /= total;

        Map<String, Double> result = new TreeMap<>();
        result.put(POSITIVE_AFFIRMING, pa);
        result.put(NEGATIVE_SECULAR, nse);
        result.put(NEGATIVE_SWITCHING, nsw);
	    return result;
	}
	
	private static Map<String, Double> rx_ry_likelihood(double edu_relig, double edu_sec, double ex_sec, double plu) {
        // Calculate pos_sw
        // High if pluralism is high and education religion, low ex_sec
        double pos_sw = 0.1 + 2 * ex_sec * edu_relig * plu;

        // Calculate pos_sec
        // High with high edu_sec, ex_sec, plu
        double pos_sec = 0.1 + (0.4 * edu_sec) + (0.4 * ex_sec) + (0.4 * plu);

        // Calculate neg
        // Base is pretty high
        double neg = 1.3;

        // Normalize the scores to ensure they sum to 1
        double total = pos_sw + pos_sec + neg;
        pos_sw /= total;
        pos_sec /= total;
        neg /= total;

        Map<String, Double> result = new TreeMap<>();
        result.put(POSITIVE_SWITCHING, pos_sw);
        result.put(POSITIVE_SECULAR, pos_sec);
        result.put(NEGATIVE_REACTIVE, neg);

        return result;
    }
	
	private static Map<String, Double> rx_sec_likelihoods(double edu_relig, double edu_sec, double plu) {
        double pos_sec = 0.3 - (0.2 * edu_relig) + (0.2 * edu_sec) + (0.2 * plu);
        double neg = 0.3 + (0.2 * edu_relig) - (0.2 * edu_sec) - (0.2 * plu);

        double total = pos_sec + neg;
        pos_sec /= total;
        neg /= total;

        Map<String, Double> result = new TreeMap<>();
        result.put(POSITIVE_SECULAR, pos_sec);
        result.put(NEGATIVE_REACTIVE, neg);

        return result;
    }
	
	public static Delta getDeltaForInteraction(String highLevel, String lowLevel, PersonReligiosity ego, PersonReligiosity alter, GlobalParametersHaving globals, Main main) {
		
		
		if (highLevel.equals(TOTAL_CONVERSION)) {
			return Delta.totalConversionDelta(alter);
		}
		
		if (highLevel.equals("RX_RX")) {
			if (lowLevel.equals(POSITIVE_AFFIRMING)) {
				Delta d = Delta.positiveAffirming()
							   .setDimensionDeltas(main.dimensionsIncrement, List.of(PUBLIC, PRIVATE, IMPORTANCE, SUPERNATURAL), List.of(SWITCH))
							   .addAttitudeDelta(ego.getAffiliation(), main.attitudeIncrement);
				if (main.uniform() < globals.pluralism()) {
					List<Affiliation> otherAffs = Arrays.stream(Affiliation.values())
														.filter(aff -> aff != ego.getAffiliation())
														.filter(aff -> aff != unaffiliated)
														.collect(Collectors.toList());
					d.addAttitudeDeltas(otherAffs, main.attitudeIncrement);
				}
				return d;
			} else if (lowLevel.equals(NEGATIVE_SECULAR)) {
				Delta d = Delta.negativeSecular()
						    .setDimensionDeltas(main.dimensionsIncrement, List.of(SWITCH, DISAFF), List.of(PUBLIC, PRIVATE, IMPORTANCE, SUPERNATURAL))
						    .addAttitudeDelta(ego.getAffiliation(), - main.attitudeSelfDecrement);
				AFF_LOOP:
				for (Affiliation aff : Affiliation.values()) {
					if (aff == unaffiliated || aff == ego.getAffiliation()) {
						continue AFF_LOOP;
					}
					d.addAttitudeDelta(aff, - 0.5 * main.attitudeSelfDecrement);
				}
				return d;
			} else if (lowLevel.contentEquals(NEGATIVE_SWITCHING)) {
				return Delta.negativeSwitching()
						    .setDimensionDeltas(main.dimensionsIncrement, List.of(SWITCH), List.of(PUBLIC))
						    .addAttitudeDelta(ego.getAffiliation(), - main.attitudeSelfDecrement);
			}
		} else if (highLevel.equals("RX_RY")) {
			if (lowLevel.equals(POSITIVE_SWITCHING)) {
				return Delta.positiveSwitching()
						    .setDimensionDeltas(main.dimensionsIncrement, List.of(SWITCH), List.of(PUBLIC, PRIVATE, DISAFF))
						    .addAttitudeDelta(alter.getAffiliation(), main.attitudeIncrement);
			} else if (lowLevel.equals(POSITIVE_SECULAR)) {
				return Delta.positiveSecular()
					        .setDimensionDeltas(main.dimensionsIncrement, List.of(DISAFF), List.of(PUBLIC, PRIVATE, SUPERNATURAL, IMPORTANCE))
					        .addAttitudeDelta(unaffiliated, main.attitudeIncrement);
			} else if (lowLevel.equals(NEGATIVE_REACTIVE)) {
				return Delta.negativeReactive()
						    .setDimensionDeltas(main.dimensionsIncrement, List.of(PUBLIC, PRIVATE, IMPORTANCE), List.of(SWITCH, DISAFF))
						    .addAttitudeDelta(alter.getAffiliation(), -main.attitudeIncrement);
			}
		} else if (highLevel.equals("RX_SEC")) {
			if (lowLevel.equals(POSITIVE_SECULAR)) {
				return Delta.positiveSecular()
							.setDimensionDeltas(main.dimensionsIncrement, List.of(DISAFF), List.of(PUBLIC, PRIVATE, SUPERNATURAL, IMPORTANCE))
							.addAttitudeDelta(unaffiliated, main.attitudeIncrement);
			} else if (lowLevel.equals(NEGATIVE_REACTIVE)) {
				return Delta.negativeReactive()
						    .setDimensionDeltas(main.dimensionsIncrement, List.of(SUPERNATURAL, IMPORTANCE), List.of(DISAFF))
						    .addAttitudeDelta(unaffiliated, -main.attitudeIncrement);
			}
		} else if (highLevel.equals("SEC_SEC")) {
			if (lowLevel.equals(POSITIVE_AFFIRMING)) {
				return Delta.positiveAffirming()
							.setDimensionDeltas(main.dimensionsIncrement, List.of(), List.of(PUBLIC, PRIVATE, SUPERNATURAL, IMPORTANCE, SWITCH))
							.addAttitudeDelta(unaffiliated, main.attitudeIncrement);
			} else if (lowLevel.equals(NEGATIVE_SWITCHING)) {
				return Delta.negativeSwitching()
						    .setDimensionDeltas(main.dimensionsIncrement, List.of(PUBLIC, PRIVATE, SUPERNATURAL, IMPORTANCE, SWITCH), List.of())
						    .addAttitudeDelta(unaffiliated, - main.attitudeSelfDecrement);
			}
		} else if (highLevel.equals("SEC_RX")) {
			if (lowLevel.equals(POSITIVE_SWITCHING)) {
				return Delta.positiveSwitching()
							.setDimensionDeltas(main.dimensionsIncrement / main.secRXDimensionsIncrementDenominator, List.of(PUBLIC, PRIVATE, SUPERNATURAL, IMPORTANCE, SWITCH), List.of())
							.addAttitudeDelta(alter.getAffiliation(), main.attitudeIncrement);
			} else if (lowLevel.equals(NEGATIVE_REACTIVE)) {
				return Delta.negativeReactive()
						    .setDimensionDeltas(main.dimensionsIncrement, List.of(), List.of(PUBLIC, PRIVATE, SUPERNATURAL, IMPORTANCE, SWITCH))
						    .addAttitudeDelta(alter.getAffiliation(), -main.attitudeIncrement);
			}
		}

		throw new IllegalStateException("Invalid interaction type " + highLevel + " " + lowLevel);
	}
	
	public static class Delta {
		private String interactionType = null;
		private Map<String, Double> dimensionsDeltas = new HashMap<>();
		private Map<Affiliation, Double> attitudeDeltas = new HashMap<>();
		private Affiliation affiliationChange = null;
		
		private Delta(String interactionType) {
			this.interactionType = interactionType;
		}
		
		private Delta() {}
		
		public static Delta totalConversionDelta(PersonReligiosity alter) {
			Delta dawn = new Delta("total_conversion");
			dawn.affiliationChange = alter.getAffiliation();
			dawn.addDelta(STRICTNESS, alter.getStrictness())
			    .addDelta(IMPORTANCE, alter.getImportance())
			    .addDelta(PUBLIC, alter.getPublicPractice())
			    .addDelta(PRIVATE, alter.getPrivatePractice())
			    .addDelta(SUPERNATURAL, alter.getSupernaturalWorldview())
			    .addDelta(SWITCH, 0.1)
			    .addDelta(DISAFF, 0.1);
			
			dawn.attitudeDeltas = alter.getAttitudes();
			
			return dawn;
		}
		
		public static Delta negativeReactive() {
			return new Delta(NEGATIVE_REACTIVE);
		}
		
		public static Delta positiveSwitching() {
			return new Delta(POSITIVE_SWITCHING);
		}
		
		public static Delta positiveSecular() {
			return new Delta(POSITIVE_SECULAR);
		}
		
		public static Delta positiveAffirming() {
			return new Delta(POSITIVE_AFFIRMING);
		}
		
		public static Delta negativeSecular() {
			return new Delta(NEGATIVE_SECULAR);
		}
		
		public static Delta negativeSwitching() {
			return new Delta(NEGATIVE_SWITCHING);
		}
		
		public Optional<Double> strictness() {
			return getDimension(STRICTNESS);
		}
		
		public Optional<Double> importance() {
			return getDimension(IMPORTANCE);
		}
		
		public Optional<Double> publicPractice() {
			return getDimension(PUBLIC);
		}
		
		public Optional<Double> privatePractice() {
			return getDimension(PRIVATE);
		}
		
		public Optional<Double> supernatural() {
			return getDimension(SUPERNATURAL);
		}
		
		public Optional<Double> switchFrustration() {
			return getDimension(SWITCH);
		}
		
		public Optional<Double> disaff() {
			return getDimension(DISAFF);
		}
		
		private Optional<Double> getDimension(String dim) {
			return Optional.ofNullable(this.dimensionsDeltas.get(dim));
		}
		
		public boolean isTotalConversion() {
			return interactionType.equals(TOTAL_CONVERSION);
		}
		
		public Optional<Affiliation> getAffiliationChange() {
			return Optional.ofNullable(this.affiliationChange);
		}
		
		public Delta setDimensionDeltas(double inc, Collection<String> up, Collection<String> down) {
			for (String dim : up) {
				this.addDelta(dim, inc);
			}
			for (String dim: down) {
				this.addDelta(dim, -inc);
			}
			return this;
		}
		
		
		public Delta addAttitudeDeltas(Collection<Affiliation> affs, double value) {
			for (Affiliation aff : affs) {
				this.addAttitudeDelta(aff, value);
			}
			return this;
		}
		
		public Delta addDelta(String d, double delta) {
			this.dimensionsDeltas.put(d, delta);
			return this;
		}
		
		public Delta addAttitudeDelta(Affiliation aff, double delta) {
			this.attitudeDeltas.put(aff, delta);
			return this;
		}
		
		public Map<Affiliation, Double> attitudeChanges() {
			return Map.copyOf(this.attitudeDeltas);
		}
		
		public Delta combine(Delta dawn) {
			Delta toReturn = new Delta();
			
			toReturn.dimensionsDeltas.putAll(this.dimensionsDeltas);
			dawn.dimensionsDeltas.forEach((k, v) -> toReturn.dimensionsDeltas.merge(k, v, Double::sum));
			
			toReturn.attitudeDeltas.putAll(this.attitudeDeltas);
			dawn.attitudeDeltas.forEach((k, v) -> toReturn.attitudeDeltas.merge(k, v, Double::sum));
			
			return toReturn;
		}
	}
	
	
    /**
     * Default constructor
     */
    private InteractionsUtils() {
    }

	/**
	 * This number is here for model snapshot storing purpose<br>
	 * It needs to be changed when this class gets changed
	 */ 
	private static final long serialVersionUID = 1L;

}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1697123373585</Id>
			<Name><![CDATA[Tests]]></Name>
			<Text><![CDATA[import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.fail;
import cohort_comp_method_2020.InteractionsUtils.Delta;
import java.util.stream.Collectors;
import java.util.Optional;

import static cohort_comp_method_2020.InteractionsUtils.PUBLIC;
import static cohort_comp_method_2020.InteractionsUtils.PRIVATE;
import static cohort_comp_method_2020.InteractionsUtils.SUPERNATURAL;
import static cohort_comp_method_2020.InteractionsUtils.IMPORTANCE;
import static cohort_comp_method_2020.InteractionsUtils.STRICTNESS;
  

/**
 * Tests
 */	
public class Tests {
	private Main main = Main.TEST_MAIN;
	private Person person;
	private Affiliation none = unaffiliated;
	private Affiliation aff1 = buddhists;
	private Affiliation aff2 = christians;
	
	@Before
	public void setUp() {
		person = main.add_People();
	}
	
	private GlobalParametersHaving makeMockGPH(double rel, double sec, double plu, double lif, double exi) {
		return new GlobalParametersHaving() {
			public double religiousEducation() {
				return rel;
			}
			
			public double secularEducation() {
				return sec;
			}
			
			public double pluralism() {
				return plu;
			}
			
			public double lifestyleOpportunity() {
				return lif;
			}
			
			public double existentialSecurity() {
				return exi;
			}
			
			public double freedom() {
				return 0;
			}
		};
	}
	
	private GlobalParametersHaving makeMockGPH(double rel, double sec, double plu, double lif, double exi, double freedom) {
		return new GlobalParametersHaving() {
			public double religiousEducation() {
				return rel;
			}
			
			public double secularEducation() {
				return sec;
			}
			
			public double pluralism() {
				return plu;
			}
			
			public double lifestyleOpportunity() {
				return lif;
			}
			
			public double existentialSecurity() {
				return exi;
			}
			
			public double freedom() {
				return freedom;
			}
		};
	}
	
	private void setConvertStrictness(Main main, double val) {
		main.minStrictness = val;
		main.modeStrictness = val;
		main.maxStrictness = val;
	}
	
	private Map<Affiliation, Double> positiveAttitudes() {
		Map<Affiliation, Double> toReturn = new HashMap<>();
		for (Affiliation aff : Affiliation.class.getEnumConstants()) {
			toReturn.put(aff, 1.0);
		}
		return toReturn;
	}
	
	private Map<Affiliation, Double> positiveAttitudesExcept(Affiliation affiliation, double value) {
		Map<Affiliation, Double> toReturn = new HashMap<>();
		for (Affiliation aff : Affiliation.class.getEnumConstants()) {
			if (aff == affiliation) {
				toReturn.put(aff, value);
			} else {
				toReturn.put(aff, 1.0);
			}
		}
		return toReturn;
	}
	
	private PersonReligiosityCache createPopulatedPRCWithNonesProp(double nonesProp) {
		PersonReligiosityCache prc = new PersonReligiosityCache();
		
		int total = 10;
		for (int i = 0; i < total; i++) {
			prc.add(new PersonReligiosity.Builder()
					.age(12)
					.group(USA_White)
					.gender(Gender_List.MALE)
					.edu(true)
					.affiliation(nonesProp >= i / (1.0 * total) ? unaffiliated : buddhists)
					.strictness(0.1)
					.importance(0.2)
					.build());
		}
		return prc;
	}
		
	private PersonReligiosityCache createPopulatedPRC() {
		return createPopulatedPRC(10, 26);
	}
    
	private PersonReligiosityCache createPopulatedPRC(int startAge, int endAgeExclusive) {
		PersonReligiosityCache prc = new PersonReligiosityCache();
		for (int age = startAge; age < endAgeExclusive; age++) {
			for (Group g : Group.values()) {
				for (Affiliation aff : Affiliation.values()) {
					for (double strictness = 0.2; strictness <= 0.95; strictness += 0.05) {
						for (double importance = 0.2; importance < 0.6; importance += 0.05) {
							for (int i = 0; i < 3; i++) {
								prc.add(new PersonReligiosity.Builder()
										.age(age)
										.group(g)
										.gender(Gender_List.MALE)
										.edu(true)
										.affiliation(aff)
										.strictness(strictness)
										.importance(importance)
										.build());
								prc.add(new PersonReligiosity.Builder()
										.age(age)
										.edu(true)
										.group(g)
										.gender(Gender_List.FEMALE)
										.affiliation(aff)
										.strictness(strictness)
										.importance(importance)
										.build());
								prc.add(new PersonReligiosity.Builder()
										.age(age)
										.group(g)
										.gender(Gender_List.MALE)
										.edu(false)
										.affiliation(aff)
										.strictness(strictness)
										.importance(importance)
										.build());
								prc.add(new PersonReligiosity.Builder()
										.age(age)
										.edu(false)
										.group(g)
										.gender(Gender_List.FEMALE)
										.affiliation(aff)
										.strictness(strictness)
										.importance(importance)
										.build());
							}
						}
					}
				}
			}
		}
		return prc;
	}
	
	
    @Test
    public void testPersonReligiosityInteractionBias_allBiasesActive() {
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.group(Group.USA_White)
    			.age(20)
    			.build();
    	
    	PersonReligiosity p2 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.group(Group.USA_White)
    			.age(20)
    			.build();
    	
    	double bias1 = p1.getInteractionsBiasScore(p2, main);
    	
    	assertEquals(92.86396918281548, bias1, 1e-5);
    }
    
    @Test
    public void testPersonReligiosityInteractionBias_eduInactiveByStatus() {
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.group(Group.USA_White)
    			.age(20)
    			.build();
    	
    	PersonReligiosity p2 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(false)
    			.group(Group.USA_White)
    			.age(20)
    			.build();
    	
    	double bias1 = p1.getInteractionsBiasScore(p2, main);
    	
    	assertEquals(18.572793836563097, bias1, 1e-5);
    }
    
    @Test
    public void testPersonReligiosityInteractionBias_eduInactiveByAge() {
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.group(Group.USA_White)
    			.age(17)
    			.build();
    	
    	PersonReligiosity p2 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.group(Group.USA_White)
    			.age(20)
    			.build();
    	
    	double bias1 = p1.getInteractionsBiasScore(p2, main);
    	
    	assertEquals(18.572793836563097, bias1, 1e-5);
    }
    
    @Test
    public void testPersonReligiosityInteractionBias_noneActive() {
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.group(Group.USA_White)
    			.age(17)
    			.build();
    	
    	PersonReligiosity p2 = new PersonReligiosity.Builder()
    			.gender(Gender_List.MALE)
    			.edu(false)
    			.group(Group.USA_White)
    			.age(20)
    			.build();
    	
    	double bias1 = p1.getInteractionsBiasScore(p2, main);
    	
    	assertEquals(5.15496809480402, bias1, 1e-5);
    }
    
    @Test
    public void testPersonReligiosity_toReligiosity() {
    	person.Affiliation = Affiliation.buddhists;
    	person.publicPractice = 0.2;
    	person.privatePractice = 0.3;
    	person.importance = 0.4;
    	person.supernaturalWorldview = 0.5;
    	person.attitudes = new HashMap<>();
    	person.attitudes.put(hindus, 0.6);
    	person.switchFrustration = 0.7;
    	person.disaffFrustration = 0.75;
    	person.Nativity = NON_NATIVE;
    	person.Gender = MALE;
    	person.Age = 20;
    	
    	PersonReligiosity pr = person.toReligiosity();
    	
    	assertTrue(pr.getIsImmigrant());
    	assertEquals(20.0, person.Age, 0.0);
    	assertTrue(pr.getGender() == MALE);
    }
    
    @Test
    public void testPersonReligiosityCache_immigrantParents() {
    	for (int age = 12; age < 90; age ++) {
    		main.personReligiosityCache.add(
    				new PersonReligiosity.Builder()
					.attitudes(Map.of(aff2, 0.1))
					.strictness(0.3)
					.age(age)
					.affiliation(aff1)
					.isImmigrant(true)
					.gender(MALE)
					.personId(age * 10)
					.build());
    		main.personReligiosityCache.add(
    				new PersonReligiosity.Builder()
					.attitudes(Map.of(aff2, 0.1))
					.strictness(0.3)
					.age(age)
					.affiliation(aff1)
					.isImmigrant(true)
					.gender(FEMALE)
					.personId(age * 100)
					.build());
    	}
    	person.Age = 30;
    	
    	for (int i = 0; i < 100; i++) {
	    	Optional<Integer[]> parentIdsOptional = main.personReligiosityCache.getImmigrantParentIds(person, main);
	    	
	    	assertTrue(parentIdsOptional.isPresent());
	    	Integer[] parentIds = parentIdsOptional.get();
	    	assertEquals(2, parentIds.length);
	    	assertTrue(parentIds[0] != null);
	    	assertTrue(parentIds[1] != null);
	    	int fatherId = parentIds[1] / 10;
	    	int motherId = parentIds[0] / 100;
	    	assertTrue(fatherId >= 30 + 15);
	    	assertTrue(fatherId <= 30 + 49);
	    	assertTrue(motherId >= 30 + 15);
	    	assertTrue(motherId <= 30 + 49);
    	}
    }

    @Test
    public void testPersonReligiosityCache_thirdStrictness() {
    	Affiliation aff1 = Affiliation.values()[0];
    	Affiliation aff2 = Affiliation.values()[1];

    	List<PersonReligiosity> lowerThird = List.of(
    							new PersonReligiosity.Builder()
    								.attitudes(Map.of(aff2, 0.1))
    								.strictness(0.3)
    								.age(12)
    								.affiliation(aff1)
    								.build(),
    							new PersonReligiosity.Builder()
    								.attitudes(Map.of(aff2, 0.2)) // Average
    								.strictness(0.1)
    								.age(12)
    								.affiliation(aff1)
    								.build(),
    							new PersonReligiosity.Builder()
    								.attitudes(Map.of(aff2, 0.3))
    								.strictness(0.2)
    								.affiliation(aff1)
    								.age(12)
    								.build());
    	
    	List<PersonReligiosity> middleThird = List.of(
								new PersonReligiosity.Builder()
									.attitudes(Map.of(aff2, 0.3))
									.strictness(0.35)
									.affiliation(aff1)
									.age(12)
									.build(),
								new PersonReligiosity.Builder()
									.attitudes(Map.of(aff2, 0.4)) // Average
									.strictness(0.5)
									.affiliation(aff1)
									.age(12)
									.build(),
								new PersonReligiosity.Builder()
									.attitudes(Map.of(aff2, 0.5))
									.strictness(0.6)
									.affiliation(aff1)
									.age(12)
									.build());
    	
    	List<PersonReligiosity> upperThird = List.of(
								new PersonReligiosity.Builder()
									.attitudes(Map.of(aff2, 0.5))
									.strictness(0.7)
									.affiliation(aff1)
									.age(12)
									.build(),
								new PersonReligiosity.Builder()
									.attitudes(Map.of(aff2, 0.6)) // Average
									.strictness(0.8)
									.affiliation(aff1)
									.age(12)
									.build(),
								new PersonReligiosity.Builder()
									.attitudes(Map.of(aff2, 0.7))
									.strictness(0.9)
									.affiliation(aff1)
									.age(12)
									.build());
    	
    	PersonReligiosityCache prc = new PersonReligiosityCache();
    	lowerThird.forEach(prc::add);
    	middleThird.forEach(prc::add);
    	upperThird.forEach(prc::add);

    	Optional<Map<Affiliation, Double>> lowerAttitudes = prc.getThirdsStrictnessAttitudeAverage(aff1, 0);
    	Optional<Map<Affiliation, Double>> middleAttitudes = prc.getThirdsStrictnessAttitudeAverage(aff1, 1);
    	Optional<Map<Affiliation, Double>> upperAttitudes = prc.getThirdsStrictnessAttitudeAverage(aff1, 2);
    	
    	assertTrue(lowerAttitudes.isPresent());
    	assertTrue(upperAttitudes.isPresent());
    	assertTrue(middleAttitudes.isPresent());

    	assertEquals(1, lowerAttitudes.get().size());
    	assertEquals(1, middleAttitudes.get().size());
    	assertEquals(1, upperAttitudes.get().size());

    	assertTrue(lowerAttitudes.get().containsKey(aff2));
    	assertTrue(middleAttitudes.get().containsKey(aff2));
    	assertTrue(upperAttitudes.get().containsKey(aff2));

    	assertEquals(0.2, lowerAttitudes.get().get(aff2), 1e-8);
    	assertEquals(0.4, middleAttitudes.get().get(aff2), 1e-8);
    	assertEquals(0.6, upperAttitudes.get().get(aff2), 1e-8);
    	
    	Optional<Map<Affiliation, Double>> shouldBeAbsent = prc.getThirdsStrictnessAttitudeAverage(aff2, 2);
    	assertFalse(shouldBeAbsent.isPresent());
    	shouldBeAbsent = prc.getThirdsStrictnessAttitudeAverage(aff2, 4);
    	assertFalse(shouldBeAbsent.isPresent());
    }
    

    @Test
    public void testPersonReligiosityCache_thirdStrictnessDim() {
    	Affiliation aff1 = Affiliation.values()[0];
    	Affiliation aff2 = Affiliation.values()[1];

    	List<PersonReligiosity> lowerThird = List.of(
    							new PersonReligiosity.Builder()
    								.publicPractice(0.1)
    								.privatePractice(0.2)
    								.supernaturalWorldview(0.3)
    								.importance(0.4)
    								.strictness(0.3)
    								.age(12)
    								.affiliation(aff1)
    								.build(),
    							new PersonReligiosity.Builder()
									.publicPractice(0.2)
    								.privatePractice(0.3)
    								.supernaturalWorldview(0.4)
    								.importance(0.5)
    								.strictness(0.1)
    								.age(12)
    								.affiliation(aff1)
    								.build(),
    							new PersonReligiosity.Builder()
									.publicPractice(0.3)
    								.privatePractice(0.4)
    								.supernaturalWorldview(0.5)
    								.importance(0.6)
    								.strictness(0.2)
    								.affiliation(aff1)
    								.age(12)
    								.build());
    	
    	List<PersonReligiosity> middleThird = List.of(
								new PersonReligiosity.Builder()
									.publicPractice(0.2)
									.privatePractice(0.3)
									.supernaturalWorldview(0.4)
									.importance(0.5)
									.strictness(0.35)
									.affiliation(aff1)
									.age(12)
									.build(),
								new PersonReligiosity.Builder()
									.publicPractice(0.3)
									.privatePractice(0.4)
									.supernaturalWorldview(0.5)
									.importance(0.6)
									.strictness(0.5)
									.affiliation(aff1)
									.age(12)
									.build(),
								new PersonReligiosity.Builder()
									.publicPractice(0.4)
									.privatePractice(0.5)
									.supernaturalWorldview(0.6)
									.importance(0.7)
									.strictness(0.6)
									.affiliation(aff1)
									.age(12)
									.build());
    	
    	List<PersonReligiosity> upperThird = List.of(
								new PersonReligiosity.Builder()
									.publicPractice(0.3)
									.privatePractice(0.4)
									.supernaturalWorldview(0.5)
									.importance(0.6)
									.strictness(0.7)
									.affiliation(aff1)
									.age(12)
									.build(),
								new PersonReligiosity.Builder()
									.publicPractice(0.4)
									.privatePractice(0.5)
									.supernaturalWorldview(0.6)
									.importance(0.7)
									.strictness(0.8)
									.affiliation(aff1)
									.age(12)
									.build(),
								new PersonReligiosity.Builder()
									.publicPractice(0.5)
									.privatePractice(0.6)
									.supernaturalWorldview(0.7)
									.importance(0.8)
									.strictness(0.9)
									.affiliation(aff1)
									.age(12)
									.build());
    	
    	PersonReligiosityCache prc = new PersonReligiosityCache();
    	lowerThird.forEach(prc::add);
    	middleThird.forEach(prc::add);
    	upperThird.forEach(prc::add);

    	Optional<Map<String, Double>> lowerAttitudes = prc.getThirdsStrictnessDimensionsAverage(aff1, 0);
    	Optional<Map<String, Double>> middleAttitudes = prc.getThirdsStrictnessDimensionsAverage(aff1, 1);
    	Optional<Map<String, Double>> upperAttitudes = prc.getThirdsStrictnessDimensionsAverage(aff1, 2);
    	
    	assertTrue(lowerAttitudes.isPresent());
    	assertTrue(upperAttitudes.isPresent());
    	assertTrue(middleAttitudes.isPresent());

    	assertEquals(5, lowerAttitudes.get().size());
    	assertEquals(5, middleAttitudes.get().size());
    	assertEquals(5, upperAttitudes.get().size());

    	assertTrue(lowerAttitudes.get().containsKey(PUBLIC));
    	assertTrue(lowerAttitudes.get().containsKey(PRIVATE));
    	assertTrue(lowerAttitudes.get().containsKey(IMPORTANCE));
    	assertTrue(lowerAttitudes.get().containsKey(SUPERNATURAL));
    	assertTrue(lowerAttitudes.get().containsKey(STRICTNESS));
    	
    	assertTrue(middleAttitudes.get().containsKey(PUBLIC));
    	assertTrue(middleAttitudes.get().containsKey(PRIVATE));
    	assertTrue(middleAttitudes.get().containsKey(IMPORTANCE));
    	assertTrue(middleAttitudes.get().containsKey(SUPERNATURAL));
    	assertTrue(middleAttitudes.get().containsKey(STRICTNESS));

    	assertTrue(upperAttitudes.get().containsKey(PUBLIC));
    	assertTrue(upperAttitudes.get().containsKey(PRIVATE));
    	assertTrue(upperAttitudes.get().containsKey(IMPORTANCE));
    	assertTrue(upperAttitudes.get().containsKey(SUPERNATURAL));
    	assertTrue(upperAttitudes.get().containsKey(STRICTNESS));

    	assertEquals(0.2, lowerAttitudes.get().get(PUBLIC), 1e-8);
    	assertEquals(0.3, lowerAttitudes.get().get(PRIVATE), 1e-8);
    	assertEquals(0.4, lowerAttitudes.get().get(SUPERNATURAL), 1e-8);
    	assertEquals(0.5, lowerAttitudes.get().get(IMPORTANCE), 1e-8);
    	assertEquals(0.2, lowerAttitudes.get().get(STRICTNESS), 1e-8);

    	assertEquals(0.3, middleAttitudes.get().get(PUBLIC), 1e-8);
    	assertEquals(0.4, middleAttitudes.get().get(PRIVATE), 1e-8);
    	assertEquals(0.5, middleAttitudes.get().get(SUPERNATURAL), 1e-8);
    	assertEquals(0.6, middleAttitudes.get().get(IMPORTANCE), 1e-8);
    	assertEquals(29.0 / 60.0, middleAttitudes.get().get(STRICTNESS), 1e-8);

    	assertEquals(0.4, upperAttitudes.get().get(PUBLIC), 1e-8);
    	assertEquals(0.5, upperAttitudes.get().get(PRIVATE), 1e-8);
    	assertEquals(0.6, upperAttitudes.get().get(SUPERNATURAL), 1e-8);
    	assertEquals(0.7, upperAttitudes.get().get(IMPORTANCE), 1e-8);
    	assertEquals(0.8, upperAttitudes.get().get(STRICTNESS), 1e-8);

    }
    
    @Test
    public void testPersonReligiosityCache_byId() {
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.group(Group.USA_White)
    			.age(17)
    			.personId(123)
    			.affiliation(unaffiliated)
    			.build();
    	
    	PersonReligiosity p2 = new PersonReligiosity.Builder()
    			.gender(Gender_List.MALE)
    			.edu(false)
    			.group(Group.USA_White)
    			.age(20)
    			.personId(456)
    			.affiliation(unaffiliated)
    			.build();
    	PersonReligiosityCache prc = new PersonReligiosityCache();
    	
    	prc.add(p1);
    	prc.add(p2);

    	assertEquals(p1, prc.getMostRecentReligiosityFor(123));
    	assertEquals(p2, prc.getMostRecentReligiosityFor(456));
    }
    
    @Test
    public void testPersonReligiosityCache_averageDimensions() {
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.importance(1)
    			.privatePractice(0.9)
    			.publicPractice(0.8)
    			.supernaturalWorldview(0.7)
    			.age(12)
    			.affiliation(unaffiliated)
    			.build();
    	
    	PersonReligiosity p2 = new PersonReligiosity.Builder()
    			.importance(0)
    			.privatePractice(0)
    			.publicPractice(0)
    			.supernaturalWorldview(0)
    			.age(12)
    			.affiliation(unaffiliated)
    			.build();
    	PersonReligiosityCache prc = new PersonReligiosityCache();
    	
    	prc.add(p1);
    	prc.add(p2);

    	assertEquals(0.5, prc.getAverageImportance(), 0.0);
    	assertEquals(0.45, prc.getAveragePrivate(), 0.0);
    	assertEquals(0.4, prc.getAveragePublic(), 0.0);
    	assertEquals(0.35, prc.getAverageSupernaturalWorldview(), 0.0);
    }
    
    @Test
    public void testPersonReligiosityCache_averageDimensionsAgeBlocked() {
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.importance(1)
    			.privatePractice(0.9)
    			.publicPractice(0.8)
    			.supernaturalWorldview(0.7)
    			.age(11)
    			.build();
    	
    	PersonReligiosity p2 = new PersonReligiosity.Builder()
    			.importance(0)
    			.privatePractice(0)
    			.publicPractice(0)
    			.supernaturalWorldview(0)
    			.age(11)
    			.build();
    	PersonReligiosityCache prc = new PersonReligiosityCache();
    	
    	prc.add(p1);
    	prc.add(p2);

    	assertTrue(Double.isNaN(prc.getAverageImportance()));
    	assertTrue(Double.isNaN(prc.getAveragePrivate()));
    	assertTrue(Double.isNaN(prc.getAveragePublic()));
    	assertTrue(Double.isNaN(prc.getAverageSupernaturalWorldview()));
    }
    
    @Test
    public void testPersonReligiosityCacheInteractions_noEdu() {
    	PersonReligiosityCache prc = createPopulatedPRC();
    	
    	double successCount = 0;
    	double failureCount = 0;
    	
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.affiliation(Affiliation.buddhists)
    			.group(Group.USA_White)
    			.age(17)
    			.strictness(0.3)
    			.personId(123)
    			.build();
    	
    	int sameEduCount = 0;
    	double total = 0;
    	
    	for (int i = 0; i < 1000; i++) {
    		List<PersonReligiosity> interactions = prc.getInteractions(p1, main);
    		int sameGenderCount = 0;
    		int sameAffCount = 0;
    		int sameGroupCount = 0;
    		
    		for (PersonReligiosity interaction : interactions) {
    			total++;
    			if (interaction.getAge() < 16 || 18 < interaction.getAge()) {
    				fail("Outside of interaction range");
    			}
    			
    			if (p1.getGender() == interaction.getGender()) {
    				sameGenderCount++;
    			}
    			if (p1.getEdu() == interaction.getEdu()) {
    				sameEduCount++;
    			}
    			if (p1.getAffiliation() == interaction.getAffiliation()) {
    				sameAffCount++;
    			}
    			if (p1.getGroup() == interaction.getGroup()) {
    				sameGroupCount++;
    			}
    		}
    		if (sameGenderCount > 6
    			&& sameAffCount >= 3
    			//&& sameGroupCount == 10
    			) {
    			
    			successCount++;
    		} else {
    			failureCount++;
    		}
    		
    	}
    	double passRate = successCount / (successCount + failureCount);
    	assertTrue("Pass rate too low: " + passRate, passRate >= 0.65);
    	// Treating education separately here because variation seems rather high between runs
    	// But since the p1 is age < 18, education should not be biased
    	assertEquals(0.5, sameEduCount / total, 0.1);
    }
    

    @Test
    public void testPersonReligiosityCacheInteractions_eduBias() {
    	PersonReligiosityCache prc = createPopulatedPRC();
    	
    	double successCount = 0;
    	double failureCount = 0;
    	
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.affiliation(Affiliation.buddhists)
    			.group(Group.USA_White)
    			.age(18)
    			.strictness(0.3)
    			.personId(123)
    			.build();
    	
    	for (int i = 0; i < 1000; i++) {
    		List<PersonReligiosity> interactions = prc.getInteractions(p1, main);
    		int sameGenderCount = 0;
    		int sameAffCount = 0;
    		int sameGroupCount = 0;
    		int sameEduCount = 0;
    		
    		for (PersonReligiosity interaction : interactions) {
    			if (interaction.getAge() < 17 || 19 < interaction.getAge()) {
    				fail("Outside of interaction range");
    			}
    			
    			if (p1.getGender() == interaction.getGender()) {
    				sameGenderCount++;
    			}
    			if (p1.getEdu() == interaction.getEdu()) {
    				sameEduCount++;
    			}
    			if (p1.getAffiliation() == interaction.getAffiliation()) {
    				sameAffCount++;
    			}
    			if (p1.getGroup() == interaction.getGroup()) {
    				sameGroupCount++;
    			}
    		}
    		if (sameGenderCount > 6
    			&& sameAffCount >= 3
    			//&& sameGroupCount == 10
    			&& sameEduCount > 5) {
    			
    			successCount++;
    		} else {
    			failureCount++;
    		}
    		
    	}
    	double passRate = successCount / (successCount + failureCount);
    	assertTrue("Pass rate too low: " + passRate, passRate >= 0.65);
    }
    
    @Test
    public void testPersonReligiosityCacheInteractions_age30() {
    	PersonReligiosityCache prc = createPopulatedPRC();
    	
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.affiliation(Affiliation.buddhists)
    			.group(Group.USA_White)
    			.age(30)
    			.strictness(0.3)
    			.personId(123)
    			.build();

		List<PersonReligiosity> interactions = prc.getInteractions(p1, main);
		
		for (PersonReligiosity interaction : interactions) {
			if (interaction.getAge() < 25 || 35 < interaction.getAge()) {
				fail("Outside of interaction range: " + interaction.getAge());
			}
		}
    }
    
    @Test
    public void testPersonReligiosityCacheInteractions_age40() {
    	PersonReligiosityCache prc = createPopulatedPRC();
    	
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.affiliation(Affiliation.buddhists)
    			.group(Group.USA_White)
    			.age(40)
    			.strictness(0.3)
    			.personId(123)
    			.build();

		List<PersonReligiosity> interactions = prc.getInteractions(p1, main);
		
		for (PersonReligiosity interaction : interactions) {
			if (interaction.getAge() < 30 || 50 < interaction.getAge()) {
				fail("Outside of interaction range: " + interaction.getAge());
			}
		}
    }

    @Test
    public void testPersonReligiosityCacheInteractions_age55() {
    	PersonReligiosityCache prc = createPopulatedPRC();
    	
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.affiliation(Affiliation.buddhists)
    			.group(Group.USA_White)
    			.age(55)
    			.strictness(0.3)
    			.personId(123)
    			.build();

		List<PersonReligiosity> interactions = prc.getInteractions(p1, main);
		
		for (PersonReligiosity interaction : interactions) {
			if (interaction.getAge() < 45 || 65 < interaction.getAge()) {
				fail("Outside of interaction range: " + interaction.getAge());
			}
		}
    }
    
    @Test
    public void testPersonReligiosityCacheInteractions_age70() {
    	PersonReligiosityCache prc = createPopulatedPRC();
    	
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.affiliation(Affiliation.buddhists)
    			.group(Group.USA_White)
    			.age(70)
    			.strictness(0.3)
    			.personId(123)
    			.build();

		List<PersonReligiosity> interactions = prc.getInteractions(p1, main);
		
		for (PersonReligiosity interaction : interactions) {
			if (interaction.getAge() < 60 || 80 < interaction.getAge()) {
				fail("Outside of interaction range: " + interaction.getAge());
			}
		}
    }
    
    @Test
    public void testPersonReligiosityCacheInteractions_allAgesCheck() {
    	PersonReligiosityCache prc = createPopulatedPRC(10, 100);
    	
    	for (int testAge = 0; testAge < 100; testAge++) {
	    	PersonReligiosity p1 = new PersonReligiosity.Builder()
	    			.gender(Gender_List.FEMALE)
	    			.edu(true)
	    			.affiliation(Affiliation.buddhists)
	    			.group(Group.USA_White)
	    			.age(testAge)
	    			.strictness(0.3)
	    			.personId(123)
	    			.build();
	
			List<PersonReligiosity> interactions = prc.getInteractions(p1, main);
			
			if ((12 <= testAge && testAge <= 25) || testAge == 30 || testAge == 40 || testAge == 55 || testAge == 70) {
				assertFalse("Empty for age: " + testAge, interactions.isEmpty());
			} else {
				assertTrue("Not empty for age: " + testAge, interactions.isEmpty());
			}
    	}
    }
    
    @Test
    public void testPersonReligiosityCacheCoupling_eduBias() {
    	PersonReligiosityCache prc = createPopulatedPRC();
    	
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.affiliation(Affiliation.buddhists)
    			.group(Group.USA_White)
    			.age(18)
    			.strictness(0.3)
    			.personId(123)
    			.attitudes(positiveAttitudes())
    			.build();
    	
    	GlobalParametersHaving globals = this.makeMockGPH(
    			/* rel= */ 0.5, 
    			/* sec= */ 0.1, 
    			/* plu= */ 0.2, 
    			/* life Opp= */ 0.2, 
    			/* Exi= */ 0.2, 
    			/* freedom= */ 0.2);
    	
    	int sameEduCount = 0;
    	int total = 0;
    	for (int i = 0; i < 1000; i++) {
    		
    		PersonReligiosity pick = prc.getCoupling(p1, main, globals);
    		
    		if (pick == null) {
    			continue;
    		}
    		
    		total++;
    		
    		if (pick.getAge() < 15 || 18 + 5 < pick.getAge()) {
    			fail("Outside coupling range");
    		}
    		
    		if (pick.getGender() == Gender_List.FEMALE) {
    			fail("Should only return male picks");
    		}
    		
    		if (p1.getEdu() == pick.getEdu()) {
    			sameEduCount++;
    		}
    		
    		
    	}
    	double passRate = (1.0 * sameEduCount) / total;
    	assertTrue("Pass rate too low: " + passRate, passRate >= 0.7);
    }
    
    
    @Test
    public void testPersonReligiosityCacheCoupling_attitudes() {
    	PersonReligiosityCache prc = createPopulatedPRC();
    	
    	// Buddhist agent who relatively dislikes folk_religionists
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.affiliation(Affiliation.buddhists)
    			.group(Group.USA_White)
    			.age(18)
    			.strictness(0.5)
    			.importance(0.4)
    			.personId(123)
    			.attitudes(positiveAttitudesExcept(Affiliation.folk_religions, 0.4))
    			.build();
    	
    	GlobalParametersHaving globals = this.makeMockGPH(
    			/* rel= */ 0.5, 
    			/* sec= */ 0.1, 
    			/* plu= */ 0.2, 
    			/* life Opp= */ 0.2, 
    			/* Exi= */ 0.2, 
    			/* freedom= */ 0.2);
    	
    	Map<Affiliation, Integer> affiliationCounts = new HashMap<>();
    	int total = 0;
    	for (int i = 0; i < 1000; i++) {
    		
    		PersonReligiosity pick = prc.getCoupling(p1, main, globals);
    		
    		if (pick == null) {
    			continue;
    		}
    		
    		total++;
    		
    		if (pick.getAge() < 15 || 18 + 5 < pick.getAge()) {
    			fail("Outside coupling range");
    		}
    		
    		if (pick.getGender() == Gender_List.FEMALE) {
    			fail("Should only return male picks");
    		}
    		
    		if (!affiliationCounts.containsKey(pick.getAffiliation())) {
    			affiliationCounts.put(pick.getAffiliation(), 0);
    		}
    		
    		affiliationCounts.merge(pick.getAffiliation(), 1, Integer::sum);
    	}
    	double totalPicks = affiliationCounts.values().stream().mapToInt(Integer::intValue).sum();
    	double folkRate = affiliationCounts.get(folk_religions) / totalPicks;
    	double sameAffRate = affiliationCounts.get(buddhists) / totalPicks;
    	double otherRate = affiliationCounts.entrySet().stream()
    							.filter(p -> p.getKey() != folk_religions)
    							.filter(p -> p.getKey() != buddhists)
    							.map(Map.Entry::getValue)
    							.mapToInt(Integer::intValue)
    							.sum()
    							/ (Affiliation.values().length - 2)
    							/ totalPicks;
    	
    	assertTrue(folkRate < otherRate);
    	assertTrue(otherRate < sameAffRate);
    	assertTrue(folkRate < 0.1);
    	assertTrue(otherRate * 2 < sameAffRate);
    }
    
    @Test
    public void testPluralism() {
    	PersonReligiosityCache prc = createPopulatedPRC();
    	
    	double plu = prc.calculatePluralism();
    	
    	assertEquals(1.0, plu, 0.0);
    }
    
    @Test
    public void testPersonReligiosityCache_nonesProportionNaN() {
    	PersonReligiosityCache prc = new PersonReligiosityCache();
    	
    	assertTrue(Double.isNaN(prc.getNonesProportion()));
    }
    
    @Test
    public void testPersonReligiosityCache_nonesProportionSome() {
    	PersonReligiosityCache prc = new PersonReligiosityCache();
    	
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.affiliation(Affiliation.buddhists)
    			.group(Group.USA_White)
    			.age(18)
    			.strictness(0.3)
    			.personId(123)
    			.attitudes(positiveAttitudesExcept(Affiliation.folk_religions, 0.4))
    			.build();
    	PersonReligiosity pNone = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.affiliation(Affiliation.unaffiliated)
    			.group(Group.USA_White)
    			.age(18)
    			.strictness(0.3)
    			.personId(123)
    			.attitudes(positiveAttitudesExcept(Affiliation.folk_religions, 0.4))
    			.build();
    	
    	prc.add(p1);
    	prc.add(pNone);
    	
    	assertEquals(0.5, prc.getNonesProportion(), 1e-8);
    }
    
    @Test
    public void testPersonReligiosityCache_nonePropAll() {
    	PersonReligiosityCache prc = new PersonReligiosityCache();
    	
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.affiliation(Affiliation.unaffiliated)
    			.group(Group.USA_White)
    			.age(18)
    			.strictness(0.3)
    			.personId(123)
    			.attitudes(positiveAttitudesExcept(Affiliation.folk_religions, 0.4))
    			.build();
    	PersonReligiosity pNone = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.affiliation(Affiliation.unaffiliated)
    			.group(Group.USA_White)
    			.age(18)
    			.strictness(0.3)
    			.personId(123)
    			.attitudes(positiveAttitudesExcept(Affiliation.folk_religions, 0.4))
    			.build();
    	
    	prc.add(p1);
    	prc.add(pNone);
    	
    	assertEquals(1.0, prc.getNonesProportion(), 1e-8);
    }
    
    @Test
    public void testPersonReligiosityCacheCoupling_strictness() {
    	PersonReligiosityCache prc = createPopulatedPRC();
    	
    	// Somewhat strict agent with high importance will be more exclusive
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.gender(Gender_List.FEMALE)
    			.edu(true)
    			.affiliation(Affiliation.buddhists)
    			.group(Group.USA_White)
    			.age(18)
    			.strictness(0.85)
    			.importance(1)
    			.personId(123)
    			.attitudes(positiveAttitudes())
    			.build();
    	
    	GlobalParametersHaving globals = this.makeMockGPH(
    			/* rel= */ 0.5, 
    			/* sec= */ 0.1, 
    			/* plu= */ 0.2, 
    			/* life Opp= */ 0.2, 
    			/* Exi= */ 0.2, 
    			/* freedom= */ 0.2);
    	
    	Map<Affiliation, Integer> affiliationCounts = new HashMap<>();
    	int inStrictnessRangeCount = 0;
    	int sameAffTotal = 0;
    	int total = 0;
    	for (int i = 0; i < 1000; i++) {
    		PersonReligiosity pick = prc.getCoupling(p1, main, globals);
    		
    		if (pick == null) {
    			continue;
    		}
    		
    		total++;
    		
    		if (pick.getAge() < 15 || 18 + 5 < pick.getAge()) {
    			fail("Outside coupling range");
    		}
    		
    		if (pick.getGender() == Gender_List.FEMALE) {
    			fail("Should only return male picks");
    		}
    		
    		if (!affiliationCounts.containsKey(pick.getAffiliation())) {
    			affiliationCounts.put(pick.getAffiliation(), 0);
    		}
    		
    		affiliationCounts.merge(pick.getAffiliation(), 1, Integer::sum);
    		
    		if (pick.getAffiliation() == buddhists) {
    			sameAffTotal++;
    			if (pick.getStrictness() >= 0.7 && pick.getStrictness() <= 0.92) {
    				inStrictnessRangeCount++;
    			}
    		}
    	}
    	double totalPicks = affiliationCounts.values().stream().mapToInt(Integer::intValue).sum();
    	double sameAffRate = affiliationCounts.get(buddhists) / totalPicks;
    	double otherRate = affiliationCounts.entrySet().stream()
    							.filter(p -> p.getKey() != buddhists)
    							.map(Map.Entry::getValue)
    							.mapToInt(Integer::intValue)
    							.sum()
    							/ (Affiliation.values().length - 1)
    							/ totalPicks;
    	
    	assertTrue(otherRate < sameAffRate);
    	assertTrue(otherRate * 3 < sameAffRate);
    	
    	double inRangeRate = inStrictnessRangeCount / (1.0 * sameAffTotal);
    	assertTrue(inRangeRate > 0.65);
    }
    
    @Test
    public void testStrictnessRange() {
    	double s = 0.5;
    	Double[] range = PersonReligiosityCache.getStrictnessRange(s);
    	assertEquals(0, range[0], 0);
    	assertEquals(0.777777, range[1], 0.01);
    }
    
    @Test
    public void testStrictnessRange_belowp5() {
    	double s = 0.3;
    	Double[] range = PersonReligiosityCache.getStrictnessRange(s);
    	assertEquals(0, range[0], 0);
    	assertEquals(0.66666, range[1], 0.01);
    }
    
    @Test
    public void testStrictnessRange_abovep5() {
    	double s = 0.85;
    	Double[] range = PersonReligiosityCache.getStrictnessRange(s);
    	assertEquals(0.633, range[0], 0.01);
    	assertEquals(0.972, range[1], 0.01);
    }
    
    @Test
    public void testHighLevelInteractionType_RXRX() {
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.buddhists)
    			.build();
    	
    	PersonReligiosity p2 = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.buddhists)
    			.build();

    	String h12 = p1.getHighLevelInteractionType(p2, main);
    	String h21 = p2.getHighLevelInteractionType(p1, main);
    	
    	assertEquals("RX_RX", h12);
    	assertEquals("RX_RX", h21);
    }
    
    @Test
    public void testHighLevelInteractionType_SECSEC() {
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.unaffiliated)
    			.build();
    	
    	PersonReligiosity p2 = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.unaffiliated)
    			.build();

    	String h12 = p1.getHighLevelInteractionType(p2, main);
    	String h21 = p2.getHighLevelInteractionType(p1, main);
    	
    	assertEquals("SEC_SEC", h12);
    	assertEquals("SEC_SEC", h21);
    }
    
    @Test
    public void testHighLevelInteractionType_RXRY() {
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.buddhists)
    			.build();
    	
    	PersonReligiosity p2 = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.christians)
    			.build();

    	String h12 = p1.getHighLevelInteractionType(p2, main);
    	String h21 = p2.getHighLevelInteractionType(p1, main);
    	
    	assertEquals("RX_RY", h12);
    	assertEquals("RX_RY", h21);
    }
    
    @Test
    public void testHighLevelInteractionType_RXSEC() {
    	PersonReligiosity p1 = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.buddhists)
    			.build();
    	
    	PersonReligiosity p2 = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.unaffiliated)
    			.build();

    	String h12 = p1.getHighLevelInteractionType(p2, main);
    	String h21 = p2.getHighLevelInteractionType(p1, main);
    	
    	assertEquals("RX_SEC", h12);
    	assertEquals("SEC_RX", h21);
    }
    
   // "RX_RX", m -> rx_rx_likelihood(m.religiousEducation(), m.secularEducation(), m.pluralism()),
	//"RX_RY", m -> rx_ry_likelihood(m.religiousEducation(), m.secularEducation(), m.existentialSecurity(), m.pluralism()),
	//"RX_SEC", m -> rx_sec_likelihoods(m.religiousEducation(), m.secularEducation(), m.pluralism()),
	//"SEC_SEC", m -> Map.of("positive_affirming", 0.5, "negative_switching", 0.5),
	//"SEX_RX", m -> Map.of(
//			       	"positive_switching", 0.5 - 0.5 * m.secularEducation() + 0.5 * m.pluralism(),
//			       	"negative_reactive", 0.5 + 0.5 * m.secularEducation() - 0.5 * m.pluralism()
    
    @Test
    public void testLowLevelInteractionType_RXRX() {
    	GlobalParametersHaving globals = makeMockGPH(0, 0, 0, 0, 0);
    	
    	double numPos = 0;
    	double numNegSec = 0;
    	double numSwitch = 0;
    	double total = 0;
    	for (int i = 0; i < 1000; i++) {
    		String result = InteractionsUtils.getLowLevelInteractionType("RX_RX", globals, main);
    		total++;
    		if (result.equals("positive_affirming")) {
    			numPos++;
    		}
    		else if (result.equals("negative_secular")) {
    			numNegSec++;
    		}
    		else if (result.equals("negative_switching")) {
    			numSwitch++;
    		} else {
    			fail("Invalid result string");
    		}
    	}
    	
    	assertTrue(numPos / total >= 0.85);
    	assertTrue(numNegSec > 0);
    	assertTrue(numSwitch > 0);
    	
    	// double rel, double sec, double plu, double lif, double exi
		globals = makeMockGPH(0, 0.2, 0.2, 0.2, 0.2);
		    	
    	numPos = 0;
    	numNegSec = 0;
    	numSwitch = 0;
    	total = 0;
    	for (int i = 0; i < 1000; i++) {
    		String result = InteractionsUtils.getLowLevelInteractionType("RX_RX", globals, main);
    		total++;
    		if (result.equals("positive_affirming")) {
    			numPos++;
    		}
    		else if (result.equals("negative_secular")) {
    			numNegSec++;
    		}
    		else if (result.equals("negative_switching")) {
    			numSwitch++;
    		} else {
    			fail("Invalid result string");
    		}
    	}

    	assertTrue(numPos / total >= 0.2);
    	assertTrue(numPos / total < 0.5);
    	assertTrue(numNegSec > numSwitch);
		    	
		globals = makeMockGPH(0, 0.7, 0.7, 0.7, 0.7);
    	
    	numPos = 0;
    	numNegSec = 0;
    	numSwitch = 0;
    	total = 0;
    	for (int i = 0; i < 1000; i++) {
    		String result = InteractionsUtils.getLowLevelInteractionType("RX_RX", globals, main);
    		total++;
    		if (result.equals("positive_affirming")) {
    			numPos++;
    		}
    		else if (result.equals("negative_secular")) {
    			numNegSec++;
    		}
    		else if (result.equals("negative_switching")) {
    			numSwitch++;
    		} else {
    			fail("Invalid result string");
    		}
    	}
    	assertTrue(numNegSec / total >= 0.7);
    }
    
    @Test
    public void testLowLevelInteractionType_RXRY() {
    	// TODO
    }
    
    @Test
    public void testLowLevelInteractionType_RXSEC() {
    	// TODO
    }
    
    @Test
    public void testDelta_totalConversion() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(unaffiliated)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.buddhists)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.attitudes(Map.of(hindus, 0.6))
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction(InteractionsUtils.TOTAL_CONVERSION, "", ego, alter, main, main);
    	
    	assertTrue(d.getAffiliationChange().isPresent());
    	assertTrue(buddhists == d.getAffiliationChange().get());
    	
    	assertTrue(d.strictness().isPresent());
    	assertEquals(0.1, d.strictness().get(), 0.0);
    	
    	assertTrue(d.publicPractice().isPresent());
    	assertEquals(0.2, d.publicPractice().get(), 0.0);
    	
    	assertTrue(d.privatePractice().isPresent());
    	assertEquals(0.3, d.privatePractice().get(), 0.0);
    	
    	assertTrue(d.importance().isPresent());
    	assertEquals(0.4, d.importance().get(), 0.0);
    	
    	assertTrue(d.supernatural().isPresent());
    	assertEquals(0.5, d.supernatural().get(), 0.0);
    	
    	assertTrue(d.attitudeChanges().size() == 1);
    	assertTrue(d.attitudeChanges().containsKey(hindus));
    	assertEquals(0.6, d.attitudeChanges().get(hindus), 0.0);
    	
    	assertTrue(d.switchFrustration().isPresent());
    	assertEquals(0.1, d.switchFrustration().get(), 0.0);
    	
    	assertTrue(d.disaff().isPresent());
    	assertEquals(0.1, d.disaff().get(), 0.0);
    }
    
    @Test
    public void testDelta_rxrxPosAffirming() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(buddhists)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.buddhists)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.attitudes(Map.of(hindus, 0.6))
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction("RX_RX", 
    													   InteractionsUtils.POSITIVE_AFFIRMING, 
    													   ego, 
    													   alter, 
    													   makeMockGPH(0.0, 0.0, 0.0, 0.0, 0.0), 
    													   main);
    	
    	assertFalse(d.getAffiliationChange().isPresent());
    	
    	assertFalse(d.strictness().isPresent());
    	
    	assertTrue(d.publicPractice().isPresent());
    	assertEquals(main.dimensionsIncrement, d.publicPractice().get(), 0.0);
    	
    	assertTrue(d.privatePractice().isPresent());
    	assertEquals(main.dimensionsIncrement, d.privatePractice().get(), 0.0);
    	
    	assertTrue(d.importance().isPresent());
    	assertEquals(main.dimensionsIncrement, d.importance().get(), 0.0);
    	
    	assertTrue(d.supernatural().isPresent());
    	assertEquals(main.dimensionsIncrement, d.supernatural().get(), 0.0);
    	
    	assertTrue(d.attitudeChanges().size() == 1);
    	assertTrue(d.attitudeChanges().containsKey(buddhists));
    	assertEquals(main.attitudeIncrement, d.attitudeChanges().get(buddhists), 0.0);
    	
    	assertTrue(d.switchFrustration().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.switchFrustration().get(), 0.0);
    	
    	assertFalse(d.disaff().isPresent());
    }
    
    @Test
    public void testDelta_rxrxPosAffirmingOtherAffs() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(buddhists)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.buddhists)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.attitudes(Map.of(hindus, 0.6))
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction("RX_RX", 
    													   InteractionsUtils.POSITIVE_AFFIRMING, 
    													   ego, 
    													   alter, 
    													   makeMockGPH(0.0, 0.0, 1.0, 0.0, 0.0), 
    													   main);
    	
    	assertFalse(d.getAffiliationChange().isPresent());
    	
    	assertFalse(d.strictness().isPresent());
    	
    	assertTrue(d.publicPractice().isPresent());
    	assertEquals(main.dimensionsIncrement, d.publicPractice().get(), 0.0);
    	
    	assertTrue(d.privatePractice().isPresent());
    	assertEquals(main.dimensionsIncrement, d.privatePractice().get(), 0.0);
    	
    	assertTrue(d.importance().isPresent());
    	assertEquals(main.dimensionsIncrement, d.importance().get(), 0.0);
    	
    	assertTrue(d.supernatural().isPresent());
    	assertEquals(main.dimensionsIncrement, d.supernatural().get(), 0.0);
    	
    	assertEquals(d.attitudeChanges().size(), Affiliation.values().length - 1);
    	Map<Affiliation, Double> attitudes = d.attitudeChanges();
    	
    	for (Affiliation aff : Affiliation.values()) {
    		if (aff == unaffiliated) {
    			assertFalse(attitudes.containsKey(aff));
    		} else if (aff == buddhists) {
    			assertTrue(attitudes.containsKey(aff));
    			assertEquals(main.attitudeIncrement, attitudes.get(aff), 0.0);
    		} else {
    			assertTrue(attitudes.containsKey(aff));
    			assertEquals(main.attitudeIncrement, attitudes.get(aff), 0.0);
    		}
    	}
    	
    	assertTrue(d.switchFrustration().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.switchFrustration().get(), 0.0);
    	
    	assertFalse(d.disaff().isPresent());
    }
    
    @Test
    public void testDelta_rxrxNegSecular() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(buddhists)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.buddhists)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.attitudes(Map.of(hindus, 0.6))
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction("RX_RX", 
    													   InteractionsUtils.NEGATIVE_SECULAR, 
    													   ego, 
    													   alter, 
    													   makeMockGPH(0.0, 0.0, 0.0, 0.0, 0.0), 
    													   main);
    	
    	assertFalse(d.getAffiliationChange().isPresent());
    	
    	assertFalse(d.strictness().isPresent());
    	
    	assertTrue(d.publicPractice().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.publicPractice().get(), 0.0);
    	
    	assertTrue(d.privatePractice().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.privatePractice().get(), 0.0);
    	
    	assertTrue(d.importance().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.importance().get(), 0.0);
    	
    	assertTrue(d.supernatural().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.supernatural().get(), 0.0);
    	
    	assertTrue(d.switchFrustration().isPresent());
    	assertEquals(main.dimensionsIncrement, d.switchFrustration().get(), 0.0);
    	
    	assertTrue(d.disaff().isPresent());
    	assertEquals(main.dimensionsIncrement, d.disaff().get(), 0.0);
    	
    	assertEquals(Affiliation.values().length - 1, d.attitudeChanges().size());
    	Map<Affiliation, Double> attitudes = d.attitudeChanges();
    	
    	for (Affiliation aff : Affiliation.values()) {
    		if (aff == unaffiliated) {
    			assertFalse(attitudes.containsKey(aff));
    		} else if (aff == buddhists) {
    			assertTrue(attitudes.containsKey(aff));
    			assertEquals(- main.attitudeSelfDecrement, attitudes.get(aff), 0.0);
    		} else {
    			assertTrue(attitudes.containsKey(aff));
    			assertEquals(- 0.5 * main.attitudeSelfDecrement, attitudes.get(aff), 0.0);
    		}
    	}
    }
    
    @Test
    public void testDelta_rxrxNegSwitching() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(buddhists)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.buddhists)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.attitudes(Map.of(hindus, 0.6))
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction("RX_RX", 
    													   InteractionsUtils.NEGATIVE_SWITCHING, 
    													   ego, 
    													   alter, 
    													   makeMockGPH(0.0, 0.0, 0.0, 0.0, 0.0), 
    													   main);
    	
    	assertFalse(d.getAffiliationChange().isPresent());
    	
    	assertFalse(d.strictness().isPresent());
    	
    	assertTrue(d.publicPractice().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.publicPractice().get(), 0.0);
    	
    	assertFalse(d.privatePractice().isPresent());
    	
    	assertFalse(d.importance().isPresent());
    	
    	assertFalse(d.supernatural().isPresent());
    	
    	assertTrue(d.switchFrustration().isPresent());
    	assertEquals(main.dimensionsIncrement, d.switchFrustration().get(), 0.0);
    	
    	assertFalse(d.disaff().isPresent());
    	
    	assertEquals(1, d.attitudeChanges().size());
    	Map<Affiliation, Double> attitudes = d.attitudeChanges();
    	assertTrue(attitudes.containsKey(buddhists));
    	assertEquals(-main.attitudeSelfDecrement, attitudes.get(buddhists), 0.0);
    }
    
    @Test
    public void testDelta_rxryPosSwitching() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(buddhists)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.hindus)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction("RX_RY", 
    													   InteractionsUtils.POSITIVE_SWITCHING, 
    													   ego, 
    													   alter, 
    													   makeMockGPH(0.0, 0.0, 0.0, 0.0, 0.0), 
    													   main);
    	
    	assertFalse(d.getAffiliationChange().isPresent());
    	
    	assertFalse(d.strictness().isPresent());
    	
    	assertTrue(d.publicPractice().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.publicPractice().get(), 0.0);
    	
    	assertTrue(d.privatePractice().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.privatePractice().get(), 0.0);
    	
    	assertFalse(d.importance().isPresent());
    	
    	assertFalse(d.supernatural().isPresent());
    	
    	assertTrue(d.attitudeChanges().size() == 1);
    	assertTrue(d.attitudeChanges().containsKey(hindus));
    	assertEquals(main.attitudeIncrement, d.attitudeChanges().get(hindus), 0.0);
    	
    	assertTrue(d.switchFrustration().isPresent());
    	assertEquals(main.dimensionsIncrement, d.switchFrustration().get(), 0.0);
    	
    	assertTrue(d.disaff().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.disaff().get(), 0.0);
    }
    
    @Test
    public void testDelta_rxryPosSecular() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(buddhists)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.hindus)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction("RX_RY", 
    													   InteractionsUtils.POSITIVE_SECULAR, 
    													   ego, 
    													   alter, 
    													   makeMockGPH(0.0, 0.0, 0.0, 0.0, 0.0), 
    													   main);
    	
    	assertFalse(d.getAffiliationChange().isPresent());
    	
    	assertFalse(d.strictness().isPresent());
    	
    	assertTrue(d.publicPractice().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.publicPractice().get(), 0.0);
    	
    	assertTrue(d.privatePractice().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.privatePractice().get(), 0.0);

    	assertTrue(d.importance().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.importance().get(), 0.0);

    	assertTrue(d.supernatural().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.supernatural().get(), 0.0);
    	
    	assertTrue(d.attitudeChanges().size() == 1);
    	assertTrue(d.attitudeChanges().containsKey(unaffiliated));
    	assertEquals(main.attitudeIncrement, d.attitudeChanges().get(unaffiliated), 0.0);
    	
    	assertFalse(d.switchFrustration().isPresent());
    	
    	assertTrue(d.disaff().isPresent());
    	assertEquals(main.dimensionsIncrement, d.disaff().get(), 0.0);
    }
    
    @Test
    public void testDelta_rxryNegReactive() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(buddhists)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.hindus)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction("RX_RY", 
    													   InteractionsUtils.NEGATIVE_REACTIVE, 
    													   ego, 
    													   alter, 
    													   makeMockGPH(0.0, 0.0, 0.0, 0.0, 0.0), 
    													   main);
    	
    	assertFalse(d.getAffiliationChange().isPresent());
    	
    	assertFalse(d.strictness().isPresent());
    	
    	assertTrue(d.publicPractice().isPresent());
    	assertEquals(main.dimensionsIncrement, d.publicPractice().get(), 0.0);
    	
    	assertTrue(d.privatePractice().isPresent());
    	assertEquals(main.dimensionsIncrement, d.privatePractice().get(), 0.0);

    	assertTrue(d.importance().isPresent());
    	assertEquals(main.dimensionsIncrement, d.importance().get(), 0.0);

    	assertFalse(d.supernatural().isPresent());
    	
    	assertTrue(d.attitudeChanges().size() == 1);
    	assertTrue(d.attitudeChanges().containsKey(hindus));
    	assertEquals(-main.attitudeIncrement, d.attitudeChanges().get(hindus), 0.0);
    	
    	assertTrue(d.switchFrustration().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.switchFrustration().get(), 0.0);
    	
    	assertTrue(d.disaff().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.disaff().get(), 0.0);
    }
    
    @Test
    public void testDelta_rxSecPositiveSecular() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(buddhists)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.hindus)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction("RX_SEC", 
    													   InteractionsUtils.POSITIVE_SECULAR, 
    													   ego, 
    													   alter, 
    													   makeMockGPH(0.0, 0.0, 0.0, 0.0, 0.0), 
    													   main);
    	
    	assertFalse(d.getAffiliationChange().isPresent());
    	
    	assertFalse(d.strictness().isPresent());
    	
    	assertTrue(d.publicPractice().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.publicPractice().get(), 0.0);
    	
    	assertTrue(d.privatePractice().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.privatePractice().get(), 0.0);

    	assertTrue(d.importance().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.importance().get(), 0.0);

    	assertTrue(d.supernatural().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.supernatural().get(), 0.0);
    	
    	assertTrue(d.attitudeChanges().size() == 1);
    	assertTrue(d.attitudeChanges().containsKey(unaffiliated));
    	assertEquals(main.attitudeIncrement, d.attitudeChanges().get(unaffiliated), 0.0);
    	
    	assertFalse(d.switchFrustration().isPresent());
    	
    	assertTrue(d.disaff().isPresent());
    	assertEquals(main.dimensionsIncrement, d.disaff().get(), 0.0);
    }
    
    @Test
    public void testDelta_rxSecNegReactive() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(buddhists)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.hindus)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction("RX_SEC", 
    													   InteractionsUtils.NEGATIVE_REACTIVE, 
    													   ego, 
    													   alter, 
    													   makeMockGPH(0.0, 0.0, 0.0, 0.0, 0.0), 
    													   main);
    	
    	assertFalse(d.getAffiliationChange().isPresent());
    	
    	assertFalse(d.strictness().isPresent());
    	
    	assertFalse(d.publicPractice().isPresent());
    	
    	assertFalse(d.privatePractice().isPresent());

    	assertTrue(d.importance().isPresent());
    	assertEquals(main.dimensionsIncrement, d.importance().get(), 0.0);

    	assertTrue(d.supernatural().isPresent());
    	assertEquals(main.dimensionsIncrement, d.supernatural().get(), 0.0);
    	
    	assertTrue(d.attitudeChanges().size() == 1);
    	assertTrue(d.attitudeChanges().containsKey(unaffiliated));
    	assertEquals(-main.attitudeIncrement, d.attitudeChanges().get(unaffiliated), 0.0);
    	
    	assertFalse(d.switchFrustration().isPresent());
    	
    	assertTrue(d.disaff().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.disaff().get(), 0.0);
    }
    
    @Test
    public void testDelta_SecSecPositiveAffirming() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(buddhists)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.hindus)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction("SEC_SEC", 
    													   InteractionsUtils.POSITIVE_AFFIRMING, 
    													   ego, 
    													   alter, 
    													   makeMockGPH(0.0, 0.0, 0.0, 0.0, 0.0), 
    													   main);
    	
    	assertFalse(d.getAffiliationChange().isPresent());
    	
    	assertFalse(d.strictness().isPresent());
    	
    	assertTrue(d.publicPractice().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.publicPractice().get(), 0.0);
    	
    	assertTrue(d.privatePractice().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.privatePractice().get(), 0.0);

    	assertTrue(d.importance().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.importance().get(), 0.0);

    	assertTrue(d.supernatural().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.supernatural().get(), 0.0);
    	
    	assertTrue(d.attitudeChanges().size() == 1);
    	assertTrue(d.attitudeChanges().containsKey(unaffiliated));
    	assertEquals(main.attitudeIncrement, d.attitudeChanges().get(unaffiliated), 0.0);
    	
    	assertTrue(d.switchFrustration().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.switchFrustration().get(), 0.0);
    	
    	assertFalse(d.disaff().isPresent());
    }
    
    @Test
    public void testDelta_SecSecNegativeSwitching() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(buddhists)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.hindus)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction("SEC_SEC", 
    													   InteractionsUtils.NEGATIVE_SWITCHING, 
    													   ego, 
    													   alter, 
    													   makeMockGPH(0.0, 0.0, 0.0, 0.0, 0.0), 
    													   main);
    	
    	assertFalse(d.getAffiliationChange().isPresent());
    	
    	assertFalse(d.strictness().isPresent());
    	
    	assertTrue(d.publicPractice().isPresent());
    	assertEquals(main.dimensionsIncrement, d.publicPractice().get(), 0.0);
    	
    	assertTrue(d.privatePractice().isPresent());
    	assertEquals(main.dimensionsIncrement, d.privatePractice().get(), 0.0);

    	assertTrue(d.importance().isPresent());
    	assertEquals(main.dimensionsIncrement, d.importance().get(), 0.0);

    	assertTrue(d.supernatural().isPresent());
    	assertEquals(main.dimensionsIncrement, d.supernatural().get(), 0.0);
    	
    	assertTrue(d.attitudeChanges().size() == 1);
    	assertTrue(d.attitudeChanges().containsKey(unaffiliated));
    	assertEquals(-main.attitudeSelfDecrement, d.attitudeChanges().get(unaffiliated), 0.0);
    	
    	assertTrue(d.switchFrustration().isPresent());
    	assertEquals(main.dimensionsIncrement, d.switchFrustration().get(), 0.0);
    	
    	assertFalse(d.disaff().isPresent());
    }
    
    @Test
    public void testDelta_SecRxPositiveSwitching() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(buddhists)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.hindus)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction("SEC_RX", 
    													   InteractionsUtils.POSITIVE_SWITCHING, 
    													   ego, 
    													   alter, 
    													   makeMockGPH(0.0, 0.0, 0.0, 0.0, 0.0), 
    													   main);
    	
    	assertFalse(d.getAffiliationChange().isPresent());
    	
    	assertFalse(d.strictness().isPresent());
    	
    	assertTrue(d.publicPractice().isPresent());
    	assertEquals(main.dimensionsIncrement / 4, d.publicPractice().get(), 0.0);
    	
    	assertTrue(d.privatePractice().isPresent());
    	assertEquals(main.dimensionsIncrement / 4, d.privatePractice().get(), 0.0);

    	assertTrue(d.importance().isPresent());
    	assertEquals(main.dimensionsIncrement / 4, d.importance().get(), 0.0);

    	assertTrue(d.supernatural().isPresent());
    	assertEquals(main.dimensionsIncrement / 4, d.supernatural().get(), 0.0);
    	
    	assertTrue(d.attitudeChanges().size() == 1);
    	assertTrue(d.attitudeChanges().containsKey(hindus));
    	assertEquals(main.attitudeIncrement, d.attitudeChanges().get(hindus), 0.0);
    	
    	assertTrue(d.switchFrustration().isPresent());
    	assertEquals(main.dimensionsIncrement / 4, d.switchFrustration().get(), 0.0);
    	
    	assertFalse(d.disaff().isPresent());
    }
    
    @Test
    public void testDelta_SecRxNegativeReactive() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(buddhists)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.hindus)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.build();
    	
    	Delta d = InteractionsUtils.getDeltaForInteraction("SEC_RX", 
    													   InteractionsUtils.NEGATIVE_REACTIVE, 
    													   ego, 
    													   alter, 
    													   makeMockGPH(0.0, 0.0, 0.0, 0.0, 0.0), 
    													   main);
    	
    	assertFalse(d.getAffiliationChange().isPresent());
    	
    	assertFalse(d.strictness().isPresent());
    	
    	assertTrue(d.publicPractice().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.publicPractice().get(), 0.0);
    	
    	assertTrue(d.privatePractice().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.privatePractice().get(), 0.0);

    	assertTrue(d.importance().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.importance().get(), 0.0);

    	assertTrue(d.supernatural().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.supernatural().get(), 0.0);
    	
    	assertTrue(d.attitudeChanges().size() == 1);
    	assertTrue(d.attitudeChanges().containsKey(hindus));
    	assertEquals(-main.attitudeIncrement, d.attitudeChanges().get(hindus), 0.0);
    	
    	assertTrue(d.switchFrustration().isPresent());
    	assertEquals(-main.dimensionsIncrement, d.switchFrustration().get(), 0.0);
    	
    	assertFalse(d.disaff().isPresent());
    }
    
    @Test
    public void testPerson_totalConversion() {
    	PersonReligiosity ego = new PersonReligiosity.Builder()
    			.affiliation(unaffiliated)
    			.build();
    	
    	PersonReligiosity alter = new PersonReligiosity.Builder()
    			.affiliation(Affiliation.buddhists)
    			.strictness(0.1)
    			.publicPractice(0.2)
    			.privatePractice(0.3)
    			.importance(0.4)
    			.supernaturalWorldview(0.5)
    			.attitudes(Map.of(hindus, 0.6))
    			.build();
    	
    	person.Affiliation = hindus;
    	assertTrue(person.Affiliation != buddhists);
    	Delta delta = InteractionsUtils.getDeltaForInteraction(InteractionsUtils.TOTAL_CONVERSION, "", ego, alter, main, main);
    	person.applyDeltas(List.of(delta));
    	
    	assertTrue(buddhists == person.Affiliation);
    	
    	assertEquals(Optional.of(1) ,main.personReligiosityCache.getTotalConversionCount(hindus, buddhists));
    	
    	assertEquals(0.1, person.strictness, 0.0);
    	
    	assertEquals(0.2, person.publicPractice, 0.0);
    	
    	assertEquals(0.3, person.privatePractice, 0.0);
    	
    	assertEquals(0.4, person.importance, 0.0);
    	
    	assertEquals(0.5, person.supernaturalWorldview, 0.0);
    	
    	assertEquals(0.6, person.attitudes.get(hindus), 0.0);
    	
    	assertEquals(0.1, person.switchFrustration, 0.0);
    	
    	assertEquals(0.1, person.disaffFrustration, 0.0);
    }
    
    @Test
    public void testPerson_MultipleNonConversion() {
    	person.Affiliation = Affiliation.buddhists;
    	person.publicPractice = 0.2;
    	person.privatePractice = 0.3;
    	person.importance = 0.4;
    	person.supernaturalWorldview = 0.5;
    	person.attitudes = new HashMap<>();
    	person.attitudes.put(hindus, 0.6);
    	person.switchFrustration = 0.7;
    	person.disaffFrustration = 0.75;
    	
    	Delta d1 = Delta.positiveAffirming()
    				.setDimensionDeltas(
    						0.2,
    						List.of(InteractionsUtils.PUBLIC,
    								InteractionsUtils.PRIVATE,
    								InteractionsUtils.IMPORTANCE,
    								InteractionsUtils.SUPERNATURAL,
    								InteractionsUtils.SWITCH,
    								InteractionsUtils.DISAFF),
    						List.of());
    	d1.addAttitudeDelta(hindus, 0.2);
    	Delta d2 = Delta.positiveAffirming()
				.setDimensionDeltas(
						0.1,
						List.of(),
						List.of(InteractionsUtils.PUBLIC,
								InteractionsUtils.PRIVATE,
								InteractionsUtils.IMPORTANCE,
								InteractionsUtils.SUPERNATURAL,
								InteractionsUtils.SWITCH,
								InteractionsUtils.DISAFF));
    	d2.addAttitudeDelta(hindus, -0.1);
    	
    	person.applyDeltas(List.of(d1, d2));
    	
    	assertTrue(buddhists == person.Affiliation);
    	
    	assertEquals(0.3, person.publicPractice, 1e-8);
    	
    	assertEquals(0.4, person.privatePractice, 1e-8);
    	
    	assertEquals(0.5, person.importance, 1e-8);
    	
    	assertEquals(0.6, person.supernaturalWorldview, 1e-8);
    	
    	assertEquals(0.7, person.attitudes.get(hindus), 1e-8);
    	
    	assertEquals(0.8, person.switchFrustration, 1e-8);
    	
    	assertEquals(0.85, person.disaffFrustration, 1e-8);
    }
    
    @Test
    public void testPerson_doSwitchingDisaff() {
    	double disaffThresh = DBUtils.getDisaffiliationThreshold(main);
    	person.disaffFrustration = disaffThresh + 0.01;
    	person.switchFrustration = 0;
    	person.Affiliation = Affiliation.christians;
    	
    	person.doSwitching();
    	
    	assertEquals((disaffThresh + 0.01) / 2, person.disaffFrustration, 1e-8);
    	assertTrue(person.Affiliation == unaffiliated);
    	assertEquals(Optional.of(1), main.personReligiosityCache.getDisaffiliationCount(christians));
    }
    
    @Test
    public void testPerson_doSwitchingSwitchUnaffiliated() {
    	double disaffThresh = DBUtils.getDisaffiliationThreshold(main);
    	person.disaffFrustration = disaffThresh - 0.01;
    	double switchThresh = DBUtils.getSwitchingThreshold(main);
    	person.switchFrustration = switchThresh + 0.01;
    	person.Affiliation = Affiliation.christians;
    	person.attitudes.put(christians, 0.5);
    	person.attitudes.put(unaffiliated, 0.6);
    	person.attitudes.put(hindus, 0.5);
    	
    	person.doSwitching();

    	assertEquals((disaffThresh - 0.01) / 2, person.disaffFrustration, 1e-8);
    	assertEquals((switchThresh + 0.01) / 2, person.switchFrustration, 1e-8);
    	assertTrue(person.Affiliation == unaffiliated);
    	assertEquals(Optional.of(1), main.personReligiosityCache.getSwitchCount(christians, unaffiliated));
    }
    
    @Test
    public void testPerson_doSwitchingSameAffLowThird() {
    	double disaffThresh = DBUtils.getDisaffiliationThreshold(main);
    	person.disaffFrustration = disaffThresh - 0.01;
    	double switchThresh = DBUtils.getSwitchingThreshold(main);
    	person.switchFrustration = switchThresh + 0.01;
    	person.Affiliation = Affiliation.christians;
    	person.attitudes.put(christians, 0.6);
    	person.attitudes.put(unaffiliated, 0.5);
    	person.attitudes.put(hindus, 0.5);
    	person.strictness = 0.3;
    	
    	person.doSwitching();

    	assertEquals((disaffThresh - 0.01) / 2, person.disaffFrustration, 1e-8);
    	assertEquals((switchThresh + 0.01) / 2, person.switchFrustration, 1e-8);
    	assertTrue(person.Affiliation == christians);
    	assertTrue(person.strictness > 1.0 / 3.0);
    }
    
    @Test
    public void testPerson_doSwitchingSameAffMidThird() {
    	double disaffThresh = DBUtils.getDisaffiliationThreshold(main);
    	person.disaffFrustration = disaffThresh - 0.01;
    	double switchThresh = DBUtils.getSwitchingThreshold(main);
    	person.switchFrustration = switchThresh + 0.01;
    	person.Affiliation = Affiliation.christians;
    	person.attitudes.put(christians, 0.6);
    	person.attitudes.put(unaffiliated, 0.5);
    	person.attitudes.put(hindus, 0.5);
    	person.strictness = 0.5;
    	
    	person.doSwitching();

    	assertEquals((disaffThresh - 0.01) / 2, person.disaffFrustration, 1e-8);
    	assertEquals((switchThresh + 0.01) / 2, person.switchFrustration, 1e-8);
    	assertTrue(person.Affiliation == christians);
    	assertTrue((person.strictness < 1.0 / 3.0) || (person.strictness >= 2.0 / 3.0));
    }
    
    @Test
    public void testPerson_doSwitchingSameAffHighThird() {
    	double disaffThresh = DBUtils.getDisaffiliationThreshold(main);
    	person.disaffFrustration = disaffThresh - 0.01;
    	double switchThresh = DBUtils.getSwitchingThreshold(main);
    	person.switchFrustration = switchThresh + 0.01;
    	person.Affiliation = Affiliation.christians;
    	person.attitudes.put(christians, 0.6);
    	person.attitudes.put(unaffiliated, 0.5);
    	person.attitudes.put(hindus, 0.5);
    	person.strictness = 0.9;
    	
    	person.doSwitching();

    	assertEquals((disaffThresh - 0.01) / 2, person.disaffFrustration, 1e-8);
    	assertEquals((switchThresh + 0.01) / 2, person.switchFrustration, 1e-8);
    	assertTrue(person.Affiliation == christians);
    	assertTrue(person.strictness < 2.0 / 3.0);
    }
    
    @Test
    public void testPerson_doSwitchingDiffAff() {
    	double disaffThresh = DBUtils.getDisaffiliationThreshold(main);
    	person.disaffFrustration = disaffThresh - 0.01;
    	double switchThresh = DBUtils.getSwitchingThreshold(main);
    	person.switchFrustration = switchThresh + 0.01;
    	person.Affiliation = Affiliation.christians;
    	person.attitudes.put(christians, 0.5);
    	person.attitudes.put(unaffiliated, 0.5);
    	person.attitudes.put(hindus, 0.6);
    	person.strictness = 0.9;
    	
    	person.doSwitching();

    	assertEquals((disaffThresh - 0.01) / 2, person.disaffFrustration, 1e-8);
    	assertEquals((switchThresh + 0.01) / 2, person.switchFrustration, 1e-8);
    	assertTrue(person.Affiliation == hindus);
    	assertEquals(Optional.of(1), main.personReligiosityCache.getSwitchCount(christians, hindus));
    }
    
    @Test
    public void testAttitudeAdjustment_higherSelfAtt() {
    	person.Affiliation = christians;
    	person.attitudes.put(christians, 0.5);
    	person.strictness = 0.2;
    	main.personReligiosityCache.add(new PersonReligiosity.Builder()
    			.attitudes(Map.of(christians, 0.4))
    			.affiliation(christians)
    			.age(12)
    			.strictness(0.2)
    			.build());
    	
    	person.attitudeAdjustment();
    	
    	assertTrue(person.attitudes.containsKey(christians));
    	assertEquals(0.5, person.attitudes.get(christians), 1e-8);
    }
    
    @Test
    public void testAttitudeAdjustment_lowerSelfAtt() {
    	person.Affiliation = christians;
    	person.attitudes.put(christians, 0.5);
    	person.strictness = 0.2;
    	main.personReligiosityCache.add(new PersonReligiosity.Builder()
    			.attitudes(Map.of(christians, 0.6))
    			.affiliation(christians)
    			.age(12)
    			.strictness(0.2)
    			.build());
    	
    	person.attitudeAdjustment();
    	
    	assertTrue(person.attitudes.containsKey(christians));
    	assertEquals(0.8, person.attitudes.get(christians), 1e-8);
    }
    
    @Test
    public void testAttitudeAdjustment_dimensionsHigher() {
    	person.Affiliation = christians;
    	person.attitudes.put(christians, 0.5);
    	person.strictness = 0.2;
    	person.publicPractice = 0.5;
    	person.privatePractice = 0.5;
    	person.supernaturalWorldview = 0.5;
    	person.importance = 0.5;
    	main.personReligiosityCache.clear();
    	main.personReligiosityCache.add(new PersonReligiosity.Builder()
    			.attitudes(Map.of(christians, 0.6))
    			.affiliation(christians)
    			.age(12)
    			.strictness(0.2)
    			.publicPractice(0.6)
    			.privatePractice(0.7)
    			.supernaturalWorldview(0.8)
    			.importance(0.9)
    			.build());
    	
    	person.attitudeAdjustment();

    	assertEquals(0.8, person.publicPractice, 1e-8);
    	assertEquals(0.85, person.privatePractice, 1e-8);
    	assertEquals(0.9, person.supernaturalWorldview, 1e-8);
    	assertEquals(0.95, person.importance, 1e-8);
    }
    
    @Test
    public void testAttitudeAdjustment_dimensionsLower() {
    	person.Affiliation = christians;
    	person.attitudes.put(christians, 0.5);
    	person.strictness = 0.2;
    	person.publicPractice = 0.5;
    	person.privatePractice = 0.5;
    	person.supernaturalWorldview = 0.5;
    	person.importance = 0.5;
    	main.personReligiosityCache.clear();
    	main.personReligiosityCache.add(new PersonReligiosity.Builder()
    			.attitudes(Map.of(christians, 0.6))
    			.affiliation(christians)
    			.age(12)
    			.strictness(0.2)
    			.publicPractice(0.4)
    			.privatePractice(0.4)
    			.supernaturalWorldview(0.4)
    			.importance(0.4)
    			.build());
    	
    	person.attitudeAdjustment();

    	assertEquals(0.6, person.publicPractice, 1e-8);
    	assertEquals(0.5, person.privatePractice, 1e-8);
    	assertEquals(0.5, person.supernaturalWorldview, 1e-8);
    	assertEquals(0.5, person.importance, 1e-8);
    }
    
    @Test
    public void testCoupleWith_bothStronglyReligiousDiffAff() {
    	Person ego = person;
    	Person alter = main.add_People();
    	
    	ego.importance = 0.6;
    	alter.importance = 0.7;
    	ego.Affiliation = aff1;
    	alter.Affiliation = aff2;
    	
    	ego.coupleWith(alter, true);
    	
    	// No change
    	assertTrue(ego.Affiliation == aff1);
    	assertTrue(alter.Affiliation == aff2);
    	assertEquals(0.6, ego.importance, 0.0);
    	assertEquals(0.7, alter.importance, 0.0);
    }
    
    @Test
    // Stochastic test - could fail and possible still be fine - increase total
    public void testCoupleWith_OneStrongOneWeak() {
    	int count1 = 0;
    	int count2 = 0;
    	int count3 = 0;
    	int total = 1000;
		Person weakEgo = person;
    	Person strongAlter = main.add_People();
    	setConvertStrictness(main, 0.2);
    	for (int i = 0; i < total; i++) {

        	main.personReligiosityCache.clear();
        	
        	weakEgo.Affiliation = aff1;
        	weakEgo.strictness = 0.12345;
        	weakEgo.importance = 0.4;
        	weakEgo.supernaturalWorldview = 0.1;
        	weakEgo.privatePractice = 0.2;
        	weakEgo.publicPractice = 0.3;
        	
        	strongAlter.Affiliation = aff2;
        	strongAlter.strictness = 0.54321;
        	strongAlter.importance = 0.7;
        	strongAlter.supernaturalWorldview = 0.123;
        	strongAlter.privatePractice = 0.234;
        	strongAlter.publicPractice = 0.345;
    		
        	weakEgo.coupleWith(strongAlter, true);
        	
    		if (weakEgo.Affiliation == aff1) {
    			// Situation1
    			assertEquals(0.12345, weakEgo.strictness, 0.0);
    			assertEquals(0.4, weakEgo.importance, 0.0);
    			assertEquals(0.1, weakEgo.supernaturalWorldview, 0.0);
    			assertEquals(0.2, weakEgo.privatePractice, 0.0);
    			assertEquals(0.3, weakEgo.publicPractice, 0.0);
    			
    			assertTrue(strongAlter.Affiliation == aff2);
    			assertEquals(0.54321, strongAlter.strictness, 0.0);
    			assertEquals(0.7, strongAlter.importance, 0.0);
    			assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
    			assertEquals(0.234, strongAlter.privatePractice, 0.0);
    			assertEquals(0.345, strongAlter.publicPractice, 0.0);
    			
    			count1++;
    		} else if (weakEgo.Affiliation == none) {
    			assertEquals(0.1, weakEgo.strictness, 0.0); // Half convert strictness
    			assertEquals(0.4 / 2, weakEgo.importance, 0.0);
    			assertEquals(0.1, weakEgo.supernaturalWorldview, 0.0);
    			assertEquals(0.2 / 2, weakEgo.privatePractice, 0.0);
    			assertEquals(0.3, weakEgo.publicPractice, 0.0);
    			
    			assertTrue(strongAlter.Affiliation == aff2);
    			assertEquals(0.54321, strongAlter.strictness, 0.0);
    			assertEquals(0.7, strongAlter.importance, 0.0);
    			assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
    			assertEquals(0.234, strongAlter.privatePractice, 0.0);
    			assertEquals(0.345, strongAlter.publicPractice, 0.0);
    			
    			assertEquals(Optional.of(1), main.personReligiosityCache.getCoupleSwitchCount(aff1, none));
    			
    			count2++;
    		} else if (weakEgo.Affiliation == aff2) {
    			assertEquals(0.54321, weakEgo.strictness, 0.0);
    			assertEquals(0.4, weakEgo.importance, 0.0);
    			assertEquals(0.1, weakEgo.supernaturalWorldview, 0.0);
    			assertEquals((0.2 + 0.234) / 2.0, weakEgo.privatePractice, 0.0);
    			assertEquals(0.345, weakEgo.publicPractice, 0.0);
    			
    			assertTrue(strongAlter.Affiliation == aff2);
    			assertEquals(0.54321, strongAlter.strictness, 0.0);
    			assertEquals(0.7, strongAlter.importance, 0.0);
    			assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
    			assertEquals(0.234, strongAlter.privatePractice, 0.0);
    			assertEquals(0.345, strongAlter.publicPractice, 0.0);
    			
    			assertEquals(Optional.of(1), main.personReligiosityCache.getCoupleSwitchCount(aff1, aff2));
    			
    			count3++;
    		} else {
    			fail("This should not be possible");
    		}
    	}

    	assertEquals(1.0 / 3.0, count1 / (1.0 * total), 0.05);
    	assertEquals(1.0 / 3.0, count2 / (1.0 * total), 0.05);
    	assertEquals(1.0 / 3.0, count3 / (1.0 * total), 0.05);
    }
    
    @Test
    public void testCoupleWith_OneStrongOneWeekHighSN() {
    	int count1 = 0;
    	int count2 = 0;
    	int count3 = 0;
    	int total = 1000;
		Person weakEgo = person;
    	Person strongAlter = main.add_People();
    	setConvertStrictness(main, 0.2);
    	for (int i = 0; i < total; i++) {
    		main.personReligiosityCache.clear();
    		
        	weakEgo.Affiliation = aff1;
        	weakEgo.strictness = 0.12345;
        	weakEgo.importance = 0.4;
        	weakEgo.supernaturalWorldview = 0.6;
        	weakEgo.privatePractice = 0.2;
        	weakEgo.publicPractice = 0.3;
        	
        	strongAlter.Affiliation = aff2;
        	strongAlter.strictness = 0.54321;
        	strongAlter.importance = 0.7;
        	strongAlter.supernaturalWorldview = 0.123;
        	strongAlter.privatePractice = 0.234;
        	strongAlter.publicPractice = 0.345;
    		
        	weakEgo.coupleWith(strongAlter, true);
        	
    		if (weakEgo.Affiliation == aff1) {
    			// Situation1
    			assertEquals(0.12345, weakEgo.strictness, 0.0);
    			assertEquals(0.4, weakEgo.importance, 0.0);
    			assertEquals(0.6, weakEgo.supernaturalWorldview, 0.0);
    			assertEquals(0.2, weakEgo.privatePractice, 0.0);
    			assertEquals(0.3, weakEgo.publicPractice, 0.0);
    			
    			assertTrue(strongAlter.Affiliation == aff2);
    			assertEquals(0.54321, strongAlter.strictness, 0.0);
    			assertEquals(0.7, strongAlter.importance, 0.0);
    			assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
    			assertEquals(0.234, strongAlter.privatePractice, 0.0);
    			assertEquals(0.345, strongAlter.publicPractice, 0.0);
    			
    			count1++;
    		} else if (weakEgo.Affiliation == none) {
    			assertEquals(0.1, weakEgo.strictness, 0.0);
    			assertEquals(0.4, weakEgo.importance, 0.0);
    			assertEquals(0.6, weakEgo.supernaturalWorldview, 0.0);
    			assertEquals(0.2, weakEgo.privatePractice, 0.0);
    			assertEquals(0.3, weakEgo.publicPractice, 0.0);
    			
    			assertTrue(strongAlter.Affiliation == aff2);
    			assertEquals(0.54321, strongAlter.strictness, 0.0);
    			assertEquals(0.7, strongAlter.importance, 0.0);
    			assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
    			assertEquals(0.234, strongAlter.privatePractice, 0.0);
    			assertEquals(0.345, strongAlter.publicPractice, 0.0);
    			
    			assertEquals(Optional.of(1), main.personReligiosityCache.getCoupleSwitchCount(aff1, none));
    			
    			count2++;
    		} else if (weakEgo.Affiliation == aff2) {
    			assertEquals(0.54321, weakEgo.strictness, 0.0);
    			assertEquals(0.4, weakEgo.importance, 0.0);
    			assertEquals(0.6, weakEgo.supernaturalWorldview, 0.0);
    			assertEquals((0.2 + 0.234) / 2.0, weakEgo.privatePractice, 0.0);
    			assertEquals(0.345, weakEgo.publicPractice, 0.0);
    			
    			assertTrue(strongAlter.Affiliation == aff2);
    			assertEquals(0.54321, strongAlter.strictness, 0.0);
    			assertEquals(0.7, strongAlter.importance, 0.0);
    			assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
    			assertEquals(0.234, strongAlter.privatePractice, 0.0);
    			assertEquals(0.345, strongAlter.publicPractice, 0.0);

    			assertEquals(Optional.of(1), main.personReligiosityCache.getCoupleSwitchCount(aff1, aff2));
    			
    			count3++;
    		} else {
    			fail("This should not be possible");
    		}
    	}

    	assertEquals(1.0 / 3.0, count1 / (1.0 * total), 0.05);
    	assertEquals(1.0 / 3.0, count2 / (1.0 * total), 0.05);
    	assertEquals(1.0 / 3.0, count3 / (1.0 * total), 0.05);
    }
    
    @Test
    public void testCoupleWith_BothWeakHighNTransform() {
    	int count1 = 0;
    	int count2 = 0;
    	int count3 = 0;
    	int count4 = 0;
    	int count5 = 0;
    	int count6 = 0;
    	double total = 1000;
		Person weakEgo = person;
    	Person strongAlter = main.add_People();
    	setConvertStrictness(main, 0.2);
    	for (int i = 0; i < total; i++) {
    		
    		main.personReligiosityCache.clear();
        	main.personReligiosityCache = createPopulatedPRCWithNonesProp(0.8);
    		
        	weakEgo.Affiliation = aff1;
        	weakEgo.strictness = 0.12345;
        	weakEgo.importance = 0.4;
        	weakEgo.supernaturalWorldview = 0.6;
        	weakEgo.privatePractice = 0.2;
        	weakEgo.publicPractice = 0.3;
        	
        	strongAlter.Affiliation = aff2;
        	strongAlter.strictness = 0.54321;
        	strongAlter.importance = 0.3;
        	strongAlter.supernaturalWorldview = 0.123;
        	strongAlter.privatePractice = 0.234;
        	strongAlter.publicPractice = 0.345;
    		
        	weakEgo.coupleWith(strongAlter, true);
        	
    		if (weakEgo.Affiliation == aff1 && strongAlter.Affiliation == aff2) {
    			// Both stayed, no changes
    			assertEquals(0.12345, weakEgo.strictness, 0.0);
    			assertEquals(0.4, weakEgo.importance, 0.0);
    			assertEquals(0.6, weakEgo.supernaturalWorldview, 0.0);
    			assertEquals(0.2, weakEgo.privatePractice, 0.0);
    			assertEquals(0.3, weakEgo.publicPractice, 0.0);
    			
    			assertTrue(strongAlter.Affiliation == aff2);
    			assertEquals(0.54321, strongAlter.strictness, 0.0);
    			assertEquals(0.3, strongAlter.importance, 0.0);
    			assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
    			assertEquals(0.234, strongAlter.privatePractice, 0.0);
    			assertEquals(0.345, strongAlter.publicPractice, 0.0);
    			
    			count1++;
    		} else if (weakEgo.Affiliation == aff1 && strongAlter.Affiliation == aff1) {
    			// Strong converts
    			assertEquals(0.12345, weakEgo.strictness, 0.0);
    			assertEquals(0.4, weakEgo.importance, 0.0);
    			assertEquals(0.6, weakEgo.supernaturalWorldview, 0.0);
    			assertEquals(0.2, weakEgo.privatePractice, 0.0);
    			assertEquals(0.3, weakEgo.publicPractice, 0.0);
    			
    			assertEquals(0.12345, strongAlter.strictness, 0.0);
    			assertEquals(0.3, strongAlter.importance, 0.0);
    			assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
    			assertEquals((0.234 + 0.2) / 2.0, strongAlter.privatePractice, 0.0);
    			assertEquals(0.3, strongAlter.publicPractice, 0.0);
    			
    			assertEquals(Optional.of(1), main.personReligiosityCache.getCoupleSwitchCount(aff2, aff1));
    			
    			count2++;
    		} else if (weakEgo.Affiliation == aff2 && strongAlter.Affiliation == aff2) {
    			// Weak converts
    			assertEquals(0.54321, weakEgo.strictness, 0.0);
    			assertEquals(0.4, weakEgo.importance, 0.0);
    			assertEquals(0.6, weakEgo.supernaturalWorldview, 0.0);
    			assertEquals((0.234 + 0.2) / 2.0, weakEgo.privatePractice, 0.0);
    			assertEquals(0.345, weakEgo.publicPractice, 0.0);
    			
    			assertEquals(0.54321, strongAlter.strictness, 0.0);
    			assertEquals(0.3, strongAlter.importance, 0.0);
    			assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
    			assertEquals(0.234, strongAlter.privatePractice, 0.0);
    			assertEquals(0.345, strongAlter.publicPractice, 0.0);
    			
    			assertEquals(Optional.of(1), main.personReligiosityCache.getCoupleSwitchCount(aff1, aff2));
    			
    			count3++;
    		} else if (weakEgo.Affiliation == none && strongAlter.Affiliation == aff2) {
    			assertEquals(0.1, weakEgo.strictness, 0.0);
    			assertEquals(0.4, weakEgo.importance, 0.0);
    			assertEquals(0.6, weakEgo.supernaturalWorldview, 0.0);
    			assertEquals(0.2, weakEgo.privatePractice, 0.0);
    			assertEquals(0.3 / 2.0, weakEgo.publicPractice, 0.0);
    			
    			assertEquals(0.54321, strongAlter.strictness, 0.0);
    			assertEquals(0.3, strongAlter.importance, 0.0);
    			assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
    			assertEquals(0.234, strongAlter.privatePractice, 0.0);
    			assertEquals(0.345, strongAlter.publicPractice, 0.0);
    			
    			assertEquals(Optional.of(1), main.personReligiosityCache.getCoupleSwitchCount(aff1, none));
    			
    			count4++;
    		} else if (weakEgo.Affiliation == aff1 && strongAlter.Affiliation == none) {
    			assertEquals(0.12345, weakEgo.strictness, 0.0);
    			assertEquals(0.4, weakEgo.importance, 0.0);
    			assertEquals(0.6, weakEgo.supernaturalWorldview, 0.0);
    			assertEquals(0.2, weakEgo.privatePractice, 0.0);
    			assertEquals(0.3, weakEgo.publicPractice, 0.0);
    			
    			assertEquals(0.1, strongAlter.strictness, 0.0);
    			assertEquals(0.3 / 2.0, strongAlter.importance, 0.0);
    			assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
    			assertEquals(0.234 / 2.0, strongAlter.privatePractice, 0.0);
    			assertEquals(0.345 / 2.0, strongAlter.publicPractice, 0.0);
    			

    			assertEquals(Optional.of(1), main.personReligiosityCache.getCoupleSwitchCount(aff2, none));
    			
    			count5++;
    		} else if (weakEgo.Affiliation == none && strongAlter.Affiliation == none) {
    			assertEquals(0.1, weakEgo.strictness, 0.0);
    			assertEquals(0.4, weakEgo.importance, 0.0);
    			assertEquals(0.6, weakEgo.supernaturalWorldview, 0.0);
    			assertEquals(0.2, weakEgo.privatePractice, 0.0);
    			assertEquals(0.3, weakEgo.publicPractice, 0.0);
    			
    			assertEquals(0.1, strongAlter.strictness, 0.0);
    			assertEquals(0.3 / 2.0, strongAlter.importance, 0.0);
    			assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
    			assertEquals(0.234 / 2.0, strongAlter.privatePractice, 0.0);
    			assertEquals(0.345, strongAlter.publicPractice, 0.0);
    			

    			assertEquals(Optional.of(1), main.personReligiosityCache.getCoupleSwitchCount(aff1, none));
    			assertEquals(Optional.of(1), main.personReligiosityCache.getCoupleSwitchCount(aff2, none));
    			
    			count6++;
    		} else {
    			fail("This should not happen.");
    		}
    	}

    	assertEquals(count1 / total, count2 / total, 0.05);
    	assertEquals(count3 / total, count2 / total, 0.05);
    	assertEquals(count1 / total, count3 / total, 0.05);
    	assertEquals(count4 / total, count5 / total, 0.05);
    	assertTrue(count6 > count5);
    	assertTrue(count6 > count4);
    }
    
    @Test
    public void testCoupleWith_oneNoneOneNotStronglyReligiousHighNones() {
    	Person weakEgo = person;
    	Person strongAlter = main.add_People();
    	main.personReligiosityCache = createPopulatedPRCWithNonesProp(0.8);
    	weakEgo.Affiliation = none;
    	weakEgo.strictness = 0.12345;
    	weakEgo.importance = 0.4;
    	weakEgo.supernaturalWorldview = 0.6;
    	weakEgo.privatePractice = 0.2;
    	weakEgo.publicPractice = 0.3;
    	
    	strongAlter.Affiliation = aff2;
    	strongAlter.strictness = 0.54321;
    	strongAlter.importance = 0.7;
    	strongAlter.supernaturalWorldview = 0.123;
    	strongAlter.privatePractice = 0.234;
    	strongAlter.publicPractice = 0.345;
		
    	weakEgo.coupleWith(strongAlter, true);
    	
    	// Both stayed, no changes
    	assertTrue(weakEgo.Affiliation == none);
		assertEquals(0.12345, weakEgo.strictness, 0.0);
		assertEquals(0.4, weakEgo.importance, 0.0);
		assertEquals(0.6, weakEgo.supernaturalWorldview, 0.0);
		assertEquals(0.2, weakEgo.privatePractice, 0.0);
		assertEquals(0.3, weakEgo.publicPractice, 0.0);
		
		assertTrue(strongAlter.Affiliation == aff2);
		assertEquals(0.54321, strongAlter.strictness, 0.0);
		assertEquals(0.7, strongAlter.importance, 0.0);
		assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
		assertEquals(0.234, strongAlter.privatePractice, 0.0);
		assertEquals(0.345, strongAlter.publicPractice, 0.0);
    }
    
    @Test
    public void testCoupleWith_oneNoneOneNotStronglyReligiousLowNones() {
    	Person weakEgo = person;
    	Person strongAlter = main.add_People();
    	main.personReligiosityCache = createPopulatedPRCWithNonesProp(0.1);
    	weakEgo.Affiliation = none;
    	weakEgo.strictness = 0.12345;
    	weakEgo.importance = 0.4;
    	weakEgo.supernaturalWorldview = 0.6;
    	weakEgo.privatePractice = 0.2;
    	weakEgo.publicPractice = 0.3;
    	
    	strongAlter.Affiliation = aff2;
    	strongAlter.strictness = 0.54321;
    	strongAlter.importance = 0.7;
    	strongAlter.supernaturalWorldview = 0.123;
    	strongAlter.privatePractice = 0.234;
    	strongAlter.publicPractice = 0.345;
		
    	weakEgo.coupleWith(strongAlter, true);
    	
    	// Both stayed, no changes
    	assertTrue(weakEgo.Affiliation == aff2);
		assertEquals(0.54321, weakEgo.strictness, 0.0);
		assertEquals((0.4 + 0.7) / 2.0, weakEgo.importance, 0.0);
		assertEquals((0.6 + 0.123) / 2.0, weakEgo.supernaturalWorldview, 0.0);
		assertEquals((0.2 + 0.234) / 2.0, weakEgo.privatePractice, 0.0);
		assertEquals(0.345, weakEgo.publicPractice, 0.0);
		
		assertTrue(strongAlter.Affiliation == aff2);
		assertEquals(0.54321, strongAlter.strictness, 0.0);
		assertEquals(0.7, strongAlter.importance, 0.0);
		assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
		assertEquals(0.234, strongAlter.privatePractice, 0.0);
		assertEquals(0.345, strongAlter.publicPractice, 0.0);
    }
    
    @Test
    public void testCoupleWith_oneNoneOneNotWeaklyReligiousLowNones() {
    	Person weakEgo = person;
    	Person strongAlter = main.add_People();
    	main.personReligiosityCache = createPopulatedPRCWithNonesProp(0.1);
    	weakEgo.Affiliation = none;
    	weakEgo.strictness = 0.12345;
    	weakEgo.importance = 0.4;
    	weakEgo.supernaturalWorldview = 0.6;
    	weakEgo.privatePractice = 0.2;
    	weakEgo.publicPractice = 0.3;
    	
    	strongAlter.Affiliation = aff2;
    	strongAlter.strictness = 0.54321;
    	strongAlter.importance = 0.3;
    	strongAlter.supernaturalWorldview = 0.123;
    	strongAlter.privatePractice = 0.234;
    	strongAlter.publicPractice = 0.345;
		
    	weakEgo.coupleWith(strongAlter, true);
    	
    	// Both stayed, no changes
    	assertTrue(weakEgo.Affiliation == aff2);
		assertEquals(0.54321, weakEgo.strictness, 0.0);
		assertEquals((0.4 + 0.3) / 2.0, weakEgo.importance, 0.0);
		assertEquals((0.6 + 0.123) / 2.0, weakEgo.supernaturalWorldview, 0.0);
		assertEquals((0.2 + 0.234) / 2.0, weakEgo.privatePractice, 0.0);
		assertEquals(0.345, weakEgo.publicPractice, 0.0);
		
		assertTrue(strongAlter.Affiliation == aff2);
		assertEquals(0.54321, strongAlter.strictness, 0.0);
		assertEquals(0.3, strongAlter.importance, 0.0);
		assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
		assertEquals(0.234, strongAlter.privatePractice, 0.0);
		assertEquals(0.345, strongAlter.publicPractice, 0.0);
    }
    
    @Test
    public void testCoupleWith_oneNoneOneNotWeaklyReligiousMediumNones() {
    	Person weakEgo = person;
    	Person strongAlter = main.add_People();
    	main.personReligiosityCache = createPopulatedPRCWithNonesProp(0.5);
    	weakEgo.Affiliation = none;
    	weakEgo.strictness = 0.12345;
    	weakEgo.importance = 0.4;
    	weakEgo.supernaturalWorldview = 0.6;
    	weakEgo.privatePractice = 0.2;
    	weakEgo.publicPractice = 0.3;
    	
    	strongAlter.Affiliation = aff2;
    	strongAlter.strictness = 0.54321;
    	strongAlter.importance = 0.3;
    	strongAlter.supernaturalWorldview = 0.123;
    	strongAlter.privatePractice = 0.234;
    	strongAlter.publicPractice = 0.345;
		
    	weakEgo.coupleWith(strongAlter, true);
    	
    	// Both stayed, no changes
    	assertTrue(weakEgo.Affiliation == none);
		assertEquals(0.12345, weakEgo.strictness, 0.0);
		assertEquals(0.4, weakEgo.importance, 0.0);
		assertEquals(0.6, weakEgo.supernaturalWorldview, 0.0);
		assertEquals(0.2, weakEgo.privatePractice, 0.0);
		assertEquals(0.3, weakEgo.publicPractice, 0.0);
		
		assertTrue(strongAlter.Affiliation == aff2);
		assertEquals(0.54321, strongAlter.strictness, 0.0);
		assertEquals(0.3, strongAlter.importance, 0.0);
		assertEquals(0.123, strongAlter.supernaturalWorldview, 0.0);
		assertEquals(0.234, strongAlter.privatePractice, 0.0);
		assertEquals(0.345, strongAlter.publicPractice, 0.0);
    }
    
    @Test
    public void testCoupleWith_oneNoneOneNotWeaklyReligiousHighNones() {
    	Person weakEgo = person;
    	Person strongAlter = main.add_People();
    	main.personReligiosityCache = createPopulatedPRCWithNonesProp(0.8);
    	weakEgo.Affiliation = none;
    	weakEgo.strictness = 0.12345;
    	weakEgo.importance = 0.4;
    	weakEgo.supernaturalWorldview = 0.6;
    	weakEgo.privatePractice = 0.2;
    	weakEgo.publicPractice = 0.3;
    	
    	strongAlter.Affiliation = aff2;
    	strongAlter.strictness = 0.54321;
    	strongAlter.importance = 0.3;
    	strongAlter.supernaturalWorldview = 0.123;
    	strongAlter.privatePractice = 0.234;
    	strongAlter.publicPractice = 0.345;
		
    	weakEgo.coupleWith(strongAlter, true);
    	
    	// Both stayed, no changes
    	assertTrue(weakEgo.Affiliation == none);
		assertEquals(0.12345, weakEgo.strictness, 0.0);
		assertEquals(0.4, weakEgo.importance, 0.0);
		assertEquals(0.6, weakEgo.supernaturalWorldview, 0.0);
		assertEquals(0.2, weakEgo.privatePractice, 0.0);
		assertEquals(0.3, weakEgo.publicPractice, 0.0);
		
		assertTrue(strongAlter.Affiliation == none);
		assertEquals(0.12345, strongAlter.strictness, 0.0);
		assertEquals((0.3 + 0.4) / 2.0, strongAlter.importance, 0.0);
		assertEquals((0.123 + 0.6) / 2.0, strongAlter.supernaturalWorldview, 0.0);
		assertEquals((0.234 + 0.2) / 2.0, strongAlter.privatePractice, 0.0);
		assertEquals(0.3, strongAlter.publicPractice, 0.0);
    }
}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1697124883807</Id>
			<Name><![CDATA[GlobalParametersHaving]]></Name>
			<Text><![CDATA[public interface GlobalParametersHaving
{
	public double religiousEducation();
	public double secularEducation();
	public double pluralism();
	public double existentialSecurity();
	public double lifestyleOpportunity();
	public double freedom();
}]]></Text>
		</JavaClass>
	</JavaClasses>
	<ModelResources>
		<Resource>
			<Path><![CDATA[/home/research1/Downloads/Tables(1).xlsx]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[hamcrest-core-1.3.jar]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[junit-4.13.2.jar]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
	</ModelResources>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[com.anylogic.libraries.modules.markup_descriptors]]></LibraryName>
		<VersionMajor>1</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
			<ClassName><![CDATA[hamcrest-core-1.3.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[cohort_comp_method_2020]]></PackageName>
			<ClassName><![CDATA[junit-4.13.2.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
</Model>
</AnyLogicWorkspace>